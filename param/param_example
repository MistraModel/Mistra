#!/bin/bash
# ======================================================================= #
# Copyright 1996-2017 the Authors
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
# ======================================================================= #

# The param script is used to set the input/output directories, select
# the model executable and the namelist file with the model configuration,
# and start the model run.
# ===============================================================

# NAME OF MODEL RUN
TITLE="Example Mistra simulation"

# MISTRA DIRECTORY
MISTRADIR=$HOME/Mistra/

# MODEL EXECUTABLE
MISTRAEXE=$MISTRADIR/src/mistra

# NAMELIST TO USE
NAMELIST=$MISTRADIR/namelists/namelist.example

# MECHANISM DIRECTORY
MECHDIR=$MISTRADIR/src/mech/

# INPUT DIRECTORY
INPDIR=$MISTRADIR/input/

# PARENT OUTPUT DIR
POUTDIR=$MISTRADIR/output/


#################################################################
# Below are automated instructions to start the run             #
#################################################################


# EXPID = second part of param_... name
[[ $0 != *param_* ]] && echo -e "$0\nWarn : The installer should be sourced from a 'param_' file">&2 && exit 1
[ -z $EXPID ] && EXPID=$(basename $0 | sed -e 's/param_//g')
[ -z $EXPID ] && echo "You must set EXPID ">&2 && exit 1

# Create one output subdirectory for each run
# -- first define OUTDIR
OUTDIR=$POUTDIR$EXPID/
# -- then check if it already exists
if [ -e $OUTDIR ]
then
    answer=''
    until [[ $answer == 'y' ]] || [[ $answer == 'n' ]] || [[ $answer == 'e' ]] ; do
        echo "The simulations already exists, overwrite?"
        echo "  (fresh run, choose y; restart same run, choose n; exit to change name, choose e)"
        read -p "(y=yes / n=no / e=exit)" answer
    done
    [[ $answer == 'y' ]] && rm -f $OUTDIR/* && echo "Output sub-directory cleaned, continue installation"
    [[ $answer == 'n' ]] && echo "Continue installation"
    [[ $answer == 'e' ]] && echo "Installation aborted, change the param name" && exit 1
else
    mkdir -p $OUTDIR
    echo "Output sub-directory created, continue installation"
fi

# Define file names to redirect standard output and error messages
STDOUT=${OUTDIR}/last_run.out
STDERR=${OUTDIR}/last_run.err

# Launch the executable
# -- The "env VAR=$VAR" instruction allows to pass an environment variable to the model,
#    without having to define a global (= system wide) environment variable
if [ -e $MISTRAEXE ]
then
    echo "Installation ended, the run will start"
    echo $TITLE >> $STDOUT
    echo "--------------------------------------------------------------------------------" >> $STDOUT
    env INPDIR=$INPDIR NAMELIST=$NAMELIST OUTDIR=$OUTDIR MECHDIR=$MECHDIR $MISTRAEXE >> $STDOUT 2>>$STDERR
else
    echo "The executable does not exist, installation aborted" && exit 1
fi

# Move output files to OUTDIR
mv *.out *.nc rst*.dat $OUTDIR

echo " -- End of param script (end of the run) -- "
