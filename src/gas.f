C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C                                                                  
C Main Program File                                                
C                                                                  
C Generated by KPP-2.2.4 for Mistra symbolic chemistry Kinetics PreProcessor
C       (http://www.cs.vt.edu/~asandu/Software/Kpp)                
C KPP is distributed under GPL, the general public licence         
C       (http://www.gnu.org/copyleft/gpl.html)                     
C (C) 1995-1997, V. Damian & A. Sandu, CGRER, Univ. Iowa           
C (C) 1997-2005, A. Sandu, Michigan Tech, Virginia Tech            
C     With important contributions from:                           
C        M. Damian, Villanova University, USA                      
C        R. Sander, Max-Planck Institute for Chemistry, Mainz, Germany
C                                                                  
C File                 : gas_Main.f                                
C Time                 : Wed Jul 14 18:26:57 2021                  
C Working directory    : /local/josue/Mistra_2019/src/mech         
C Equation file        : gas.k                                     
C Output root filename : gas                                       
C                                                                  
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C                                                                  
C MAIN - Main program - driver routine                             
C   Arguments :                                                    
C                                                                  
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!
! Copyright 1996-2017 the Authors
!
! Licensed under the EUPL, Version 1.1 only (the "Licence");
!
! You may not use this work except in compliance with the Licence.
! You may obtain a copy of the Licence at:
!   https://joinup.ec.europa.eu/software/page/eupl
!
! Unless required by applicable law or agreed to in writing,
! software distributed under the Licence is distributed on an
! "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
! either express or implied.
!
! See the Licence for the specific language governing permissions
! and limitations under the Licence.

      module kpp_gas_Parameters
      include 'gas_Parameters.h' ! KPP parameters
      end module kpp_gas_Parameters

      module kpp_gas_Global
      include 'gas_Parameters.h' ! KPP parameters
      include 'gas_Global.h'     ! KPP common blocs and additional user common blocks and other definitions
      end module kpp_gas_Global



      subroutine gas_drive
     &     (tkpp,dt_ch,k,yhal,yiod,yhet1,yhet2,air,h2o,xph_rat)


      USE constants, ONLY :
! Imported Parameters:
     &     xconv1=>conv1 ! multiply by conv1 to get cm^3(air)/mlc --> m^3(air)/mol

      USE gas_common, ONLY :
     &     j1, j5,
     &     s1, s3,
     &     gas_k2m_g, gas_m2k_g,
     &     rad_k2m_g, rad_m2k_g

      USE global_params, ONLY :
! Imported Parameters:
     &     j2,
     &     j6,
     &     n,
     &     nkc,
     &     nlev,
     &     nrxn

      implicit none

      include 'gas_Parameters.h' ! KPP parameters
      include 'gas_Global.h'     ! KPP common blocs and additional user common blocks and other definitions
! Subroutine arguments
      double precision tkpp,dt_ch,yhal,yiod,yhet1,yhet2,air,h2o

      double precision xph_rat(nphrxn)
      integer k

! Local scalar:
      integer kl ! do loop index to search if k belongs to il(nlev) list
      integer j

! Common blocks:
      common /blck12/ cwd(nkc,n),cm(nkc,n)
      double precision cwd, cm

      common /blck17/ sl1(j2,nkc,n),sion1(j6,nkc,n)
      double precision sl1, sion1

      common /budg/ bg(2,nrxn,nlev),il(nlev)
      double precision bg ! reaction rates (bg(1,:,:): instantaneous, bg(2,:,:): cumulative)
      integer il          ! indexes of the selected levels for reaction rates output

      common /kpp_dryg/ xkmtd(NSPEC,2,n),henry(NSPEC,n),xeq(NSPEC,n)
      double precision xkmtd, henry, xeq
!     common /kpp_dryp/ rcd(n,2),cwd(n,2)


! parameters for /kpp_rate_g/
      xhal=yhal
      xiod=yiod
      xhet1=yhet1
      xhet2=yhet2
      conv1=xconv1
      ph_rat=xph_rat ! jjb

c the following data is needed only for heterogeneous reactions on dry aerosol
      ycwd(:)=cwd(:2,k)
      yxkmtd(:,:)=xkmtd(:,:,k)
      yhenry(:)  =henry(:,k)
      yxeq(:)    =xeq(:,k)

c concentrations are handed over HERE (and not in seperate SRs) because the
c parameter (ind_XXX) are different for each KPP block


! Transfer Mistra concentration arrays towards KPP arrays
      do j=1,j1
         C(gas_m2k_g(1,j)) = s1(gas_m2k_g(2,j),k)
      end do

      do j=1,j5
         C(rad_m2k_g(1,j)) = s3(rad_m2k_g(2,j),k)
      end do

c PRN2,PRPN,OZID are products, that don't react further, so no transport is needed
c maybe they are interesting as output ?? #



! #DEFFIX
      FIX(indf_O2)  = 0.21*air
      FIX(indf_H2O) = h2o
      FIX(indf_N2) = 0.79*air

! define "heterogeneous species"
      C(ind_HNO3l1) = max(0.d0,sl1(3,1,k))
      C(ind_NH3l1)  = max(0.d0,sl1(4,1,k))
      C(ind_SO4l1)  = max(0.d0,sl1(6,1,k))
      C(ind_HNO3l2) = max(0.d0,sl1(3,2,k))
      C(ind_NH3l2)  = max(0.d0,sl1(4,2,k))
      C(ind_SO4l2)  = max(0.d0,sl1(6,2,k))

!         C(ind_OHml1) =sion1(3,1,k)
!         C(ind_NO3ml1) =sion1(13,1,k)
!         C(ind_CLml1) =sion1(14,1,k)
!         C(ind_Brml1) = sion1(24,1,k)

!         C(ind_OHml2) =sion1(3,2,k)
!         C(ind_NO3ml2) =sion1(13,2,k)
!         C(ind_CLml2) =sion1(14,2,k)
!         C(ind_Brml2) = sion1(24,2,k)


! integrate

      dt=dt_ch
      call Update_RCONST_g ()
      call INTEGRATE_g (tkpp, tkpp+dt_ch )

!     call bud_g (h2o,co,air,dt_ch,k) ! jjb h2o, co, air unused
!     call bud_g (dt_ch,k)

! Call budget subroutine only for selected levels
      do kl=1,nlev
         if(k.eq.il(kl)) then
            call bud_gas (dt_ch,kl)
            exit
         end if
      end do

! Call specific budget subroutine for all levels
      call bud_s_gas (dt_ch,k)

! hand-over concentrations: KPP --> MISTRA
! #DEFVAR
      do j=1,j1
         s1(j,k) = C(gas_k2m_g(j))
      end do
! #DEFRAD
      do j=1,j5
         s3(j,k) = C(rad_k2m_g(j))
      end do

! define "heterogeneous species"
      sl1(3,1,k) = max(0.d0,C(ind_HNO3l1))
      sl1(4,1,k) = max(0.d0,C(ind_NH3l1))
      sl1(6,1,k) = max(0.d0,C(ind_SO4l1))
      sl1(3,2,k) = max(0.d0,C(ind_HNO3l2))
      sl1(4,2,k) = max(0.d0,C(ind_NH3l2))   
      sl1(6,2,k) = max(0.d0,C(ind_SO4l2))

!         sion1(3,1,k) =C(ind_OHml1) 
!         sion1(13,1,k) =C(ind_NO3ml1) 
!         sion1(14,1,k) =C(ind_CLml1) 
!         sion1(24,1,k) = C(ind_Brml1)

!         sion1(3,2,k) =C(ind_OHml2) 
!         sion1(13,2,k) =C(ind_NO3ml2) 
!         sion1(14,2,k) =C(ind_CLml2) 
!         sion1(24,2,k) = C(ind_Brml2)

      end subroutine gas_drive

C End of MAIN function                                             
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C                                                                  
C The Reaction Rates File                                          
C                                                                  
C Generated by KPP-2.2.4 for Mistra symbolic chemistry Kinetics PreProcessor
C       (http://www.cs.vt.edu/~asandu/Software/Kpp)                
C KPP is distributed under GPL, the general public licence         
C       (http://www.gnu.org/copyleft/gpl.html)                     
C (C) 1995-1997, V. Damian & A. Sandu, CGRER, Univ. Iowa           
C (C) 1997-2005, A. Sandu, Michigan Tech, Virginia Tech            
C     With important contributions from:                           
C        M. Damian, Villanova University, USA                      
C        R. Sander, Max-Planck Institute for Chemistry, Mainz, Germany
C                                                                  
C File                 : gas_Rates.f                               
C Time                 : Wed Jul 14 18:26:57 2021                  
C Working directory    : /local/josue/Mistra_2019/src/mech         
C Equation file        : gas.k                                     
C Output root filename : gas                                       
C                                                                  
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~




C Begin Rate Law Functions from KPP_HOME/util/UserRateLaws         

C  jjb 02-07-2016
C
C all Rate Law functions from KPP (default) deleted
C original file copied in util/UserRateLaws.f_original

C End Rate Law Functions from KPP_HOME/util/UserRateLaws           


C Begin INLINED Rate Law Functions                                 


C End INLINED Rate Law Functions                                   

C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C                                                                  
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C                                                                  
C Update_RCONST_g - function to update rate constants                
C   Arguments :                                                    
C                                                                  
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      SUBROUTINE Update_RCONST_g ( )

      IMPLICIT NONE
      INCLUDE 'gas_Parameters.h'


      INCLUDE 'gas_Global.h'
C  Definitions for User-defined Rate Law functions
C  To be inserted in funcions that call rate laws

C jjb 05-07-2016
C
C removed along with the rate law functions
C original file copied in util/UserRateLaw_FcnHeader.f_original


C Begin INLINED RCONST                                             


! rates functions
      REAL*8 atk_3, atk_3f
      REAL*8 DMS_add
      REAL*8 farr, farr_sp
      REAL*8 fbck, fbckJ, fbck2
      REAL*8 fcn
      REAL*8 fdhetg
      REAL*8 shno3
      REAL*8 sp_17, sp_23
      EXTERNAL atk_3, atk_3f
      EXTERNAL DMS_add
      EXTERNAL farr, farr_sp
      EXTERNAL fbck, fbckJ, fbck2
      EXTERNAL fcn
      EXTERNAL fdhetg
      EXTERNAL shno3, sp_17, sp_23

C End INLINED RCONST                                               

      RCONST(1) = (farr(3.2d-11,67)*CONV1)
      RCONST(2) = (2.4d-10*CONV1)
      RCONST(3) = (farr(2.1d-11,115)*CONV1)
      RCONST(4) = (2.2d-10*CONV1)
      RCONST(5) = (1.2d-10*CONV1)
      RCONST(6) = (farr(1.4d-12,-2000)*CONV1)
      RCONST(7) = (farr_sp(6.0d-34,300,-2.6d0,0)*CONV1*CONV1)
      RCONST(8) = (farr(8.0d-12,-2060)*CONV1)
      RCONST(9) = (farr_sp(5.6d-34,300,-2.6d0,0)*CONV1*CONV1)
      RCONST(10) = (farr(1.7d-12,-940)*CONV1)
      RCONST(11) = (farr(4.8d-11,250)*CONV1)
      RCONST(12) = (farr(7.7d-12,-2100)*CONV1)
      RCONST(13) = (farr(2.9d-12,-160)*CONV1)
      RCONST(14) = (farr_sp(6.2d-14,298,2.6d0,945)*CONV1)
      RCONST(15) = (atk_3(6.9d-31,-0.8d0,2.6d-11,0.0d0,0.5d0)*CONV1)
      RCONST(16) = (farr_sp(2.03d-16,300,4.57d0,693)*CONV1)
      RCONST(17) = (sp_23(2.2d-13,600,1.9d-33,980,1.4d-21,2200)*CONV1)
      RCONST(18) = (ph_rat(3))
      RCONST(19) = (ph_rat(47))
      RCONST(20) = (ph_rat(6))
      RCONST(21) = (atk_3(1.0d-31,-1.6d0,3.0d-11,0.3d0,0.85d0)*CONV1)
      RCONST(22) = (atk_3(7.4d-31,-2.4d0,3.3d-11,-0.3d0,0.81d0)*CONV1)
      RCONST(23) = (farr(3.6d-12,270)*CONV1)
      RCONST(24) = (farr(1.4d-12,-1310)*CONV1)
      RCONST(25) = (farr(1.8d-11,110)*CONV1)
      RCONST(26) = (farr(5.5d-12,188)*CONV1)
      RCONST(27) = (atk_3(1.3d-31,-1.5d0,2.3d-11,0.24d0,0.6d0)*CONV1)
      RCONST(28) = (atk_3(3.3d-30,-3.0d0,4.1d-11,0.0d0,0.4d0)*CONV1)
      RCONST(29) = (atk_3(2.0d-31,-3.4d0,2.9d-12,-1.1d0,0.6d0)*CONV1)
      RCONST(30) = (farr(1.4d-13,-2470)*CONV1)
      RCONST(31) = (atk_3(2.0d-30,-4.4d0,1.4d-12,-0.7d0,0.6d0)*CONV1)
      RCONST(32) = (ph_rat(1))
      RCONST(33) = (1.7d-11*CONV1)
      RCONST(34) = (2.0d-11*CONV1)
      RCONST(35) = (4.0d-12*CONV1)
      RCONST(36) = (farr(8.5d-13,-2450)*CONV1)
      RCONST(37) = (ph_rat(2))
      RCONST(38) = (ph_rat(10))
      RCONST(39) = (fbck(2.0d-30,-4.4d0,1.4d-12,-0.7d0,0.6d0,5.1d-27,
     &            10871.d0))
      RCONST(40) = (ph_rat(12))
      RCONST(41) = (farr(2.5d-12,260)*CONV1)
      RCONST(42) = (ph_rat(4))
      RCONST(43) = (sHNO3(2.4d-14,460,2.7d-17,2199,6.5d-34,
     &            1335)*CONV1)
      RCONST(44) = (ph_rat(5))
      RCONST(45) = (fbck(2.0d-31,-3.4d0,2.9d-12,-1.1d0,0.6d0,2.1d-27,
     &            10900.d0))
      RCONST(46) = (farr(3.2d-13,690)*CONV1)
      RCONST(47) = (ph_rat(7))
      RCONST(48) = (ph_rat(11))
      RCONST(49) = (farr(3.5d-12,-925)*CONV1)
      RCONST(50) = (sp_17(1.44d-13,4.2d19)*CONV1)
      RCONST(51) = (farr_sp(1.85d-20,1,2.82d0,-987)*CONV1)
      RCONST(52) = (farr_sp(1.49d-17,1,2.00d0,-499)*CONV1)
      RCONST(53) = (farr(1.96d-12,438)*CONV1)
      RCONST(54) = (farr(9.14d-15,-2580)*CONV1)
      RCONST(55) = (farr_sp(4.88d-18,1,2.00d0,-2282)*CONV1)
      RCONST(56) = (1.00d-17*CONV1)
      RCONST(57) = (farr(2.8d-12,300)*CONV1)
      RCONST(58) = (farr(4.15d-13,750)*CONV1)
      RCONST(59) = (farr(9.5d-14,390)*0.63d0*CONV1)
      RCONST(60) = (farr(9.5d-14,390)*0.37d0*CONV1)
      RCONST(61) = (farr(2.6d-12,365)*CONV1)
      RCONST(62) = (farr(2.7d-13,1000)*CONV1)
      RCONST(63) = (3.10d-13*0.4d0*CONV1)
      RCONST(64) = (3.10d-13*0.6d0*CONV1)
      RCONST(65) = (3.10d-13*0.2d0*CONV1)
      RCONST(66) = (3.10d-13*0.2d0*CONV1)
      RCONST(67) = (3.10d-13*0.6d0*CONV1)
      RCONST(68) = (farr(2.54d-12,360)*0.33d0*CONV1)
      RCONST(69) = (farr(2.54d-12,360)*0.66d0*CONV1)
      RCONST(70) = (farr(2.0d-13,1250)*CONV1)
      RCONST(71) = (2.00D-12*0.4d0*CONV1)
      RCONST(72) = (2.00D-12*0.6d0*CONV1)
      RCONST(73) = (2.00D-12*0.2d0*CONV1)
      RCONST(74) = (2.00D-12*0.2d0*CONV1)
      RCONST(75) = (2.00D-12*0.6d0*CONV1)
      RCONST(76) = (farr(8.1d-12,270)*CONV1)
      RCONST(77) = (farr(4.3d-13,1040)*CONV1)
      RCONST(78) = (farr(2.5d-12,500)*CONV1)
      RCONST(79) = (farr(2.0d-12,500)*0.9d0*CONV1)
      RCONST(80) = (farr(2.0d-12,500)*0.1d0*CONV1)
      RCONST(81) = (atk_3(2.7d-28,-7.1d0,1.2d-11,-0.9d0,0.3d0)*CONV1)
      RCONST(82) = (fbck(2.7d-28,-7.1d0,1.2d-11,-0.9d0,0.3d0,9.0d-29,
     &            14000.d0))
      RCONST(83) = (farr(9.5d-13,-650)*CONV1)
      RCONST(84) = (farr_sp(1.2d-14,1,1.0d0,287)*CONV1)
      RCONST(85) = (5.6d-16*CONV1)
      RCONST(86) = (ph_rat(8))
      RCONST(87) = (ph_rat(9))
      RCONST(88) = (farr(4.4d-12,365)*CONV1)
      RCONST(89) = (farr(1.4d-12,-1860)*CONV1)
      RCONST(90) = (ph_rat(3)/9.0d0)
      RCONST(91) = (farr_sp(6.0d-18,1,2.0d0,170)*CONV1)
      RCONST(92) = (farr_sp(6.1d-18,1,2.0d0,530)*0.11d0*CONV1)
      RCONST(93) = (farr_sp(6.1d-18,1,2.0d0,530)*0.89d0*CONV1)
      RCONST(94) = (4.5d-13*CONV1)
      RCONST(95) = (8.0d-13*CONV1)
      RCONST(96) = (farr(1.9d-12,190)*CONV1)
      RCONST(97) = (farr(1.0d-12,190)*CONV1)
      RCONST(98) = (ph_rat(17))
      RCONST(99) = (farr(4.0d-32,-1000)*FIX(indf_N2)/0.79d0*CONV1)
      RCONST(100) = (atk_3(4.5d-31,-3.9d0,1.3d-12,-0.7d0,
     &             0.525d0)*CONV1)
      RCONST(101) = (farr(3.0d-12,-7000)*CONV1)
      RCONST(102) = (farr(1.3d-12,-330)*CONV1)
      RCONST(103) = (farr(3.9d-41,
     &             6830)*3.626d35*FIX(indf_H2O)*FIX(indf_H2O))
      RCONST(104) = (2.0d-11*CONV1)
      RCONST(105) = (farr(1.12d-11,-250)*CONV1)
      RCONST(106) = (DMS_add()*1.0d0*CONV1)
      RCONST(107) = (farr(1.9d-13,520)*CONV1)
      RCONST(108) = (xhal*farr(3.4d-13,2081)*CONV1)
      RCONST(109) = (xhal*farr(9.0d-11,-2386)*CONV1)
      RCONST(110) = (xhal*farr(1.7d-15,340)*CONV1)
      RCONST(111) = (xhal*farr(1.5d-14,1000)*CONV1)
      RCONST(112) = (xiod*farr(3.3d-13,-925)*CONV1)
      RCONST(113) = (farr(4.9d-12,260)*CONV1)
      RCONST(114) = (5.0d-12*CONV1)
      RCONST(115) = (1.0d-11*CONV1)
      RCONST(116) = (3.10d-13*CONV1)
      RCONST(117) = (9.0d-12*CONV1)
      RCONST(118) = (farr(1.15d-12,432)*CONV1)
      RCONST(119) = (farr(3.0d-11,210)*CONV1)
      RCONST(120) = (2.2d-11*CONV1)
      RCONST(121) = (1.1d-11*CONV1)
      RCONST(122) = (9.0d-12*CONV1)
      RCONST(123) = (4.1d-13*CONV1)
      RCONST(124) = (1.2d-11*0.75d0*CONV1)
      RCONST(125) = (1.2d-11*0.25d0*CONV1)
      RCONST(126) = (farr(1.36d14,-8656))
      RCONST(127) = (5.0d-15*CONV1)
      RCONST(128) = (1.0d-15*CONV1)
      RCONST(129) = (1.0d-12*CONV1)
      RCONST(130) = (1.0d-11*CONV1)
      RCONST(131) = (5.0d-11*CONV1)
      RCONST(132) = (farr(2.9d-12,190)*CONV1)
      RCONST(133) = (ph_rat(17))
      RCONST(134) = (farr(2.7d15,99))
      RCONST(135) = (9.0d-11*CONV1)
      RCONST(136) = (xhal*farr(1.37d-11,709)*CONV1)
      RCONST(137) = (xhal*1.0d-14*CONV1)
      RCONST(138) = (9.0d-11*CONV1)
      RCONST(139) = (1.0d-13*CONV1)
      RCONST(140) = (xhal*farr(2.8d-11,-250)*CONV1)
      RCONST(141) = (xhal*4.4d-11*(1.0d0-farr(1.7d0,-620))*CONV1)
      RCONST(142) = (xhal*4.4d-11*farr(1.7d0,-620)*CONV1)
      RCONST(143) = (xhal*farr(1.1d-11,-980)*CONV1)
      RCONST(144) = (xhal*farr(3.9d-11,-2310)*CONV1)
      RCONST(145) = (xhal*2.0d-16*CONV1)
      RCONST(146) = (xhal*atk_3(1.3d-30,-2.d0,1.0d-10,-1.d0,
     &             0.6d0)*CONV1)
      RCONST(147) = (xhal*atk_3(1.8d-31,-2.d0,1.0d-10,-1.d0,
     &             0.6d0)*CONV1)
      RCONST(148) = (xhal*2.4d-11*CONV1)
      RCONST(149) = (xhal*farr(3.6d-12,-1200)*CONV1)
      RCONST(150) = (xhal*ph_rat(19))
      RCONST(151) = (xhal*farr(2.5d-11,110)*CONV1)
      RCONST(152) = (xhal*farr(7.3d-12,300)*0.94d0*CONV1)
      RCONST(153) = (xhal*farr(7.3d-12,300)*0.06d0*CONV1)
      RCONST(154) = (xhal*farr(2.2d-12,340)*CONV1)
      RCONST(155) = (xhal*1.5d-17*CONV1)
      RCONST(156) = (xhal*1.0d-18*CONV1)
      RCONST(157) = (xhal*farr(6.2d-12,295)*CONV1)
      RCONST(158) = (xhal*atk_3(1.6d-31,-3.4d0,7.0d-11,0.0d0,
     &             0.4d0)*CONV1)
      RCONST(159) = (xhal*4.6d-13*0.74d0*CONV1)
      RCONST(160) = (xhal*4.6d-13*0.26d0*CONV1)
      RCONST(161) = (xhal*farr(1.0d-12,-1590)*CONV1)
      RCONST(162) = (xhal*farr(3.0d-11,-2450)*CONV1)
      RCONST(163) = (xhal*farr(3.5d-13,-1370)*CONV1)
      RCONST(164) = (xhal*atk_3(1.6d-32,-4.5d0,2.0d-12,-2.4d0,
     &             0.6d0)*CONV1)
      RCONST(165) = (xhal*atk_3(6.2d-32,-4.7d0,2.4d-11,0.0d0,
     &             0.6d0)*CONV1)
      RCONST(166) = (xhal*farr(3.2d-11,170)*CONV1)
      RCONST(167) = (xhal*farr(2.4d-12,-960)*CONV1)
      RCONST(168) = (xhal*atk_3f(1.8d-31,-1.0d0,2.8d-11,0.0d0,
     &             0.5d0)*CONV1)
      RCONST(169) = (xhal*farr(1.4d-12,600)*CONV1)
      RCONST(170) = (xhal*farr(2.1d-12,-4700)*CONV1)
      RCONST(171) = (xhal*farr(1.1d-13,350)*CONV1)
      RCONST(172) = (xhal*ph_rat(35))
      RCONST(173) = (xhal*farr(7.6d-11,65)*CONV1)
      RCONST(174) = (xhal*1.0d-19*CONV1)
      RCONST(175) = (xhal*fbckJ(1.6d-32,-4.5d0,2.0d-12,-2.4d0,9.3d-28,
     &             8835.d0))
      RCONST(176) = (xhal*ph_rat(16))
      RCONST(177) = (xhal*fbckJ(6.2d-32,-4.7d0,2.4d-11,0.0d0,1.6d-27,
     &             7155.d0))
      RCONST(178) = (xhal*farr(1.7d-12,-230)*CONV1)
      RCONST(179) = (xhal*1.7d-13*CONV1)
      RCONST(180) = (xhal*farr(3.0d-12,-500)*CONV1)
      RCONST(181) = (xhal*ph_rat(13))
      RCONST(182) = (xhal*farr(2.4d-12,-1250)*CONV1)
      RCONST(183) = (xhal*ph_rat(18))
      RCONST(184) = (xhal*farr(6.2d-12,145)*CONV1)
      RCONST(185) = (xhal*farr(4.5d-12,-900)*CONV1)
      RCONST(186) = (xhal*farr(1.2d-12,-330)*CONV1)
      RCONST(187) = (xhal*fcn(CONV1))
      RCONST(188) = (xhal*ph_rat(14))
      RCONST(189) = (xhal*farr(6.6d-12,-1240)*CONV1)
      RCONST(190) = (xhal*farr(8.3d-11,-100)*CONV1)
      RCONST(191) = (xhal*atk_3(1.85d-29,-3.3d0,6.0d-10,0.0d0,
     &             0.4d0)*CONV1)
      RCONST(192) = (xhal*farr(8.1d-11,-34)*CONV1)
      RCONST(193) = (xhal*8.0d-11*CONV1)
      RCONST(194) = (xhal*5.5d-11*CONV1)
      RCONST(195) = (xhal*farr(8.6d-11,45)*CONV1)
      RCONST(196) = (xhal*5.9d-11*CONV1)
      RCONST(197) = (xhal*1.9d-13*CONV1)
      RCONST(198) = (xhal*2.65d-14*CONV1)
      RCONST(199) = (xhal*2.0d-14*CONV1)
      RCONST(200) = (xhal*1.6d-10*CONV1)
      RCONST(201) = (xhal*farr(3.3d-12,-115)*CONV1)
      RCONST(202) = (xhal*farr_sp(7.78d-18,1,2.0d0,-152)*CONV1)
      RCONST(203) = (xhal*farr(4.06d-12,360)*CONV1)
      RCONST(204) = (xhal*7.50d-12*CONV1)
      RCONST(205) = (xhal*farr(1.10d-13,1020)*CONV1)
      RCONST(206) = (xhal*1.76d-12*CONV1)
      RCONST(207) = (xhal*farr(1.7d-11,-800)*CONV1)
      RCONST(208) = (xhal*farr(7.7d-12,-450)*CONV1)
      RCONST(209) = (xhal*5.0d-16*CONV1)
      RCONST(210) = (xhal*atk_3(4.2d-31,-2.4d0,2.7d-11,0.d0,
     &             0.55d0)*CONV1)
      RCONST(211) = (xhal*1.6d-11*CONV1)
      RCONST(212) = (xhal*farr(1.9d-11,240)*CONV1)
      RCONST(213) = (xhal*farr(5.12d-13,989)*CONV1)
      RCONST(214) = (xhal*ph_rat(22))
      RCONST(215) = (xhal*9.1d-12*CONV1)
      RCONST(216) = (xhal*farr(1.9d-11,230)*CONV1)
      RCONST(217) = (xhal*farr(1.8d-11,250)*CONV1)
      RCONST(218) = (xhal*farr(4.5d-12,500)*CONV1)
      RCONST(219) = (xhal*farr(8.7d-12,260)*CONV1)
      RCONST(220) = (xhal*atk_3(5.2d-31,-3.2d0,6.9d-12,-2.9d0,
     &             0.6d0)*CONV1)
      RCONST(221) = (xhal*1.0d-12*CONV1)
      RCONST(222) = (xhal*farr(1.0d-12,-3200)*CONV1)
      RCONST(223) = (xhal*2.7d-12*CONV1)
      RCONST(224) = (xhal*farr(2.9d-14,840)*CONV1)
      RCONST(225) = (xhal*ph_rat(24))
      RCONST(226) = (xhal*2.0d-10*CONV1)
      RCONST(227) = (xhal*farr(6.7d-12,155)*CONV1)
      RCONST(228) = (xhal*1.0d-16*CONV1)
      RCONST(229) = (xhal*farr(1.2d-10,-430)*CONV1)
      RCONST(230) = (xhal*ph_rat(20))
      RCONST(231) = (xhal*ph_rat(21))
      RCONST(232) = (xhal*farr(1.9d-11,215)*CONV1)
      RCONST(233) = (xhal*farr(2.08d-11,320)*CONV1)
      RCONST(234) = (xhal*fbck2(5.2d-31,-3.2d0,6.9d-12,-2.9d0,0.6d0,
     &             CONV1))
      RCONST(235) = (xhal*ph_rat(15))
      RCONST(236) = (xhal*1.3d-13*CONV1)
      RCONST(237) = (xhal*farr(7.7d-12,-580)*CONV1)
      RCONST(238) = (xhal*farr(1.8d-11,-460)*CONV1)
      RCONST(239) = (xhal*farr(2.66d-12,-1610)*CONV1)
      RCONST(240) = (xhal*4.4d-13*CONV1)
      RCONST(241) = (xhal*1.5d-14*CONV1)
      RCONST(242) = (xhal*farr(4.1d-13,800)*0.25d0*CONV1)
      RCONST(243) = (xhal*farr(4.1d-13,800)*0.75d0*CONV1)
      RCONST(244) = (xhal*farr_sp(1.03d-17,1,2.0d0,-422)*CONV1)
      RCONST(245) = (xhal*farr(4.06d-12,360)*CONV1)
      RCONST(246) = (xhal*7.50d-12*CONV1)
      RCONST(247) = (xhal*farr(6.15d-14,1247)*CONV1)
      RCONST(248) = (xhal*2.45d-12*CONV1)
      RCONST(249) = (xiod*farr(2.1d-11,-830)*CONV1)
      RCONST(250) = (xiod*farr(1.5d-11,-1090)*CONV1)
      RCONST(251) = (xiod*atk_3(3.0d-31,-1.0d0,6.6d-11,0.0d0,
     &             0.63d0)*CONV1)
      RCONST(252) = (xiod*1.0d-10*CONV1)
      RCONST(253) = (xiod*(1.0d-32*FIX(indf_N2)+1.9d-32*FIX(indf_O2))*
     &             CONV1)
      RCONST(254) = (xiod*1.25d-10*CONV1)
      RCONST(255) = (xiod*2.1d-10*CONV1)
      RCONST(256) = (xiod*1.5d-12*CONV1)
      RCONST(257) = (xiod*ph_rat(27))
      RCONST(258) = (xiod*1.4d-10*CONV1)
      RCONST(259) = (xiod*farr(1.4d-11,540)*CONV1)
      RCONST(260) = (xiod*farr(7.15d-12,300)*CONV1)
      RCONST(261) = (xiod*atk_3(7.7d-31,-5.0d0,1.6d-11,0.0d0,
     &             0.4d0)*CONV1)
      RCONST(262) = (xiod*farr(5.4d-11,180)*CONV1)
      RCONST(263) = (xiod*ph_rat(25))
      RCONST(264) = (xiod*farr(2.2d-10,243)*CONV1)
      RCONST(265) = (xiod*farr(1.1d-12,542)*CONV1)
      RCONST(266) = (xiod*5.0d-11*CONV1)
      RCONST(267) = (xiod*ph_rat(40))
      RCONST(268) = (xiod*ph_rat(36))
      RCONST(269) = (xiod*farr(1.6d-11,440)*CONV1)
      RCONST(270) = (xiod*farr(1.3d-12,-1830)*CONV1)
      RCONST(271) = (xiod*ph_rat(26))
      RCONST(272) = (xiod*farr(4.7d-13,-1670)*CONV1)
      RCONST(273) = (xiod*ph_rat(37))
      RCONST(274) = (xiod*farr(1.1d15,-12060))
      RCONST(275) = (xiod*ph_rat(30))
      RCONST(276) = (xiod*ph_rat(34))
      RCONST(277) = (xiod*farr(4.3d-12,-1120)*CONV1)
      RCONST(278) = (xiod*ph_rat(31))
      RCONST(279) = (xiod*7.7d-13*CONV1)
      RCONST(280) = (xiod*ph_rat(46))
      RCONST(281) = (xiod*2.05d-12*CONV1)
      RCONST(282) = (xiod*ph_rat(32))
      RCONST(283) = (xiod*2.0d-12*CONV1)
      RCONST(284) = (xiod*farr(4.06d-12,360)*CONV1)
      RCONST(285) = (xiod*7.50d-12*CONV1)
      RCONST(286) = (xiod*farr(6.15d-14,1247)*CONV1)
      RCONST(287) = (xiod*2.45d-12*CONV1)
      RCONST(288) = (xhal*1.45d-11*CONV1)
      RCONST(289) = (xhal*farr(2.3d-10,-135)*CONV1)
      RCONST(290) = (xiod*2.7d-10*CONV1)
      RCONST(291) = (xiod*4.4d-11*CONV1)
      RCONST(292) = (xhal*farr(2.7d-11,-1300)*CONV1)
      RCONST(293) = (xhal*1.1d-15*CONV1)
      RCONST(294) = (xhal*farr(5.9d-12,170)*CONV1)
      RCONST(295) = (xhal*3.32d-15*CONV1)
      RCONST(296) = (xiod*1.2d-10*CONV1)
      RCONST(297) = (xiod*2.71d-11*CONV1)
      RCONST(298) = (xiod*2.7d-11*CONV1)
      RCONST(299) = (xiod*1.65d-13*CONV1)
      RCONST(300) = (xiod*1.2d-11*CONV1)
      RCONST(301) = (xiod*1.65d-13*CONV1)
      RCONST(302) = (xhal*farr(1.6d-12,430)*CONV1)
      RCONST(303) = (xhal*farr(2.9d-12,220)*CONV1)
      RCONST(304) = (xhal*farr(5.8d-13,170)*CONV1)
      RCONST(305) = (xiod*farr(4.7d-12,280)*0.20d0*CONV1)
      RCONST(306) = (xiod*farr(4.7d-12,280)*0.25d0*CONV1)
      RCONST(307) = (xiod*farr(4.7d-12,280)*0.55d0*CONV1)
      RCONST(308) = (xiod*farr(1.5d-11,510)*0.20d0*CONV1)
      RCONST(309) = (xiod*farr(1.5d-11,510)*0.80d0*CONV1)
      RCONST(310) = (xiod*1.4d-10*CONV1)
      RCONST(311) = (xiod*ph_rat(29))
      RCONST(312) = (xiod*3.01d-14*CONV1)
      RCONST(313) = (xiod*1.20d-11*CONV1)
      RCONST(314) = (xiod*2.01d-11*CONV1)
      RCONST(315) = (xiod*ph_rat(28))
      RCONST(316) = (xhal*2.09d-11*CONV1)
      RCONST(317) = (xhal*1.5d-12*CONV1)
      RCONST(318) = (xhal*ph_rat(23))
      RCONST(319) = (xiod*farr(2.9d-11,-1000)*CONV1)
      RCONST(320) = (xiod*1.6d-11*CONV1)
      RCONST(321) = (xiod*5.67d-11*CONV1)
      RCONST(322) = (xiod*ph_rat(44))
      RCONST(323) = (xiod*ph_rat(33))
      RCONST(324) = (xhet1*fdhetg(1,1))
      RCONST(325) = (xhet1*fdhetg(1,2))
      RCONST(326) = (xhet1*fdhetg(1,3))
      RCONST(327) = (xhet1*fdhetg(1,4))
      RCONST(328) = (xhet2*fdhetg(2,1))
      RCONST(329) = (xhet2*fdhetg(2,2))
      RCONST(330) = (xhet2*fdhetg(2,3))
      RCONST(331) = (xhet2*fdhetg(2,4))
      RETURN
      END

C End of Update_RCONST_g function                                    
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C                                                                  
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C                                                                  
C Numerical Integrator (Time-Stepping) File                        
C                                                                  
C Generated by KPP-2.2.4 for Mistra symbolic chemistry Kinetics PreProcessor
C       (http://www.cs.vt.edu/~asandu/Software/Kpp)                
C KPP is distributed under GPL, the general public licence         
C       (http://www.gnu.org/copyleft/gpl.html)                     
C (C) 1995-1997, V. Damian & A. Sandu, CGRER, Univ. Iowa           
C (C) 1997-2005, A. Sandu, Michigan Tech, Virginia Tech            
C     With important contributions from:                           
C        M. Damian, Villanova University, USA                      
C        R. Sander, Max-Planck Institute for Chemistry, Mainz, Germany
C                                                                  
C File                 : gas_Integrator.f                          
C Time                 : Wed Jul 14 18:26:57 2021                  
C Working directory    : /local/josue/Mistra_2019/src/mech         
C Equation file        : gas.k                                     
C Output root filename : gas                                       
C                                                                  
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C                                                                  
C INTEGRATE_g - Integrator routine                                   
C   Arguments :                                                    
C      TIN       - Start Time for Integration                      
C      TOUT      - End Time for Integration                        
C                                                                  
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      SUBROUTINE INTEGRATE_g( TIN, TOUT )

      IMPLICIT NONE
      INCLUDE 'gas_Parameters.h'
      INCLUDE 'gas_Global.h'
      INTEGER Nstp, Nacc, Nrej, Nsng, IERR
      SAVE Nstp, Nacc, Nrej, Nsng

! TIN - Start Time
      REAL*8 TIN
! TOUT - End Time
      REAL*8 TOUT
      INTEGER i

      REAL*8  RPAR(20)
      INTEGER  IPAR(20)
      EXTERNAL  FunTemplate_g, JacTemplate_g


      DO i=1,20
        IPAR(i) = 0
        RPAR(i) = 0.0d0
      ENDDO


! jjb>
! the following lines are "hardcoded" in KPP_HOME/int/rosenbrock.f
! settings & values are from rvg

      IPAR(1) = 0       ! non-autonomous
      IPAR(2) = 1       ! vector tolerances
      IPAR(4) = 2       ! choice of the method: 2 is for ros3

      RPAR(3) = 1.d-3   ! starting step

      RTOL(:) = 1.d-3
      ATOL(:) = 1.d-25

! <jjb

      CALL Rosenbrock_g(VAR,TIN,TOUT,
     &            ATOL,RTOL,
     &            FunTemplate_g,JacTemplate_g,
     &            RPAR,IPAR,IERR)


      Nstp = Nstp + IPAR(13)
      Nacc = Nacc + IPAR(14)
      Nrej = Nrej + IPAR(15)
      Nsng = Nsng + IPAR(18)
!      PRINT*,'Step=',Nstp,' Acc=',Nacc,' Rej=',Nrej,
!     &      ' Singular=',Nsng


      IF (IERR.LT.0) THEN
        print *,'Rosenbrock: Unsucessful step at T=',
     &          TIN,' (IERR=',IERR,')'
      ENDIF

      TIN = RPAR(11) ! Exit time
      STEPMIN = RPAR(12)

      RETURN
      END


!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE Rosenbrock_g(Y,Tstart,Tend,
     &            AbsTol,RelTol,
     &            FunTemplate_g,JacTemplate_g ,
     &            RPAR,IPAR,IERR)
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
!    Solves the system y'=F(t,y) using a Rosenbrock method defined by:
!
!     G = 1/(H*gamma(1)) - JacTemplate_g(t0,Y0)
!     T_i = t0 + Alpha(i)*H
!     Y_i = Y0 + \sum_{j=1}^{i-1} A(i,j)*K_j
!     G * K_i = FunTemplate_g( T_i, Y_i ) + \sum_{j=1}^S C(i,j)/H * K_j +
!                  gamma(i)*dF/dT(t0, Y0)
!     Y1 = Y0 + \sum_{j=1}^S M(j)*K_j
!
!    For details on Rosenbrock methods and their implementation consult:
!         E. Hairer and G. Wanner
!         "Solving ODEs II. Stiff and differential-algebraic problems".
!         Springer series in computational mathematics, Springer-Verlag, 1996.
!    The codes contained in the book inspired this implementation.
!
!    (C)  Adrian Sandu, August 2004
!    Virginia Polytechnic Institute and State University
!    Contact: sandu@cs.vt.edu
!    This implementation is part of KPP - the Kinetic PreProcessor
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
!~~~>      INPUT ARGUMENTS:
!
!-     Y(NVAR)       = vector of initial conditions (at T=Tstart)
!-    [Tstart,Tend]  = time range of integration
!        (if Tstart>Tend the integration is performed backwards in time)
!-    RelTol, AbsTol = user precribed accuracy
!-    SUBROUTINE FunTemplate_g( T, Y, Ydot ) = ODE function,
!                                         returns Ydot = Y' = F(T,Y)
!-    SUBROUTINE JacTemplate_g( T, Y, Ydot ) = Jacobian of the ODE function,
!                                         returns Jcb = dF/dY
!-    IPAR(1:10)    = integer inputs parameters
!-    RPAR(1:10)    = real inputs parameters
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
!~~~>     OUTPUT ARGUMENTS:
!
!-    Y(NVAR)       -> vector of final states (at T->Tend)
!-    IPAR(11:20)   -> integer output parameters
!-    RPAR(11:20)   -> real output parameters
!-    IERR          -> job status upon return
!          - succes (positive value) or failure (negative value) -
!                    =  1 : Success
!                    = -1 : Improper value for maximal no of steps
!                    = -2 : Selected Rosenbrock method not implemented
!                    = -3 : Hmin/Hmax/Hstart must be positive
!                    = -4 : FacMin/FacMax/FacRej must be positive
!                    = -5 : Improper tolerance values
!                    = -6 : No of steps exceeds maximum bound
!                    = -7 : Step size too small
!                    = -8 : Matrix is repeatedly singular
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
!~~~>     INPUT PARAMETERS:
!
!    Note: For input parameters equal to zero the default values of the
!          corresponding variables are used.
!
!    IPAR(1)   = 1: F = F(y)   Independent of T (AUTONOMOUS)
!              = 0: F = F(t,y) Depends on T (NON-AUTONOMOUS)
!    IPAR(2)   = 0: AbsTol, RelTol are NVAR-dimensional vectors
!              = 1:  AbsTol, RelTol are scalars
!    IPAR(3)  -> maximum number of integration steps
!              For IPAR(3)=0) the default value of 100000 is used
!
!    IPAR(4)  -> selection of a particular Rosenbrock method
!              = 0 :  default method is Rodas3_g
!              = 1 :  method is  Ros2_g
!              = 2 :  method is  Ros3_g
!              = 3 :  method is  Ros4_g
!              = 4 :  method is  Rodas3_g
!              = 5:   method is  Rodas4_g
!
!    RPAR(1)  -> Hmin, lower bound for the integration step size
!                It is strongly recommended to keep Hmin = ZERO
!    RPAR(2)  -> Hmax, upper bound for the integration step size
!    RPAR(3)  -> Hstart, starting value for the integration step size
!
!    RPAR(4)  -> FacMin, lower bound on step decrease factor (default=0.2)
!    RPAR(5)  -> FacMax, upper bound on step increase factor (default=6)
!    RPAR(6)  -> FacRej, step decrease factor after multiple rejections
!                        (default=0.1)
!    RPAR(7)  -> FacSafe, by which the new step is slightly smaller
!                  than the predicted value  (default=0.9)
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
!~~~>     OUTPUT PARAMETERS:
!
!    Note: each call to Rosenbrock adds the corrent no. of fcn calls
!         to previous value of IPAR(11), and similar for the other params.
!         Set IPAR(11:20) = 0 before call to avoid this accumulation.
!
!    IPAR(11) = No. of function calls
!    IPAR(12) = No. of jacobian calls
!    IPAR(13) = No. of steps
!    IPAR(14) = No. of accepted steps
!    IPAR(15) = No. of rejected steps (except at the beginning)
!    IPAR(16) = No. of LU decompositions
!    IPAR(17) = No. of forward/backward substitutions
!    IPAR(18) = No. of singular matrix decompositions
!
!    RPAR(11)  -> Texit, the time corresponding to the
!                        computed Y upon return
!    RPAR(12)  -> Hexit, last accepted step before exit
!    For multiple restarts, use Hexit as Hstart in the following run
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      IMPLICIT NONE

      REAL*8 Tstart,Tend
      REAL*8 Y(102),AbsTol(102),RelTol(102)
      INTEGER IPAR(20)
      REAL*8 RPAR(20)
      INTEGER IERR
!~~~>  The method parameters
      INTEGER Smax
      PARAMETER (Smax = 6)
      INTEGER  Method, ros_S
      REAL*8 ros_M(Smax), ros_E(Smax)
      REAL*8 ros_A(Smax*(Smax-1)/2), ros_C(Smax*(Smax-1)/2)
      REAL*8 ros_Alpha(Smax), ros_Gamma(Smax), ros_ELO
      LOGICAL  ros_NewF(Smax)
      CHARACTER*12 ros_Name
!~~~>  Local variables
      REAL*8 Roundoff,FacMin,FacMax,FacRej,FacSafe
      REAL*8 Hmin, Hmax, Hstart, Hexit
      REAL*8 Texit
      INTEGER i, UplimTol, Max_no_steps
      LOGICAL Autonomous, VectorTol
!~~~>   Statistics on the work performed
      INTEGER Nfun,Njac,Nstp,Nacc,Nrej,Ndec,Nsol,Nsng
      COMMON /Statistics/ Nfun,Njac,Nstp,Nacc,Nrej,
     &       Ndec,Nsol,Nsng
!~~~>   Parameters
      REAL*8 ZERO, ONE, DeltaMin
      PARAMETER (ZERO = 0.0d0)
      PARAMETER (ONE  = 1.0d0)
      PARAMETER (DeltaMin = 1.0d-5)
!~~~>   Functions
      EXTERNAL FunTemplate_g, JacTemplate_g
      !REAL*8 WLAMCH ! jjb: WLAMCH now replaced by Fortran intrinsic function epsilon (see below)
      !EXTERNAL WLAMCH

!~~~>  Initialize statistics
      Nfun = IPAR(11)
      Njac = IPAR(12)
      Nstp = IPAR(13)
      Nacc = IPAR(14)
      Nrej = IPAR(15)
      Ndec = IPAR(16)
      Nsol = IPAR(17)
      Nsng = IPAR(18)

!~~~>  Autonomous or time dependent ODE. Default is time dependent.
      Autonomous = .NOT.(IPAR(1).EQ.0)

!~~~>  For Scalar tolerances (IPAR(2).NE.0)  the code uses AbsTol(1) and RelTol(1)
!      For Vector tolerances (IPAR(2).EQ.0) the code uses AbsTol(1:NVAR) and RelTol(1:NVAR)
      IF (IPAR(2).EQ.0) THEN
         VectorTol = .TRUE.
         UplimTol  = 102
      ELSE
         VectorTol = .FALSE.
         UplimTol  = 1
      END IF

!~~~>   The maximum number of steps admitted
      IF (IPAR(3).EQ.0) THEN
         Max_no_steps = 100000
      ELSEIF (IPAR(3).GT.0) THEN
         Max_no_steps=IPAR(3)
      ELSE
         WRITE(6,*)'User-selected max no. of steps: IPAR(3)=',IPAR(3)
         CALL ros_ErrorMsg_g(-1,Tstart,ZERO,IERR)
         RETURN
      END IF

!~~~>  The particular Rosenbrock method chosen
      IF (IPAR(4).EQ.0) THEN
         Method = 3
      ELSEIF ( (IPAR(4).GE.1).AND.(IPAR(4).LE.5) ) THEN
         Method = IPAR(4)
      ELSE
         WRITE (6,*) 'User-selected Rosenbrock method: IPAR(4)=',IPAR(4)
         CALL ros_ErrorMsg_g(-2,Tstart,ZERO,IERR)
         RETURN
      END IF

!~~~>  Unit roundoff (1+Roundoff>1)
      !Roundoff = WLAMCH('E')
      Roundoff = epsilon(ONE) ! jjb fortran intrinsic function

!~~~>  Lower bound on the step size: (positive value)
      IF (RPAR(1).EQ.ZERO) THEN
         Hmin = ZERO
      ELSEIF (RPAR(1).GT.ZERO) THEN
         Hmin = RPAR(1)
      ELSE
         WRITE (6,*) 'User-selected Hmin: RPAR(1)=', RPAR(1)
         CALL ros_ErrorMsg_g(-3,Tstart,ZERO,IERR)
         RETURN
      END IF
!~~~>  Upper bound on the step size: (positive value)
      IF (RPAR(2).EQ.ZERO) THEN
         Hmax = ABS(Tend-Tstart)
      ELSEIF (RPAR(2).GT.ZERO) THEN
         Hmax = MIN(ABS(RPAR(2)),ABS(Tend-Tstart))
      ELSE
         WRITE (6,*) 'User-selected Hmax: RPAR(2)=', RPAR(2)
         CALL ros_ErrorMsg_g(-3,Tstart,ZERO,IERR)
         RETURN
      END IF
!~~~>  Starting step size: (positive value)
      IF (RPAR(3).EQ.ZERO) THEN
         Hstart = MAX(Hmin,DeltaMin)
      ELSEIF (RPAR(3).GT.ZERO) THEN
         Hstart = MIN(ABS(RPAR(3)),ABS(Tend-Tstart))
      ELSE
         WRITE (6,*) 'User-selected Hstart: RPAR(3)=', RPAR(3)
         CALL ros_ErrorMsg_g(-3,Tstart,ZERO,IERR)
         RETURN
      END IF
!~~~>  Step size can be changed s.t.  FacMin < Hnew/Hexit < FacMax
      IF (RPAR(4).EQ.ZERO) THEN
         FacMin = 0.2d0
      ELSEIF (RPAR(4).GT.ZERO) THEN
         FacMin = RPAR(4)
      ELSE
         WRITE (6,*) 'User-selected FacMin: RPAR(4)=', RPAR(4)
         CALL ros_ErrorMsg_g(-4,Tstart,ZERO,IERR)
         RETURN
      END IF
      IF (RPAR(5).EQ.ZERO) THEN
         FacMax = 6.0d0
      ELSEIF (RPAR(5).GT.ZERO) THEN
         FacMax = RPAR(5)
      ELSE
         WRITE (6,*) 'User-selected FacMax: RPAR(5)=', RPAR(5)
         CALL ros_ErrorMsg_g(-4,Tstart,ZERO,IERR)
         RETURN
      END IF
!~~~>   FacRej: Factor to decrease step after 2 succesive rejections
      IF (RPAR(6).EQ.ZERO) THEN
         FacRej = 0.1d0
      ELSEIF (RPAR(6).GT.ZERO) THEN
         FacRej = RPAR(6)
      ELSE
         WRITE (6,*) 'User-selected FacRej: RPAR(6)=', RPAR(6)
         CALL ros_ErrorMsg_g(-4,Tstart,ZERO,IERR)
         RETURN
      END IF
!~~~>   FacSafe: Safety Factor in the computation of new step size
      IF (RPAR(7).EQ.ZERO) THEN
         FacSafe = 0.9d0
      ELSEIF (RPAR(7).GT.ZERO) THEN
         FacSafe = RPAR(7)
      ELSE
         WRITE (6,*) 'User-selected FacSafe: RPAR(7)=', RPAR(7)
         CALL ros_ErrorMsg_g(-4,Tstart,ZERO,IERR)
         RETURN
      END IF
!~~~>  Check if tolerances are reasonable
       DO i=1,UplimTol
         IF ( (AbsTol(i).LE.ZERO) .OR. (RelTol(i).LE.10.d0*Roundoff)
     &          .OR. (RelTol(i).GE.1.0d0) ) THEN
            WRITE (6,*) ' AbsTol(',i,') = ',AbsTol(i)
            WRITE (6,*) ' RelTol(',i,') = ',RelTol(i)
            CALL ros_ErrorMsg_g(-5,Tstart,ZERO,IERR)
            RETURN
         END IF
       END DO


!~~~>   Initialize the particular Rosenbrock method

      IF (Method .EQ. 1) THEN
         CALL Ros2_g(ros_S, ros_A, ros_C, ros_M, ros_E,
     &             ros_Alpha, ros_Gamma, ros_NewF, ros_ELO, ros_Name)
      ELSEIF (Method .EQ. 2) THEN
         CALL Ros3_g(ros_S, ros_A, ros_C, ros_M, ros_E,
     &             ros_Alpha, ros_Gamma, ros_NewF, ros_ELO, ros_Name)
      ELSEIF (Method .EQ. 3) THEN
         CALL Ros4_g(ros_S, ros_A, ros_C, ros_M, ros_E,
     &             ros_Alpha, ros_Gamma, ros_NewF, ros_ELO, ros_Name)
      ELSEIF (Method .EQ. 4) THEN
         CALL Rodas3_g(ros_S, ros_A, ros_C, ros_M, ros_E,
     &             ros_Alpha, ros_Gamma, ros_NewF, ros_ELO, ros_Name)
      ELSEIF (Method .EQ. 5) THEN
         CALL Rodas4_g(ros_S, ros_A, ros_C, ros_M, ros_E,
     &             ros_Alpha, ros_Gamma, ros_NewF, ros_ELO, ros_Name)
      ELSE
         WRITE (6,*) 'Unknown Rosenbrock method: IPAR(4)=', Method
         CALL ros_ErrorMsg_g(-2,Tstart,ZERO,IERR)
         RETURN
      END IF

!~~~>  CALL Rosenbrock method
      CALL RosenbrockIntegrator_g(Y,Tstart,Tend,Texit,
     &      AbsTol,RelTol,
     &      FunTemplate_g,JacTemplate_g,
!  Rosenbrock method coefficients
     &      ros_S, ros_M, ros_E, ros_A, ros_C,
     &      ros_Alpha, ros_Gamma, ros_ELO, ros_NewF,
!  Integration parameters
     &      Autonomous, VectorTol, Max_no_steps,
     &      Roundoff, Hmin, Hmax, Hstart, Hexit,
     &      FacMin, FacMax, FacRej, FacSafe,
!  Error indicator
     &      IERR)


!~~~>  Collect run statistics
      IPAR(11) = Nfun
      IPAR(12) = Njac
      IPAR(13) = Nstp
      IPAR(14) = Nacc
      IPAR(15) = Nrej
      IPAR(16) = Ndec
      IPAR(17) = Nsol
      IPAR(18) = Nsng
!~~~> Last T and H
      RPAR(11) = Texit
      RPAR(12) = Hexit

      RETURN
      END  !  SUBROUTINE Rosenbrock


!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE RosenbrockIntegrator_g(Y,Tstart,Tend,T,
     &      AbsTol,RelTol,
     &      FunTemplate_g,JacTemplate_g ,
!~~~> Rosenbrock method coefficients
     &      ros_S, ros_M, ros_E, ros_A, ros_C,
     &      ros_Alpha, ros_Gamma, ros_ELO, ros_NewF,
!~~~> Integration parameters
     &      Autonomous, VectorTol, Max_no_steps,
     &      Roundoff, Hmin, Hmax, Hstart, Hexit,
     &      FacMin, FacMax, FacRej, FacSafe,
!~~~> Error indicator
     &      IERR)
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!   Template for the implementation of a generic Rosenbrock method
!            defined by ros_S (no of stages)
!            and its coefficients ros_{A,C,M,E,Alpha,Gamma}
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      IMPLICIT NONE

!~~~> Input: the initial condition at Tstart; Output: the solution at T
      REAL*8 Y(102)
!~~~> Input: integration interval
      REAL*8 Tstart,Tend
!~~~> Output: time at which the solution is returned (T=Tend if success)
      REAL*8 T
!~~~> Input: tolerances
      REAL*8  AbsTol(102), RelTol(102)
!~~~> Input: ode function and its Jacobian
      EXTERNAL FunTemplate_g, JacTemplate_g
!~~~> Input: The Rosenbrock method parameters
      INTEGER  ros_S
      REAL*8 ros_M(ros_S), ros_E(ros_S)
      REAL*8 ros_A(ros_S*(ros_S-1)/2), ros_C(ros_S*(ros_S-1)/2)
      REAL*8 ros_Alpha(ros_S), ros_Gamma(ros_S), ros_ELO
      LOGICAL ros_NewF(ros_S)
!~~~> Input: integration parameters
      LOGICAL Autonomous, VectorTol
      REAL*8 Hstart, Hmin, Hmax
      INTEGER Max_no_steps
      REAL*8 Roundoff, FacMin, FacMax, FacRej, FacSafe
!~~~> Output: last accepted step
      REAL*8 Hexit
!~~~> Output: Error indicator
      INTEGER IERR
! ~~~~ Local variables
      REAL*8 Ynew(102), Fcn0(102), Fcn(102),
     &       K(102*ros_S), dFdT(102),
     &       Jac0(1110), Ghimj(1110)
      REAL*8 H, Hnew, HC, HG, Fac, Tau
      REAL*8 Err, Yerr(102)
      INTEGER Pivot(102), Direction, ioffset, j, istage
      LOGICAL RejectLastH, RejectMoreH, Singular
!~~~>  Local parameters
      REAL*8 ZERO, ONE, DeltaMin
      PARAMETER (ZERO = 0.0d0)
      PARAMETER (ONE  = 1.0d0)
      PARAMETER (DeltaMin = 1.0d-5)
!~~~>  Locally called functions
      REAL*8 ros_ErrorNorm_g !, WLAMCH
      EXTERNAL ros_ErrorNorm_g !, WLAMCH
!~~~>  Statistics on the work performed
      INTEGER Nfun,Njac,Nstp,Nacc,Nrej,Ndec,Nsol,Nsng
      COMMON /Statistics/ Nfun,Njac,Nstp,Nacc,Nrej,
     &       Ndec,Nsol,Nsng
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


!~~~>  INITIAL PREPARATIONS
      T = Tstart
      Hexit = 0.0d0
      H = MIN(Hstart,Hmax)
      IF (ABS(H).LE.10.d0*Roundoff) THEN
           H = DeltaMin
      END IF

      IF (Tend .GE. Tstart) THEN
        Direction = +1
      ELSE
        Direction = -1
      END IF

      RejectLastH=.FALSE.
      RejectMoreH=.FALSE.

!~~~> Time loop begins below

! jjb simpler is better
!      DO WHILE ( (Direction.GT.0).AND.((T-Tend)+Roundoff.LE.ZERO)
!     &     .OR. (Direction.LT.0).AND.((Tend-T)+Roundoff.LE.ZERO) )
      DO WHILE (ABS(Tend-T).GE.Roundoff)

      IF ( Nstp.GT.Max_no_steps ) THEN  ! Too many steps
         CALL ros_ErrorMsg_g(-6,T,H,IERR)
         RETURN
      END IF
      IF ( ((T+0.1d0*H).EQ.T).OR.(H.LE.Roundoff) ) THEN  ! Step size too small
         CALL ros_ErrorMsg_g(-7,T,H,IERR)
         RETURN
      END IF

!~~~>  Limit H if necessary to avoid going beyond Tend
      Hexit = H
      H = MIN(H,ABS(Tend-T))

!~~~>   Compute the function at current time
      CALL FunTemplate_g(T,Y,Fcn0)

!~~~>  Compute the function derivative with respect to T
      IF (.NOT.Autonomous) THEN
         CALL ros_FunTimeDerivative_g ( T, Roundoff, Y,
     &                       Fcn0, FunTemplate_g, dFdT )
      END IF

!~~~>   Compute the Jacobian at current time
      CALL JacTemplate_g(T,Y,Jac0)

!~~~>  Repeat step calculation until current step accepted
      DO WHILE (.TRUE.) ! WHILE STEP NOT ACCEPTED


      CALL ros_PrepareMatrix_g(H,Direction,ros_Gamma(1),
     &              Jac0,Ghimj,Pivot,Singular)
      IF (Singular) THEN ! More than 5 consecutive failed decompositions
         CALL ros_ErrorMsg_g(-8,T,H,IERR)
         RETURN
      END IF

!~~~>   Compute the stages
      DO istage = 1, ros_S

         ! Current istage offset. Current istage vector is K(ioffset+1:ioffset+102)
         ioffset = 102*(istage-1)

         ! For the 1st istage the function has been computed previously
         IF ( istage.EQ.1 ) THEN
           ! slim: CALL WCOPY(102,Fcn0,1,Fcn,1)
           Fcn = Fcn0
         ! istage>1 and a new function evaluation is needed at the current istage
         ELSEIF ( ros_NewF(istage) ) THEN
           !slim: CALL WCOPY(102,Y,1,Ynew,1)
           Ynew = Y
           DO j = 1, istage-1
              CALL WAXPY_g(102,ros_A((istage-1)*(istage-2)/2+j),
     &                  K(102*(j-1)+1:102*j),1,Ynew,1)
           END DO
           Tau = T + ros_Alpha(istage)*Direction*H
           CALL FunTemplate_g(Tau,Ynew,Fcn)
         END IF  ! if istage.EQ.1 elseif ros_NewF(istage)
         ! slim: CALL WCOPY(102,Fcn,1,K(ioffset+1),1)
         K(ioffset+1:ioffset+102) = Fcn
         DO j = 1, istage-1
           HC = ros_C((istage-1)*(istage-2)/2+j)/(Direction*H)
           CALL WAXPY_g(102,HC,K(102*(j-1)+1:102*j),1,
     &                K(ioffset+1:ioffset+102),1)
         END DO
         IF ((.NOT. Autonomous).AND.(ros_Gamma(istage).NE.ZERO)) THEN
           HG = Direction*H*ros_Gamma(istage)
!          CALL WAXPY_g(102,HG,dFdT,1,K(ioffset+1),1)
           CALL WAXPY_g(102,HG,dFdT,1,
     &                K(ioffset+1:ioffset+102),1)
         END IF
         CALL SolveTemplate_g(Ghimj, Pivot, K(ioffset+1:ioffset+102))

      END DO  ! istage


!~~~>  Compute the new solution
      !slim: CALL WCOPY(102,Y,1,Ynew,1)
      Ynew = Y
      DO j=1,ros_S
         CALL WAXPY_g(102,ros_M(j),
     &              K(102*(j-1)+1:102*j),1,Ynew,1)
      END DO

!~~~>  Compute the error estimation
      !slim: CALL WSCAL(102,ZERO,Yerr,1)
      Yerr(1:102) = ZERO
      DO j=1,ros_S
         CALL WAXPY_g(102,ros_E(j),
     &              K(102*(j-1)+1:102*j),1,Yerr,1)
      END DO
      Err = ros_ErrorNorm_g ( Y, Ynew, Yerr, AbsTol, RelTol, VectorTol )

!~~~> New step size is bounded by FacMin <= Hnew/H <= FacMax
      Fac  = MIN(FacMax,MAX(FacMin,FacSafe/Err**(ONE/ros_ELO)))
      Hnew = H*Fac

!~~~>  Check the error magnitude and adjust step size
      Nstp = Nstp+1
      IF ( (Err.LE.ONE).OR.(H.LE.Hmin) ) THEN  !~~~> Accept step
         Nacc = Nacc+1
         !slim: CALL WCOPY(102,Ynew,1,Y,1)
         Y = Ynew
         T = T + Direction*H
         Hnew = MAX(Hmin,MIN(Hnew,Hmax))
         IF (RejectLastH) THEN  ! No step size increase after a rejected step
            Hnew = MIN(Hnew,H)
         END IF
         RejectLastH = .FALSE.
         RejectMoreH = .FALSE.
         H = Hnew
         GOTO 101  ! EXIT THE LOOP: WHILE STEP NOT ACCEPTED
      ELSE                 !~~~> Reject step
         IF (RejectMoreH) THEN
            Hnew=H*FacRej
         END IF
         RejectMoreH = RejectLastH
         RejectLastH = .TRUE.
         H = Hnew
         IF (Nacc.GE.1) THEN
            Nrej = Nrej+1
         END IF
      END IF ! Err <= 1

      END DO ! LOOP: WHILE STEP NOT ACCEPTED

101   CONTINUE

      END DO ! Time loop

!~~~> Succesful exit
      IERR = 1  !~~~> The integration was successful

      RETURN
      END  !  SUBROUTINE RosenbrockIntegrator_g


!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      REAL*8 FUNCTION ros_ErrorNorm_g ( Y, Ynew, Yerr,
     &                      AbsTol, RelTol, VectorTol )
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!~~~> Computes the "scaled norm" of the error vector Yerr
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      IMPLICIT NONE

! Input arguments
      REAL*8 Y(102), Ynew(102), Yerr(102)
      REAL*8 AbsTol(102), RelTol(102)
      LOGICAL  VectorTol
! Local variables
      REAL*8 Err, Scale, Ymax, ZERO
      INTEGER i
      PARAMETER (ZERO = 0.0d0)

      Err = ZERO
      DO i=1,102
         Ymax = MAX(ABS(Y(i)),ABS(Ynew(i)))
         IF (VectorTol) THEN
            Scale = AbsTol(i)+RelTol(i)*Ymax
         ELSE
            Scale = AbsTol(1)+RelTol(1)*Ymax
         END IF
         Err = Err+(Yerr(i)/Scale)**2
      END DO
      Err  = SQRT(Err/102)

      ros_ErrorNorm_g = Err

      RETURN
      END ! FUNCTION ros_ErrorNorm_g

!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE ros_FunTimeDerivative_g ( T, Roundoff, Y,
     &                       Fcn0, FunTemplate_g, dFdT )
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!~~~> The time partial derivative of the function by finite differences
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      IMPLICIT NONE

!~~~> Input arguments
      REAL*8 T, Roundoff, Y(102), Fcn0(102)
      EXTERNAL FunTemplate_g
!~~~> Output arguments
      REAL*8 dFdT(102)
!~~~> Global variables
!~~~> Local variables
      REAL*8 Delta, DeltaMin, ONE
      PARAMETER ( DeltaMin = 1.0d-6 )
      PARAMETER ( ONE = 1.0d0 )

      Delta = SQRT(Roundoff)*MAX(DeltaMin,ABS(T))
      CALL FunTemplate_g(T+Delta,Y,dFdT)
      CALL WAXPY_g(102,(-ONE),Fcn0,1,dFdT,1)
      !slim: CALL WSCAL(102,(ONE/Delta),dFdT,1)
      dFdT = (ONE/Delta) * dFdT

      RETURN
      END ! SUBROUTINE ros_FunTimeDerivative_g


!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE ros_PrepareMatrix_g ( H, Direction, gam,
     &                    Jac0, Ghimj, Pivot, Singular )
! --- --- --- --- --- --- --- --- --- --- --- --- ---
!  Prepares the LHS matrix for stage calculations
!  1.  Construct Ghimj = 1/(H*ham) - Jac0
!         "(Gamma H) Inverse Minus Jacobian"
!  2.  Repeat LU decomposition of Ghimj until successful.
!          -half the step size if LU decomposition fails and retry
!          -exit after 5 consecutive fails
! --- --- --- --- --- --- --- --- --- --- --- --- ---
      IMPLICIT NONE
      INCLUDE 'gas_Sparse.h'

!~~~> Input arguments
      REAL*8 gam, Jac0(1110)
      INTEGER  Direction
!~~~> Output arguments
      REAL*8 Ghimj(1110)
      LOGICAL  Singular
      INTEGER  Pivot(102)
!~~~> Inout arguments
      REAL*8 H      ! step size is decreased when LU fails
!~~~> Global variables
      INTEGER Nfun,Njac,Nstp,Nacc,Nrej,Ndec,Nsol,Nsng
      COMMON /Statistics/ Nfun,Njac,Nstp,Nacc,Nrej,
     &       Ndec,Nsol,Nsng
!~~~> Local variables
      INTEGER  i, ising, Nconsecutive
      REAL*8  ghinv, ONE, HALF
      PARAMETER ( ONE  = 1.0d0 )
      PARAMETER ( HALF = 0.5d0 )

      Nconsecutive = 0
      Singular = .TRUE.

      DO WHILE (Singular)

!~~~>    Construct Ghimj = 1/(H*ham) - Jac0
        !slim: CALL WCOPY(1110,Jac0,1,Ghimj,1)
        !slim: CALL WSCAL(1110,(-ONE),Ghimj,1)
         Ghimj = -Jac0
         ghinv = ONE/(Direction*H*gam)
         DO i=1,102
            Ghimj(LU_DIAG_g(i)) = Ghimj(LU_DIAG_g(i))+ghinv
         END DO
!~~~>    Compute LU decomposition
         CALL DecompTemplate_g( Ghimj, Pivot, ising )
         IF (ising .EQ. 0) THEN
!~~~>    If successful done
            Singular = .FALSE.
         ELSE ! ising .ne. 0
!~~~>    If unsuccessful half the step size; if 5 consecutive fails then return
            Nsng = Nsng+1
            Nconsecutive = Nconsecutive+1
            Singular = .TRUE.
            PRINT*,'Warning: LU Decomposition returned ising = ',ising
            IF (Nconsecutive.LE.5) THEN ! Less than 5 consecutive failed decompositions
               H = H*HALF
            ELSE  ! More than 5 consecutive failed decompositions
               RETURN
            END IF  ! Nconsecutive
         END IF  ! ising

      END DO ! WHILE Singular

      RETURN
      END ! SUBROUTINE ros_PrepareMatrix_g


!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE ros_ErrorMsg_g(Code,T,H,IERR)
      REAL*8 T, H
      INTEGER IERR, Code

      IERR = Code
      WRITE(6,*)
     &   'Forced exit from Rosenbrock_g due to the following error:'

      IF    (Code .EQ. -1) THEN
         WRITE(6,*) '--> Improper value for maximal no of steps'
      ELSEIF (Code .EQ. -2) THEN
         WRITE(6,*) '--> Selected Rosenbrock method not implemented'
      ELSEIF (Code .EQ. -3) THEN
         WRITE(6,*) '--> Hmin/Hmax/Hstart must be positive'
      ELSEIF (Code .EQ. -4) THEN
         WRITE(6,*) '--> FacMin/FacMax/FacRej must be positive'
      ELSEIF (Code .EQ. -5) THEN
         WRITE(6,*) '--> Improper tolerance values'
      ELSEIF (Code .EQ. -6) THEN
         WRITE(6,*) '--> No of steps exceeds maximum bound'
      ELSEIF (Code .EQ. -7) THEN
         WRITE(6,*) '--> Step size too small: T + 10*H = T',
     &                ' or H < Roundoff'
      ELSEIF (Code .EQ. -8) THEN
         WRITE(6,*) '--> Matrix is repeatedly singular'
      ELSE
         WRITE(6,102) 'Unknown Error code: ',Code
      END IF

  102 FORMAT('       ',A,I4)
      WRITE(6,103) T, H

  103 FORMAT('        T=',E15.7,' and H=',E15.7)

      RETURN
      END



!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE Ros2_g (ros_S,ros_A,ros_C,ros_M,ros_E,ros_Alpha,
     &                ros_Gamma,ros_NewF,ros_ELO,ros_Name)
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
! --- AN L-STABLE METHOD, 2 stages, order 2
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      IMPLICIT NONE
      INTEGER S
      PARAMETER (S=2)
      INTEGER  ros_S
      REAL*8 ros_M(S), ros_E(S), ros_A(S*(S-1)/2), ros_C(S*(S-1)/2)
      REAL*8 ros_Alpha(S), ros_Gamma(S), ros_ELO
      LOGICAL  ros_NewF(S)
      CHARACTER*12 ros_Name
      DOUBLE PRECISION g

       g = 1.0d0 + 1.0d0/SQRT(2.0d0)

!~~~> Name of the method
       ros_Name = 'ROS-2'
!~~~> Number of stages
       ros_S = 2

!~~~> The coefficient matrices A and C are strictly lower triangular.
!   The lower triangular (subdiagonal) elements are stored in row-wise order:
!   A(2,1) = ros_A(1), A(3,1)=ros_A(2), A(3,2)=ros_A(3), etc.
!   The general mapping formula is:
!             A(i,j) = ros_A( (i-1)*(i-2)/2 + j )
!             C(i,j) = ros_C( (i-1)*(i-2)/2 + j )

       ros_A(1) = (1.d0)/g
       ros_C(1) = (-2.d0)/g
!~~~> Does the stage i require a new function evaluation (ros_NewF(i)=TRUE)
!   or does it re-use the function evaluation from stage i-1 (ros_NewF(i)=FALSE)
       ros_NewF(1) = .TRUE.
       ros_NewF(2) = .TRUE.
!~~~> M_i = Coefficients for new step solution
       ros_M(1)= (3.d0)/(2.d0*g)
       ros_M(2)= (1.d0)/(2.d0*g)
!~~~> E_i = Coefficients for error estimator
       ros_E(1) = 1.d0/(2.d0*g)
       ros_E(2) = 1.d0/(2.d0*g)
!~~~> ros_ELO = estimator of local order - the minimum between the
!       main and the embedded scheme orders plus one
       ros_ELO = 2.0d0
!~~~> Y_stage_i ~ Y( T + H*Alpha_i )
       ros_Alpha(1) = 0.0d0
       ros_Alpha(2) = 1.0d0
!~~~> Gamma_i = \sum_j  gamma_{i,j}
       ros_Gamma(1) = g
       ros_Gamma(2) =-g

      RETURN
      END ! SUBROUTINE Ros2_g


!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE Ros3_g (ros_S,ros_A,ros_C,ros_M,ros_E,ros_Alpha,
     &               ros_Gamma,ros_NewF,ros_ELO,ros_Name)
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
! --- AN L-STABLE METHOD, 3 stages, order 3, 2 function evaluations
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      IMPLICIT NONE
      INTEGER S
      PARAMETER (S=3)
      INTEGER  ros_S
      REAL*8 ros_M(S), ros_E(S), ros_A(S*(S-1)/2), ros_C(S*(S-1)/2)
      REAL*8 ros_Alpha(S), ros_Gamma(S), ros_ELO
      LOGICAL  ros_NewF(S)
      CHARACTER*12 ros_Name

!~~~> Name of the method
      ros_Name = 'ROS-3'
!~~~> Number of stages
      ros_S = 3

!~~~> The coefficient matrices A and C are strictly lower triangular.
!   The lower triangular (subdiagonal) elements are stored in row-wise order:
!   A(2,1) = ros_A(1), A(3,1)=ros_A(2), A(3,2)=ros_A(3), etc.
!   The general mapping formula is:
!             A(i,j) = ros_A( (i-1)*(i-2)/2 + j )
!             C(i,j) = ros_C( (i-1)*(i-2)/2 + j )

      ros_A(1)= 1.d0
      ros_A(2)= 1.d0
      ros_A(3)= 0.d0

      ros_C(1) = -0.10156171083877702091975600115545d+01
      ros_C(2) =  0.40759956452537699824805835358067d+01
      ros_C(3) =  0.92076794298330791242156818474003d+01
!~~~> Does the stage i require a new function evaluation (ros_NewF(i)=TRUE)
!   or does it re-use the function evaluation from stage i-1 (ros_NewF(i)=FALSE)
      ros_NewF(1) = .TRUE.
      ros_NewF(2) = .TRUE.
      ros_NewF(3) = .FALSE.
!~~~> M_i = Coefficients for new step solution
      ros_M(1) =  0.1d+01
      ros_M(2) =  0.61697947043828245592553615689730d+01
      ros_M(3) = -0.42772256543218573326238373806514d+00
!~~~> E_i = Coefficients for error estimator
      ros_E(1) =  0.5d+00
      ros_E(2) = -0.29079558716805469821718236208017d+01
      ros_E(3) =  0.22354069897811569627360909276199d+00
!~~~> ros_ELO = estimator of local order - the minimum between the
!       main and the embedded scheme orders plus 1
      ros_ELO = 3.0d0
!~~~> Y_stage_i ~ Y( T + H*Alpha_i )
      ros_Alpha(1)= 0.0d+00
      ros_Alpha(2)= 0.43586652150845899941601945119356d+00
      ros_Alpha(3)= 0.43586652150845899941601945119356d+00
!~~~> Gamma_i = \sum_j  gamma_{i,j}
      ros_Gamma(1)= 0.43586652150845899941601945119356d+00
      ros_Gamma(2)= 0.24291996454816804366592249683314d+00
      ros_Gamma(3)= 0.21851380027664058511513169485832d+01
      RETURN
      END ! SUBROUTINE Ros3_g

!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE Ros4_g (ros_S,ros_A,ros_C,ros_M,ros_E,ros_Alpha,
     &               ros_Gamma,ros_NewF,ros_ELO,ros_Name)
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!     L-STABLE ROSENBROCK METHOD OF ORDER 4, WITH 4 STAGES
!     L-STABLE EMBEDDED ROSENBROCK METHOD OF ORDER 3
!
!         E. HAIRER AND G. WANNER, SOLVING ORDINARY DIFFERENTIAL
!         EQUATIONS II. STIFF AND DIFFERENTIAL-ALGEBRAIC PROBLEMS.
!         SPRINGER SERIES IN COMPUTATIONAL MATHEMATICS,
!         SPRINGER-VERLAG (1990)
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      IMPLICIT NONE
      INTEGER S
      PARAMETER (S=4)
      INTEGER  ros_S
      REAL*8 ros_M(S), ros_E(S), ros_A(S*(S-1)/2), ros_C(S*(S-1)/2)
      REAL*8 ros_Alpha(S), ros_Gamma(S), ros_ELO
      LOGICAL  ros_NewF(S)
      CHARACTER*12 ros_Name

!~~~> Name of the method
      ros_Name = 'ROS-4'
!~~~> Number of stages
      ros_S = 4

!~~~> The coefficient matrices A and C are strictly lower triangular.
!   The lower triangular (subdiagonal) elements are stored in row-wise order:
!   A(2,1) = ros_A(1), A(3,1)=ros_A(2), A(3,2)=ros_A(3), etc.
!   The general mapping formula is:
!             A(i,j) = ros_A( (i-1)*(i-2)/2 + j )
!             C(i,j) = ros_C( (i-1)*(i-2)/2 + j )

      ros_A(1) = 0.2000000000000000d+01
      ros_A(2) = 0.1867943637803922d+01
      ros_A(3) = 0.2344449711399156d+00
      ros_A(4) = ros_A(2)
      ros_A(5) = ros_A(3)
      ros_A(6) = 0.0D0

      ros_C(1) =-0.7137615036412310d+01
      ros_C(2) = 0.2580708087951457d+01
      ros_C(3) = 0.6515950076447975d+00
      ros_C(4) =-0.2137148994382534d+01
      ros_C(5) =-0.3214669691237626d+00
      ros_C(6) =-0.6949742501781779d+00
!~~~> Does the stage i require a new function evaluation (ros_NewF(i)=TRUE)
!   or does it re-use the function evaluation from stage i-1 (ros_NewF(i)=FALSE)
      ros_NewF(1)  = .TRUE.
      ros_NewF(2)  = .TRUE.
      ros_NewF(3)  = .TRUE.
      ros_NewF(4)  = .FALSE.
!~~~> M_i = Coefficients for new step solution
      ros_M(1) = 0.2255570073418735d+01
      ros_M(2) = 0.2870493262186792d+00
      ros_M(3) = 0.4353179431840180d+00
      ros_M(4) = 0.1093502252409163d+01
!~~~> E_i  = Coefficients for error estimator
      ros_E(1) =-0.2815431932141155d+00
      ros_E(2) =-0.7276199124938920d-01
      ros_E(3) =-0.1082196201495311d+00
      ros_E(4) =-0.1093502252409163d+01
!~~~> ros_ELO  = estimator of local order - the minimum between the
!       main and the embedded scheme orders plus 1
      ros_ELO  = 4.0d0
!~~~> Y_stage_i ~ Y( T + H*Alpha_i )
      ros_Alpha(1) = 0.D0
      ros_Alpha(2) = 0.1145640000000000d+01
      ros_Alpha(3) = 0.6552168638155900d+00
      ros_Alpha(4) = ros_Alpha(3)
!~~~> Gamma_i = \sum_j  gamma_{i,j}
      ros_Gamma(1) = 0.5728200000000000d+00
      ros_Gamma(2) =-0.1769193891319233d+01
      ros_Gamma(3) = 0.7592633437920482d+00
      ros_Gamma(4) =-0.1049021087100450d+00
      RETURN
      END ! SUBROUTINE Ros4_g

!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE Rodas3_g (ros_S,ros_A,ros_C,ros_M,ros_E,ros_Alpha,
     &                ros_Gamma,ros_NewF,ros_ELO,ros_Name)
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
! --- A STIFFLY-STABLE METHOD, 4 stages, order 3
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      IMPLICIT NONE
      INTEGER S
      PARAMETER (S=4)
      INTEGER  ros_S
      REAL*8 ros_M(S), ros_E(S), ros_A(S*(S-1)/2), ros_C(S*(S-1)/2)
      REAL*8 ros_Alpha(S), ros_Gamma(S), ros_ELO
      LOGICAL  ros_NewF(S)
      CHARACTER*12 ros_Name

!~~~> Name of the method
      ros_Name = 'RODAS-3'
!~~~> Number of stages
      ros_S = 4

!~~~> The coefficient matrices A and C are strictly lower triangular.
!   The lower triangular (subdiagonal) elements are stored in row-wise order:
!   A(2,1) = ros_A(1), A(3,1)=ros_A(2), A(3,2)=ros_A(3), etc.
!   The general mapping formula is:
!             A(i,j) = ros_A( (i-1)*(i-2)/2 + j )
!             C(i,j) = ros_C( (i-1)*(i-2)/2 + j )

      ros_A(1) = 0.0d+00
      ros_A(2) = 2.0d+00
      ros_A(3) = 0.0d+00
      ros_A(4) = 2.0d+00
      ros_A(5) = 0.0d+00
      ros_A(6) = 1.0d+00

      ros_C(1) = 4.0d+00
      ros_C(2) = 1.0d+00
      ros_C(3) =-1.0d+00
      ros_C(4) = 1.0d+00
      ros_C(5) =-1.0d+00
      ros_C(6) =-(8.0d+00/3.0d+00)

!~~~> Does the stage i require a new function evaluation (ros_NewF(i)=TRUE)
!   or does it re-use the function evaluation from stage i-1 (ros_NewF(i)=FALSE)
      ros_NewF(1)  = .TRUE.
      ros_NewF(2)  = .FALSE.
      ros_NewF(3)  = .TRUE.
      ros_NewF(4)  = .TRUE.
!~~~> M_i = Coefficients for new step solution
      ros_M(1) = 2.0d+00
      ros_M(2) = 0.0d+00
      ros_M(3) = 1.0d+00
      ros_M(4) = 1.0d+00
!~~~> E_i  = Coefficients for error estimator
      ros_E(1) = 0.0d+00
      ros_E(2) = 0.0d+00
      ros_E(3) = 0.0d+00
      ros_E(4) = 1.0d+00
!~~~> ros_ELO  = estimator of local order - the minimum between the
!       main and the embedded scheme orders plus 1
      ros_ELO  = 3.0d+00
!~~~> Y_stage_i ~ Y( T + H*Alpha_i )
      ros_Alpha(1) = 0.0d+00
      ros_Alpha(2) = 0.0d+00
      ros_Alpha(3) = 1.0d+00
      ros_Alpha(4) = 1.0d+00
!~~~> Gamma_i = \sum_j  gamma_{i,j}
      ros_Gamma(1) = 0.5d+00
      ros_Gamma(2) = 1.5d+00
      ros_Gamma(3) = 0.0d+00
      ros_Gamma(4) = 0.0d+00
      RETURN
      END ! SUBROUTINE Rodas3_g

!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE Rodas4_g (ros_S,ros_A,ros_C,ros_M,ros_E,ros_Alpha,
     &                 ros_Gamma,ros_NewF,ros_ELO,ros_Name)
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!     STIFFLY-STABLE ROSENBROCK METHOD OF ORDER 4, WITH 6 STAGES
!
!         E. HAIRER AND G. WANNER, SOLVING ORDINARY DIFFERENTIAL
!         EQUATIONS II. STIFF AND DIFFERENTIAL-ALGEBRAIC PROBLEMS.
!         SPRINGER SERIES IN COMPUTATIONAL MATHEMATICS,
!         SPRINGER-VERLAG (1996)
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      IMPLICIT NONE
      INTEGER S
      PARAMETER (S=6)
      INTEGER  ros_S
      REAL*8 ros_M(S), ros_E(S), ros_A(S*(S-1)/2), ros_C(S*(S-1)/2)
      REAL*8 ros_Alpha(S), ros_Gamma(S), ros_ELO
      LOGICAL  ros_NewF(S)
      CHARACTER*12 ros_Name

!~~~> Name of the method
       ros_Name = 'RODAS-4'
!~~~> Number of stages
       ros_S = 6

!~~~> Y_stage_i ~ Y( T + H*Alpha_i )
       ros_Alpha(1) = 0.000d0
       ros_Alpha(2) = 0.386d0
       ros_Alpha(3) = 0.210d0
       ros_Alpha(4) = 0.630d0
       ros_Alpha(5) = 1.000d0
       ros_Alpha(6) = 1.000d0

!~~~> Gamma_i = \sum_j  gamma_{i,j}
       ros_Gamma(1) = 0.2500000000000000d+00
       ros_Gamma(2) =-0.1043000000000000d+00
       ros_Gamma(3) = 0.1035000000000000d+00
       ros_Gamma(4) =-0.3620000000000023d-01
       ros_Gamma(5) = 0.0d0
       ros_Gamma(6) = 0.0d0

!~~~> The coefficient matrices A and C are strictly lower triangular.
!   The lower triangular (subdiagonal) elements are stored in row-wise order:
!   A(2,1) = ros_A(1), A(3,1)=ros_A(2), A(3,2)=ros_A(3), etc.
!   The general mapping formula is:  A(i,j) = ros_A( (i-1)*(i-2)/2 + j )
!                                    C(i,j) = ros_C( (i-1)*(i-2)/2 + j )

       ros_A(1) = 0.1544000000000000d+01
       ros_A(2) = 0.9466785280815826d+00
       ros_A(3) = 0.2557011698983284d+00
       ros_A(4) = 0.3314825187068521d+01
       ros_A(5) = 0.2896124015972201d+01
       ros_A(6) = 0.9986419139977817d+00
       ros_A(7) = 0.1221224509226641d+01
       ros_A(8) = 0.6019134481288629d+01
       ros_A(9) = 0.1253708332932087d+02
       ros_A(10) =-0.6878860361058950d+00
       ros_A(11) = ros_A(7)
       ros_A(12) = ros_A(8)
       ros_A(13) = ros_A(9)
       ros_A(14) = ros_A(10)
       ros_A(15) = 1.0d+00

       ros_C(1) =-0.5668800000000000d+01
       ros_C(2) =-0.2430093356833875d+01
       ros_C(3) =-0.2063599157091915d+00
       ros_C(4) =-0.1073529058151375d+00
       ros_C(5) =-0.9594562251023355d+01
       ros_C(6) =-0.2047028614809616d+02
       ros_C(7) = 0.7496443313967647d+01
       ros_C(8) =-0.1024680431464352d+02
       ros_C(9) =-0.3399990352819905d+02
       ros_C(10) = 0.1170890893206160d+02
       ros_C(11) = 0.8083246795921522d+01
       ros_C(12) =-0.7981132988064893d+01
       ros_C(13) =-0.3152159432874371d+02
       ros_C(14) = 0.1631930543123136d+02
       ros_C(15) =-0.6058818238834054d+01

!~~~> M_i = Coefficients for new step solution
       ros_M(1) = ros_A(7)
       ros_M(2) = ros_A(8)
       ros_M(3) = ros_A(9)
       ros_M(4) = ros_A(10)
       ros_M(5) = 1.0d+00
       ros_M(6) = 1.0d+00

!~~~> E_i  = Coefficients for error estimator
       ros_E(1) = 0.0d+00
       ros_E(2) = 0.0d+00
       ros_E(3) = 0.0d+00
       ros_E(4) = 0.0d+00
       ros_E(5) = 0.0d+00
       ros_E(6) = 1.0d+00

!~~~> Does the stage i require a new function evaluation (ros_NewF(i)=TRUE)
!   or does it re-use the function evaluation from stage i-1 (ros_NewF(i)=FALSE)
       ros_NewF(1) = .TRUE.
       ros_NewF(2) = .TRUE.
       ros_NewF(3) = .TRUE.
       ros_NewF(4) = .TRUE.
       ros_NewF(5) = .TRUE.
       ros_NewF(6) = .TRUE.

!~~~> ros_ELO  = estimator of local order - the minimum between the
!       main and the embedded scheme orders plus 1
       ros_ELO = 4.0d0

      RETURN
      END ! SUBROUTINE Rodas4_g



!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE DecompTemplate_g( A, Pivot, ising )
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!  Template for the LU decomposition
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!~~~> Inout variables
      REAL*8 A(1110)
!~~~> Output variables
      INTEGER Pivot(102), ising
!~~~> Collect statistics
      INTEGER Nfun,Njac,Nstp,Nacc,Nrej,Ndec,Nsol,Nsng
      COMMON /Statistics/ Nfun,Njac,Nstp,Nacc,Nrej,
     &       Ndec,Nsol,Nsng

      CALL KppDecomp_g ( A, ising )
!~~~> Note: for a full matrix use Lapack:
!        CALL  DGETRF( 102, 102, A, 102, Pivot, ising )

      Ndec = Ndec + 1

      END ! SUBROUTINE DecompTemplate_g

!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE SolveTemplate_g( A, Pivot, b )
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!  Template for the forward/backward substitution (using pre-computed LU decomposition)
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!~~~> Input variables
      REAL*8 A(1110)
      INTEGER Pivot(102)
!~~~> InOut variables
      REAL*8 b(102)
!~~~> Collect statistics
      INTEGER Nfun,Njac,Nstp,Nacc,Nrej,Ndec,Nsol,Nsng
      COMMON /Statistics/ Nfun,Njac,Nstp,Nacc,Nrej,
     &       Ndec,Nsol,Nsng

      CALL KppSolve_g( A, b )
!~~~> Note: for a full matrix use Lapack:
!        NRHS = 1
!        CALL  DGETRS( 'N', 102 , NRHS, A, 102, Pivot, b, 102, INFO )

      Nsol = Nsol+1

      END ! SUBROUTINE SolveTemplate_g

!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE FunTemplate_g( T, Y, Ydot )
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!  Template for the ODE function call.
!  Updates the rate coefficients (and possibly the fixed species) at each call
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      INCLUDE 'gas_Parameters.h'
      INCLUDE 'gas_Global.h'
!~~~> Input variables
      REAL*8 T, Y(102)
!~~~> Output variables
      REAL*8 Ydot(102)
!~~~> Local variables
      REAL*8 Told
!~~~> Collect statistics
      INTEGER Nfun,Njac,Nstp,Nacc,Nrej,Ndec,Nsol,Nsng
      COMMON /Statistics/ Nfun,Njac,Nstp,Nacc,Nrej,
     &       Ndec,Nsol,Nsng

      Told = TIME
      TIME = T
      CALL Fun_g( Y, FIX, RCONST, Ydot )
      TIME = Told

      Nfun = Nfun+1

      RETURN
      END ! SUBROUTINE FunTemplate_g


!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE JacTemplate_g( T, Y, Jcb )
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!  Template for the ODE Jacobian call.
!  Updates the rate coefficients (and possibly the fixed species) at each call
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      INCLUDE 'gas_Parameters.h'
      INCLUDE 'gas_Global.h'
!~~~> Input variables
      REAL*8 T, Y(102)
!~~~> Output variables
      REAL*8 Jcb(1110)
!~~~> Local variables
      REAL*8 Told
!~~~> Collect statistics
      INTEGER Nfun,Njac,Nstp,Nacc,Nrej,Ndec,Nsol,Nsng
      COMMON /Statistics/ Nfun,Njac,Nstp,Nacc,Nrej,
     &       Ndec,Nsol,Nsng

      Told = TIME
      TIME = T
      CALL Jac_SP_g( Y, FIX, RCONST, Jcb )
      TIME = Told

      Njac = Njac+1

      RETURN
      END !  SUBROUTINE JacTemplate_g

C End of INTEGRATE_g function                                        
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C                                                                  
C The ODE Function of Chemical Model File                          
C                                                                  
C Generated by KPP-2.2.4 for Mistra symbolic chemistry Kinetics PreProcessor
C       (http://www.cs.vt.edu/~asandu/Software/Kpp)                
C KPP is distributed under GPL, the general public licence         
C       (http://www.gnu.org/copyleft/gpl.html)                     
C (C) 1995-1997, V. Damian & A. Sandu, CGRER, Univ. Iowa           
C (C) 1997-2005, A. Sandu, Michigan Tech, Virginia Tech            
C     With important contributions from:                           
C        M. Damian, Villanova University, USA                      
C        R. Sander, Max-Planck Institute for Chemistry, Mainz, Germany
C                                                                  
C File                 : gas_Function.f                            
C Time                 : Wed Jul 14 18:26:57 2021                  
C Working directory    : /local/josue/Mistra_2019/src/mech         
C Equation file        : gas.k                                     
C Output root filename : gas                                       
C                                                                  
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C                                                                  
C Fun_g - time derivatives of variables - Agregate form              
C   Arguments :                                                    
C      V         - Concentrations of variable species (local)      
C      F         - Concentrations of fixed species (local)         
C      RCT       - Rate constants (local)                          
C      Vdot      - Time derivative of variable species concentrations
C                                                                  
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      SUBROUTINE Fun_g ( V, F, RCT, Vdot )

      IMPLICIT NONE
      INCLUDE 'gas_Parameters.h'

C V - Concentrations of variable species (local)                   
      REAL*8 V(NVAR)
C F - Concentrations of fixed species (local)                      
      REAL*8 F(NFIX)
C RCT - Rate constants (local)                                     
      REAL*8 RCT(NREACT)
C Vdot - Time derivative of variable species concentrations        
      REAL*8 Vdot(NVAR)


C Local variables                                                  
C A - Rate for each equation                                       
      REAL*8 A(NREACT)

C Computation of equation rates                                    
      A(1) = RCT(1)*V(38)*F(1)
      A(2) = RCT(2)*V(38)*V(94)
      A(3) = RCT(3)*V(38)*F(3)
      A(4) = RCT(4)*V(38)*F(2)
      A(5) = RCT(5)*V(38)*V(50)
      A(6) = RCT(6)*V(67)*V(90)
      A(7) = RCT(7)*V(90)*F(1)*F(1)
      A(8) = RCT(8)*V(90)*V(94)
      A(9) = RCT(9)*V(90)*F(1)*F(3)
      A(10) = RCT(10)*V(94)*V(98)
      A(11) = RCT(11)*V(98)*V(102)
      A(12) = RCT(12)*V(50)*V(98)
      A(13) = RCT(13)*V(67)*V(98)
      A(14) = RCT(14)*V(98)*V(98)
      A(15) = RCT(15)*V(98)*V(98)
      A(16) = RCT(16)*V(94)*V(102)
      A(17) = RCT(17)*V(102)*V(102)
      A(18) = RCT(18)*V(94)
      A(19) = RCT(19)*V(94)
      A(20) = RCT(20)*V(67)
      A(21) = RCT(21)*V(90)*V(93)
      A(22) = RCT(22)*V(93)*V(98)
      A(23) = RCT(23)*V(93)*V(102)
      A(24) = RCT(24)*V(93)*V(94)
      A(25) = RCT(25)*V(93)*V(95)
      A(26) = RCT(26)*V(90)*V(91)
      A(27) = RCT(27)*V(90)*V(91)
      A(28) = RCT(28)*V(91)*V(98)
      A(29) = RCT(29)*V(91)*V(102)
      A(30) = RCT(30)*V(91)*V(94)
      A(31) = RCT(31)*V(91)*V(95)
      A(32) = RCT(32)*V(91)
      A(33) = RCT(33)*V(90)*V(95)
      A(34) = RCT(34)*V(95)*V(98)
      A(35) = RCT(35)*V(95)*V(102)
      A(36) = RCT(36)*V(95)*V(95)
      A(37) = RCT(37)*V(95)
      A(38) = RCT(38)*V(95)
      A(39) = RCT(39)*V(32)
      A(40) = RCT(40)*V(32)
      A(41) = RCT(41)*V(28)*V(98)
      A(42) = RCT(42)*V(28)
      A(43) = RCT(43)*V(75)*V(98)
      A(44) = RCT(44)*V(75)
      A(45) = RCT(45)*V(41)
      A(46) = RCT(46)*V(41)*V(98)
      A(47) = RCT(47)*V(41)
      A(48) = RCT(48)*V(41)
      A(49) = RCT(49)*V(24)*V(98)
      A(50) = RCT(50)*V(49)*V(98)
      A(51) = RCT(51)*V(34)*V(98)
      A(52) = RCT(52)*V(35)*V(98)
      A(53) = RCT(53)*V(76)*V(98)
      A(54) = RCT(54)*V(76)*V(94)
      A(55) = RCT(55)*V(76)*V(95)
      A(56) = RCT(56)*V(23)*F(2)
      A(57) = RCT(57)*V(93)*V(100)
      A(58) = RCT(58)*V(100)*V(102)
      A(59) = RCT(59)*V(100)*V(100)
      A(60) = RCT(60)*V(100)*V(100)
      A(61) = RCT(61)*V(71)*V(93)
      A(62) = RCT(62)*V(71)*V(102)
      A(63) = RCT(63)*V(71)*V(71)
      A(64) = RCT(64)*V(71)*V(71)
      A(65) = RCT(65)*V(71)*V(100)
      A(66) = RCT(66)*V(71)*V(100)
      A(67) = RCT(67)*V(71)*V(100)
      A(68) = RCT(68)*V(73)*V(93)
      A(69) = RCT(69)*V(73)*V(93)
      A(70) = RCT(70)*V(73)*V(102)
      A(71) = RCT(71)*V(73)*V(73)
      A(72) = RCT(72)*V(73)*V(73)
      A(73) = RCT(73)*V(73)*V(100)
      A(74) = RCT(74)*V(73)*V(100)
      A(75) = RCT(75)*V(73)*V(100)
      A(76) = RCT(76)*V(82)*V(93)
      A(77) = RCT(77)*V(82)*V(102)
      A(78) = RCT(78)*V(82)*V(82)
      A(79) = RCT(79)*V(82)*V(100)
      A(80) = RCT(80)*V(82)*V(100)
      A(81) = RCT(81)*V(82)*V(91)
      A(82) = RCT(82)*V(57)
      A(83) = RCT(83)*V(57)*V(98)
      A(84) = RCT(84)*V(88)*V(98)
      A(85) = RCT(85)*V(88)*V(95)
      A(86) = RCT(86)*V(88)
      A(87) = RCT(87)*V(88)
      A(88) = RCT(88)*V(79)*V(98)
      A(89) = RCT(89)*V(79)*V(95)
      A(90) = RCT(90)*V(79)
      A(91) = RCT(91)*V(56)*V(98)
      A(92) = RCT(92)*V(60)*V(98)
      A(93) = RCT(93)*V(60)*V(98)
      A(94) = RCT(94)*V(54)*V(98)
      A(95) = RCT(95)*V(48)*V(98)
      A(96) = RCT(96)*V(78)*V(98)
      A(97) = RCT(97)*V(78)*V(98)
      A(98) = RCT(98)*V(78)
      A(99) = RCT(99)*V(52)*V(90)
      A(100) = RCT(100)*V(52)*V(98)
      A(101) = RCT(101)*V(52)*V(94)
      A(102) = RCT(102)*V(25)*F(1)
      A(103) = RCT(103)*V(26)
      A(104) = RCT(104)*V(24)*V(26)
      A(105) = RCT(105)*V(87)*V(98)
      A(106) = RCT(106)*V(87)*V(98)
      A(107) = RCT(107)*V(87)*V(95)
      A(108) = RCT(108)*V(87)*V(99)
      A(109) = RCT(109)*V(87)*V(97)
      A(110) = RCT(110)*V(87)*V(96)
      A(111) = RCT(111)*V(87)*V(92)
      A(112) = RCT(112)*V(87)*V(101)
      A(113) = RCT(113)*V(86)*V(93)
      A(114) = RCT(114)*V(86)*V(102)
      A(115) = RCT(115)*V(86)*V(86)
      A(116) = RCT(116)*V(86)*V(100)
      A(117) = RCT(117)*V(86)*V(91)
      A(118) = RCT(118)*V(61)*V(94)
      A(119) = RCT(119)*V(61)*V(91)
      A(120) = RCT(120)*V(61)*V(91)
      A(121) = RCT(121)*V(61)*V(93)
      A(122) = RCT(122)*V(61)*V(93)
      A(123) = RCT(123)*V(84)*V(94)
      A(124) = RCT(124)*V(84)*V(91)
      A(125) = RCT(125)*V(84)*V(91)
      A(126) = RCT(126)*V(85)
      A(127) = RCT(127)*V(85)*V(94)
      A(128) = RCT(128)*V(85)*V(91)
      A(129) = RCT(129)*V(85)*V(91)
      A(130) = RCT(130)*V(85)*V(93)
      A(131) = RCT(131)*V(27)*V(102)
      A(132) = RCT(132)*V(39)*V(98)
      A(133) = RCT(133)*V(39)
      A(134) = RCT(134)*V(33)
      A(135) = RCT(135)*V(77)*V(98)
      A(136) = RCT(136)*V(77)*V(99)
      A(137) = RCT(137)*V(77)*V(92)
      A(138) = RCT(138)*V(42)*V(98)
      A(139) = RCT(139)*V(42)*V(95)
      A(140) = RCT(140)*V(94)*V(99)
      A(141) = RCT(141)*V(99)*V(102)
      A(142) = RCT(142)*V(99)*V(102)
      A(143) = RCT(143)*V(67)*V(99)
      A(144) = RCT(144)*V(50)*V(99)
      A(145) = RCT(145)*V(75)*V(99)
      A(146) = RCT(146)*V(91)*V(99)
      A(147) = RCT(147)*V(91)*V(99)
      A(148) = RCT(148)*V(95)*V(99)
      A(149) = RCT(149)*V(72)*V(98)
      A(150) = RCT(150)*V(72)
      A(151) = RCT(151)*V(90)*V(96)
      A(152) = RCT(152)*V(96)*V(98)
      A(153) = RCT(153)*V(96)*V(98)
      A(154) = RCT(154)*V(96)*V(102)
      A(155) = RCT(155)*V(94)*V(96)
      A(156) = RCT(156)*V(94)*V(96)
      A(157) = RCT(157)*V(93)*V(96)
      A(158) = RCT(158)*V(91)*V(96)
      A(159) = RCT(159)*V(95)*V(96)
      A(160) = RCT(160)*V(95)*V(96)
      A(161) = RCT(161)*V(96)*V(96)
      A(162) = RCT(162)*V(96)*V(96)
      A(163) = RCT(163)*V(96)*V(96)
      A(164) = RCT(164)*V(96)*V(96)
      A(165) = RCT(165)*V(83)*V(96)
      A(166) = RCT(166)*V(83)*V(99)
      A(167) = RCT(167)*V(83)*V(90)
      A(168) = RCT(168)*V(83)*V(90)
      A(169) = RCT(169)*V(83)*V(98)
      A(170) = RCT(170)*V(83)*V(94)
      A(171) = RCT(171)*V(83)*V(93)
      A(172) = RCT(172)*V(83)
      A(173) = RCT(173)*V(53)*V(99)
      A(174) = RCT(174)*V(53)*V(94)
      A(175) = RCT(175)*V(53)
      A(176) = RCT(176)*V(53)
      A(177) = RCT(177)*V(21)
      A(178) = RCT(178)*V(66)*V(98)
      A(179) = RCT(179)*V(62)*V(90)
      A(180) = RCT(180)*V(62)*V(98)
      A(181) = RCT(181)*V(62)
      A(182) = RCT(182)*V(40)*V(98)
      A(183) = RCT(183)*V(40)
      A(184) = RCT(184)*V(63)*V(99)
      A(185) = RCT(185)*V(63)*V(90)
      A(186) = RCT(186)*V(63)*V(98)
      A(187) = RCT(187)*V(63)
      A(188) = RCT(188)*V(63)
      A(189) = RCT(189)*V(34)*V(99)
      A(190) = RCT(190)*V(35)*V(99)
      A(191) = RCT(191)*V(76)*V(99)
      A(192) = RCT(192)*V(88)*V(99)
      A(193) = RCT(193)*V(79)*V(99)
      A(194) = RCT(194)*V(56)*V(99)
      A(195) = RCT(195)*V(60)*V(99)
      A(196) = RCT(196)*V(78)*V(99)
      A(197) = RCT(197)*V(54)*V(99)
      A(198) = RCT(198)*V(48)*V(99)
      A(199) = RCT(199)*V(57)*V(99)
      A(200) = RCT(200)*V(99)*V(100)
      A(201) = RCT(201)*V(96)*V(100)
      A(202) = RCT(202)*V(37)*V(98)
      A(203) = RCT(203)*V(65)*V(93)
      A(204) = RCT(204)*V(65)*V(102)
      A(205) = RCT(205)*V(65)*V(65)
      A(206) = RCT(206)*V(65)*V(100)
      A(207) = RCT(207)*V(94)*V(97)
      A(208) = RCT(208)*V(97)*V(102)
      A(209) = RCT(209)*V(67)*V(97)
      A(210) = RCT(210)*V(91)*V(97)
      A(211) = RCT(211)*V(95)*V(97)
      A(212) = RCT(212)*V(74)*V(98)
      A(213) = RCT(213)*V(74)*V(90)
      A(214) = RCT(214)*V(74)
      A(215) = RCT(215)*V(92)*V(97)
      A(216) = RCT(216)*V(90)*V(92)
      A(217) = RCT(217)*V(92)*V(98)
      A(218) = RCT(218)*V(92)*V(102)
      A(219) = RCT(219)*V(92)*V(93)
      A(220) = RCT(220)*V(91)*V(92)
      A(221) = RCT(221)*V(92)*V(95)
      A(222) = RCT(222)*V(92)*V(94)
      A(223) = RCT(223)*V(92)*V(92)
      A(224) = RCT(224)*V(92)*V(92)
      A(225) = RCT(225)*V(92)
      A(226) = RCT(226)*V(29)*V(97)
      A(227) = RCT(227)*V(64)*V(98)
      A(228) = RCT(228)*V(64)*V(95)
      A(229) = RCT(229)*V(68)*V(90)
      A(230) = RCT(230)*V(68)
      A(231) = RCT(231)*V(22)
      A(232) = RCT(232)*V(51)*V(90)
      A(233) = RCT(233)*V(51)*V(97)
      A(234) = RCT(234)*V(51)
      A(235) = RCT(235)*V(51)
      A(236) = RCT(236)*V(76)*V(97)
      A(237) = RCT(237)*V(88)*V(97)
      A(238) = RCT(238)*V(79)*V(97)
      A(239) = RCT(239)*V(78)*V(97)
      A(240) = RCT(240)*V(97)*V(100)
      A(241) = RCT(241)*V(88)*V(92)
      A(242) = RCT(242)*V(92)*V(100)
      A(243) = RCT(243)*V(92)*V(100)
      A(244) = RCT(244)*V(31)*V(98)
      A(245) = RCT(245)*V(70)*V(93)
      A(246) = RCT(246)*V(70)*V(102)
      A(247) = RCT(247)*V(70)*V(70)
      A(248) = RCT(248)*V(70)*V(100)
      A(249) = RCT(249)*V(89)*V(94)
      A(250) = RCT(250)*V(89)*V(102)
      A(251) = RCT(251)*V(89)*V(91)
      A(252) = RCT(252)*V(89)*V(95)
      A(253) = RCT(253)*V(89)*V(89)
      A(254) = RCT(254)*V(81)*V(90)
      A(255) = RCT(255)*V(81)*V(98)
      A(256) = RCT(256)*V(81)*V(95)
      A(257) = RCT(257)*V(81)
      A(258) = RCT(258)*V(90)*V(101)
      A(259) = RCT(259)*V(101)*V(102)
      A(260) = RCT(260)*V(93)*V(101)
      A(261) = RCT(261)*V(91)*V(101)
      A(262) = RCT(262)*V(101)*V(101)
      A(263) = RCT(263)*V(101)
      A(264) = RCT(264)*V(55)*V(98)
      A(265) = RCT(265)*V(55)*V(93)
      A(266) = RCT(266)*V(55)*V(55)
      A(267) = RCT(267)*V(55)
      A(268) = RCT(268)*V(20)
      A(269) = RCT(269)*V(43)*V(98)
      A(270) = RCT(270)*V(43)*V(95)
      A(271) = RCT(271)*V(36)
      A(272) = RCT(272)*V(30)*V(30)
      A(273) = RCT(273)*V(30)
      A(274) = RCT(274)*V(44)
      A(275) = RCT(275)*V(44)
      A(276) = RCT(276)*V(1)
      A(277) = RCT(277)*V(45)*V(98)
      A(278) = RCT(278)*V(45)
      A(279) = RCT(279)*V(47)*V(98)
      A(280) = RCT(280)*V(47)
      A(281) = RCT(281)*V(46)*V(98)
      A(282) = RCT(282)*V(46)
      A(283) = RCT(283)*V(100)*V(101)
      A(284) = RCT(284)*V(59)*V(93)
      A(285) = RCT(285)*V(59)*V(102)
      A(286) = RCT(286)*V(59)*V(59)
      A(287) = RCT(287)*V(59)*V(100)
      A(288) = RCT(288)*V(80)*V(99)
      A(289) = RCT(289)*V(74)*V(99)
      A(290) = RCT(290)*V(81)*V(99)
      A(291) = RCT(291)*V(99)*V(101)
      A(292) = RCT(292)*V(83)*V(97)
      A(293) = RCT(293)*V(72)*V(97)
      A(294) = RCT(294)*V(53)*V(97)
      A(295) = RCT(295)*V(80)*V(97)
      A(296) = RCT(296)*V(81)*V(97)
      A(297) = RCT(297)*V(97)*V(101)
      A(298) = RCT(298)*V(58)*V(97)
      A(299) = RCT(299)*V(74)*V(89)
      A(300) = RCT(300)*V(89)*V(92)
      A(301) = RCT(301)*V(81)*V(92)
      A(302) = RCT(302)*V(92)*V(96)
      A(303) = RCT(303)*V(92)*V(96)
      A(304) = RCT(304)*V(92)*V(96)
      A(305) = RCT(305)*V(96)*V(101)
      A(306) = RCT(306)*V(96)*V(101)
      A(307) = RCT(307)*V(96)*V(101)
      A(308) = RCT(308)*V(92)*V(101)
      A(309) = RCT(309)*V(92)*V(101)
      A(310) = RCT(310)*V(58)*V(98)
      A(311) = RCT(311)*V(58)
      A(312) = RCT(312)*V(69)*V(97)
      A(313) = RCT(313)*V(69)*V(99)
      A(314) = RCT(314)*V(69)*V(98)
      A(315) = RCT(315)*V(69)
      A(316) = RCT(316)*V(80)*V(90)
      A(317) = RCT(317)*V(80)*V(98)
      A(318) = RCT(318)*V(80)
      A(319) = RCT(319)*V(45)*V(99)
      A(320) = RCT(320)*V(47)*V(99)
      A(321) = RCT(321)*V(46)*V(99)
      A(322) = RCT(322)*V(3)
      A(323) = RCT(323)*V(2)
      A(324) = RCT(324)*V(75)
      A(325) = RCT(325)*V(32)
      A(326) = RCT(326)*V(24)
      A(327) = RCT(327)*V(19)
      A(328) = RCT(328)*V(75)
      A(329) = RCT(329)*V(32)
      A(330) = RCT(330)*V(24)
      A(331) = RCT(331)*V(19)

C Aggregate function                                               
      Vdot(1) = -A(276)
      Vdot(2) = -A(323)
      Vdot(3) = -A(322)
      Vdot(4) = A(325)
      Vdot(5) = A(50)+A(94)+A(95)
      Vdot(6) = 0.05*A(135)+A(137)
      Vdot(7) = A(131)+0.05*A(138)
      Vdot(8) = A(146)
      Vdot(9) = A(168)+A(170)
      Vdot(10) = A(264)
      Vdot(11) = A(49)+A(104)+A(122)
      Vdot(12) = A(204)+A(246)+A(285)
      Vdot(13) = A(324)
      Vdot(14) = A(326)
      Vdot(15) = A(327)
      Vdot(16) = A(328)
      Vdot(17) = A(330)
      Vdot(18) = A(331)
      Vdot(19) = A(103)-A(327)-A(331)
      Vdot(20) = 0.51*A(262)+A(266)-A(268)
      Vdot(21) = A(165)-A(177)
      Vdot(22) = A(210)-A(231)
      Vdot(23) = 0.37*A(54)-A(56)+A(240)
      Vdot(24) = -A(49)-A(104)-A(326)-A(330)
      Vdot(25) = A(100)-A(102)
      Vdot(26) = A(99)+A(101)+A(102)-A(103)-A(104)
      Vdot(27) = A(127)+A(128)+A(130)-A(131)
      Vdot(28) = A(22)-A(41)-A(42)
      Vdot(29) = A(215)-A(226)
      Vdot(30) = A(251)-2*A(272)-A(273)
      Vdot(31) = A(109)-A(244)
      Vdot(32) = A(31)-A(39)-A(40)-A(325)-A(329)
      Vdot(33) = A(117)+A(120)+A(129)-A(134)
      Vdot(34) = -A(51)-A(189)
      Vdot(35) = -A(52)-A(190)
      Vdot(36) = A(255)+A(259)-A(271)+0.84*A(310)
      Vdot(37) = -A(202)+0.3*A(319)+0.5*A(320)+0.3*A(321)
      Vdot(38) = -A(1)-A(2)-A(3)-A(4)-A(5)+A(18)
      Vdot(39) = A(114)-A(132)-A(133)
      Vdot(40) = A(147)-A(182)-A(183)
      Vdot(41) = A(29)-A(45)-A(46)-A(47)-A(48)
      Vdot(42) = 0.95*A(135)-A(138)-A(139)
      Vdot(43) = A(250)-A(269)-A(270)
      Vdot(44) = A(256)+A(261)-A(274)-A(275)
      Vdot(45) = -A(277)-A(278)-A(319)
      Vdot(46) = -A(281)-A(282)-A(321)
      Vdot(47) = -A(279)-A(280)-A(320)
      Vdot(48) = A(80)-A(95)-A(198)
      Vdot(49) = -A(50)+0.63*A(54)+A(83)+A(84)+A(85)+A(86)+A(87)+A(90)
     &          +A(192)+A(199)+0.5*A(200)+A(237)+A(241)+A(322)+A(323)
      Vdot(50) = -A(5)-A(12)+A(87)-A(144)
      Vdot(51) = A(220)-A(232)-A(233)-A(234)-A(235)
      Vdot(52) = -A(99)-A(100)-A(101)+A(125)+A(126)
      Vdot(53) = A(164)-A(173)-A(174)-A(175)-A(176)-A(294)
      Vdot(54) = A(56)-A(94)-A(197)
      Vdot(55) = 0.38*A(262)-A(264)-A(265)-2*A(266)-A(267)+0.5*A(283)
     &          +A(309)
      Vdot(56) = A(59)+A(65)+A(74)-A(91)-A(194)+0.3*A(277)
      Vdot(57) = A(81)-A(82)-A(83)-A(199)
      Vdot(58) = A(296)-A(298)+A(299)+A(301)-A(310)-A(311)
      Vdot(59) = 0.7*A(277)+0.5*A(279)+0.7*A(281)-A(284)-A(285)-2
     &          *A(286)-A(287)+0.7*A(319)+0.5*A(320)+0.7*A(321)
      Vdot(60) = A(63)+A(66)+A(71)+A(73)-A(92)-A(93)-A(195)+0.5*A(279)
     &          +0.3*A(281)
      Vdot(61) = A(113)+2*A(115)+A(116)-A(118)-A(119)-A(120)-A(121)
     &          -A(122)+A(133)
      Vdot(62) = A(149)+A(154)+A(169)-A(179)-A(180)-A(181)+A(182)+0.5
     &          *A(186)+A(314)
      Vdot(63) = A(158)-A(184)-A(185)-A(186)-A(187)-A(188)
      Vdot(64) = A(208)+0.5*A(209)-A(227)-A(228)+A(236)+A(237)+A(238)
     &          +A(239)+A(240)
      Vdot(65) = A(191)+A(202)-A(203)-A(204)-2*A(205)-A(206)
      Vdot(66) = 0.45*A(108)+0.9*A(136)+A(141)+A(143)+A(144)+A(145)
     &          +A(153)-A(178)+A(189)+A(190)+A(192)+A(193)+A(194)
     &          +A(195)+A(196)+A(197)+A(198)+A(199)+0.5*A(200)+A(203)
     &          +2*A(205)+A(206)+0.7*A(319)+0.5*A(320)+0.7*A(321)
      Vdot(67) = -A(6)-A(13)+A(15)+A(17)-A(20)-A(143)-A(209)
      Vdot(68) = 0.5*A(209)+A(212)+A(218)-A(229)-A(230)+A(241)+A(243)
     &          +0.14*A(310)+A(317)
      Vdot(69) = A(290)+A(305)-A(312)-A(313)-A(314)-A(315)
      Vdot(70) = A(236)+A(244)-A(245)-A(246)-2*A(247)-A(248)
      Vdot(71) = A(52)-A(61)-A(62)-2*A(63)-2*A(64)-A(65)-A(66)-A(67)
     &          +A(190)+A(280)+A(282)
      Vdot(72) = -A(149)-A(150)+A(161)+A(173)+A(184)+A(288)-A(293)
     &          +A(313)
      Vdot(73) = A(53)+A(55)-A(68)-A(69)-A(70)-2*A(71)-2*A(72)-A(73)
     &          -A(74)-A(75)+A(92)+0.08*A(195)
      Vdot(74) = -A(212)-A(213)-A(214)+A(224)+A(226)+A(233)-A(289)
     &          +A(295)+A(298)-A(299)
      Vdot(75) = A(28)-A(43)-A(44)+A(85)+A(89)+A(107)+A(139)-A(145)
     &          +0.5*A(186)+A(228)+A(270)-A(324)+2*A(325)-A(328)+2
     &          *A(329)
      Vdot(76) = -A(53)-A(54)-A(55)-A(191)-A(236)
      Vdot(77) = A(106)+0.55*A(108)+A(110)+A(111)+A(112)-A(135)-A(136)
     &          -A(137)
      Vdot(78) = A(58)+A(62)+A(70)+A(77)-A(96)-A(97)-A(98)-A(196)
     &          -A(239)
      Vdot(79) = A(61)+A(63)+2*A(64)+A(65)+A(67)+A(68)+A(71)+A(72)
     &          +A(74)+0.5*A(75)-A(88)-A(89)-A(90)+A(93)-A(193)+0.92
     &          *A(195)-A(238)+A(245)+2*A(247)+A(248)
      Vdot(80) = -A(288)+A(289)+A(293)+A(294)-A(295)+A(304)+A(312)
     &          -A(316)-A(317)-A(318)
      Vdot(81) = A(253)-A(254)-A(255)-A(256)-A(257)+0.05*A(262)+A(272)
     &          -A(290)-A(296)-A(301)
      Vdot(82) = -A(76)-A(77)-2*A(78)-A(79)-A(80)-A(81)+A(82)+A(88)
     &          +A(89)+A(193)+A(203)+2*A(205)+A(206)+A(238)
      Vdot(83) = A(156)+A(160)+A(163)-A(165)-A(166)-A(167)-A(168)
     &          -A(169)-A(170)-A(171)-A(172)+A(177)-A(292)+A(302)
     &          +A(307)
      Vdot(84) = A(118)+A(119)+A(121)-A(123)-A(124)-A(125)+0.1*A(136)
      Vdot(85) = A(123)+A(124)-A(126)-A(127)-A(128)-A(129)-A(130)
     &          +A(134)+0.95*A(138)+A(139)
      Vdot(86) = A(105)+A(107)+0.45*A(108)-A(113)-A(114)-2*A(115)
     &          -A(116)-A(117)+A(132)+0.9*A(136)
      Vdot(87) = -A(105)-A(106)-A(107)-A(108)-A(109)-A(110)-A(111)
     &          -A(112)
      Vdot(88) = A(54)+A(57)+A(59)+2*A(60)+A(66)+A(67)+2*A(69)+2*A(72)
     &          +A(73)+2*A(75)+A(79)+A(80)+A(83)-A(84)-A(85)-A(86)
     &          -A(87)+A(91)+A(97)+A(98)+A(113)+2*A(115)+2*A(116)
     &          +A(133)-A(192)+A(194)+A(196)+A(199)+0.5*A(200)+A(201)
     &          +A(206)-A(237)-A(241)+A(242)+A(243)+A(248)+A(276)
     &          +A(283)+A(284)+2*A(286)+2*A(287)
      Vdot(89) = A(112)-A(249)-A(250)-A(251)-A(252)-2*A(253)+A(254)
     &          +A(255)+A(256)+2*A(257)+A(258)+A(260)+0.5*A(262)
     &          +A(263)+A(267)+2*A(268)+A(269)+A(270)+A(271)+A(273)
     &          +A(275)+A(276)+0.3*A(277)+A(278)+0.5*A(279)+A(280)+0.3
     &          *A(281)+A(282)+0.5*A(283)+A(284)+2*A(286)+A(287)
     &          +A(290)+A(291)+A(296)+A(297)+A(298)-A(299)-A(300)
     &          +A(306)+A(307)+A(308)+0.14*A(310)+A(311)+A(312)+A(313)
     &          +A(314)+A(315)+0.3*A(319)+0.5*A(320)+0.3*A(321)+A(322)
     &          +A(323)
      Vdot(90) = A(1)+A(2)+A(3)-A(6)-A(7)-A(8)-A(9)+A(14)+A(19)-A(21)
     &          -A(26)-A(27)+A(32)-A(33)+A(38)-A(99)-A(151)-A(167)
     &          -A(168)-A(179)-A(185)-A(213)-A(216)-A(229)-A(232)
     &          -A(254)-A(258)-A(316)
      Vdot(91) = A(21)+A(23)+A(24)+2*A(25)-A(26)-A(27)-A(28)-A(29)
     &          -A(30)-A(31)-A(32)+A(33)+A(34)+A(35)+2*A(36)+A(38)
     &          +A(39)+A(40)+A(41)+A(44)+A(45)+A(46)+A(47)+A(57)+A(61)
     &          +A(68)+A(69)+A(76)-A(81)+A(82)+A(83)+A(113)-A(117)
     &          -A(119)-A(120)+A(121)-A(124)-A(125)-A(128)-A(129)
     &          +A(134)-A(146)-A(147)+A(148)+A(157)-A(158)+A(159)
     &          +A(160)+A(171)+A(182)+A(183)+A(187)+A(199)+A(203)
     &          -A(210)+A(211)+A(219)-A(220)+A(221)+A(231)+A(234)
     &          +A(245)-A(251)+A(252)+A(260)-A(261)+A(265)+2*A(272)
     &          +A(273)+A(274)+A(284)
      Vdot(92) = -A(111)-A(137)+A(207)+A(211)+A(213)-A(215)-A(216)
     &          -A(217)-A(218)-A(219)-A(220)-A(221)-A(222)-2*A(223)-2
     &          *A(224)-A(225)+A(226)+A(229)+A(234)-A(241)-A(242)
     &          -A(243)+A(292)+A(297)-A(300)-A(301)-A(302)-A(303)
     &          -A(304)-A(308)-A(309)+A(316)
      Vdot(93) = -A(21)-A(22)-A(23)-A(24)-A(25)+A(26)+A(32)+A(37)
     &          +A(42)-A(57)-A(61)-A(68)-A(69)-A(76)-A(113)+A(119)
     &          -A(121)-A(122)+A(124)+A(125)+A(128)-A(157)-A(171)
     &          -A(203)-A(219)-A(245)-A(260)-A(265)-A(284)
      Vdot(94) = -A(2)+A(7)-A(8)+A(9)-A(10)-A(16)-A(18)-A(19)-A(24)
     &          -A(30)-A(54)-A(101)-A(118)-A(123)-A(127)-A(140)-A(155)
     &          -A(156)-A(170)+A(172)-A(174)-A(207)-A(222)+A(225)
     &          -A(249)+A(263)
      Vdot(95) = -A(25)+A(27)+A(30)-A(31)-A(33)-A(34)-A(35)-2*A(36)
     &          -A(37)-A(38)+A(39)+A(40)+A(43)+A(48)-A(55)-A(85)-A(89)
     &          -A(107)-A(139)+A(145)-A(148)-A(159)-A(160)+A(184)
     &          +A(185)+0.5*A(186)+A(188)-A(211)-A(221)-A(228)+A(232)
     &          +A(233)+A(235)-A(252)-A(256)-A(270)+A(275)
      Vdot(96) = 0.55*A(108)-A(110)+A(140)+A(142)+A(148)-A(151)-A(152)
     &          -A(153)-A(154)-A(155)-A(156)-A(157)-A(158)-A(159)
     &          -A(160)-2*A(161)-2*A(162)-2*A(163)-2*A(164)-A(165)+2
     &          *A(166)+A(167)+A(171)+A(172)+A(174)+2*A(175)+A(177)
     &          +A(179)+A(180)+A(185)+0.5*A(186)+A(187)+0.5*A(200)
     &          -A(201)+A(291)+A(292)-A(302)-A(303)-A(304)-A(305)
     &          -A(306)-A(307)
      Vdot(97) = -A(109)+A(111)+A(137)-A(207)-A(208)-A(209)-A(210)
     &          -A(211)+A(212)+A(213)+2*A(214)-A(215)+A(216)+A(217)
     &          +A(219)+A(221)+A(222)+2*A(223)+A(225)-A(226)+A(227)
     &          +A(228)+A(230)+A(231)+A(232)-A(233)+A(235)-A(236)
     &          -A(237)-A(238)-A(239)-A(240)+A(242)+A(245)+2*A(247)
     &          +A(248)+A(288)+A(289)-A(292)-A(293)-A(294)-A(295)
     &          -A(296)-A(297)-A(298)+A(299)+A(300)+A(301)+A(302)
     &          +A(303)+A(308)+A(309)+0.84*A(310)+A(311)-A(312)+A(318)
     &          +A(322)
      Vdot(98) = 2*A(4)+A(5)+A(6)-A(10)-A(11)-A(12)-A(13)-2*A(14)-2
     &          *A(15)+A(16)+2*A(20)-A(22)+A(23)-A(28)-A(34)+A(35)
     &          -A(41)+A(42)-A(43)+A(44)-A(46)+A(48)-A(49)-A(50)-A(51)
     &          -A(52)-A(53)+0.13*A(54)-A(83)-A(84)-A(88)-A(91)-A(92)
     &          -A(93)-A(94)-A(95)-A(96)+A(98)-A(100)-A(105)-A(106)
     &          -A(132)+A(133)-A(135)-A(138)+A(142)-A(149)-A(152)
     &          -A(153)-A(169)-A(178)+A(179)-A(180)+A(181)-A(182)
     &          -A(186)+A(196)-A(202)+0.5*A(209)-A(212)-A(217)-A(227)
     &          +A(229)+A(230)-A(244)-A(255)-A(264)-A(269)+A(271)
     &          -A(277)-A(279)-A(281)-A(310)-A(314)-A(317)
      Vdot(99) = -A(108)+A(110)-A(136)-A(140)-A(141)-A(142)-A(143)
     &          -A(144)-A(145)-A(146)-A(147)-A(148)+A(149)+2*A(150)
     &          +A(151)+A(152)+A(155)+A(157)+A(159)+2*A(162)+A(163)
     &          -A(166)+A(174)+2*A(176)+A(178)+A(181)+A(183)-A(184)
     &          +A(188)-A(189)-A(190)-A(191)-A(192)-A(193)-A(194)
     &          -A(195)-A(196)-A(197)-A(198)-A(199)-A(200)+A(201)
     &          -A(288)-A(289)-A(290)-A(291)+A(293)+A(294)+A(295)
     &          +A(303)+A(306)-A(313)+A(315)+A(316)+A(317)+A(318)
     &          -A(319)-A(320)-A(321)+A(323)
      Vdot(100) = A(51)-A(57)-A(58)-2*A(59)-2*A(60)-A(65)-A(66)-A(67)
     &           -A(73)-A(74)-A(75)+A(76)+2*A(78)-A(80)+A(90)+A(95)
     &           +A(96)+A(109)-A(116)+A(125)+A(126)+0.95*A(135)+0.1
     &           *A(136)+A(189)+A(198)-A(200)-A(201)-A(206)+A(239)
     &           -A(240)-A(242)-A(243)-A(248)+A(278)-A(283)-A(287)
      Vdot(101) = -A(112)+A(249)+A(252)+A(254)-A(258)-A(259)-A(260)
     &           -A(261)-2*A(262)-A(263)+A(265)+A(274)+A(276)-A(283)
     &           -A(291)-A(297)+A(300)-A(305)-A(306)-A(307)-A(308)
     &           -A(309)
      Vdot(102) = A(5)+A(6)+A(10)-A(11)+A(12)+A(13)-A(16)-2*A(17)
     &           -A(23)-A(29)+A(34)-A(35)+A(45)+A(47)+A(50)+0.13*A(54)
     &           +A(57)-A(58)+2*A(60)+A(61)-A(62)+2*A(64)+2*A(67)
     &           +A(68)+A(69)-A(70)+2*A(72)+2*A(75)-A(77)+A(79)+A(84)
     &           +A(85)+2*A(86)+A(90)+A(91)+A(93)+A(94)+A(98)+A(102)
     &           +A(106)-A(114)+A(116)-A(131)+0.05*A(138)-A(141)
     &           -A(142)+A(143)+A(144)+A(152)-A(154)+A(192)+A(194)
     &           +0.92*A(195)+A(197)+0.5*A(200)+A(201)-A(204)+A(206)
     &           -A(208)+0.5*A(209)+A(217)-A(218)+A(237)+A(241)+A(242)
     &           -A(246)+A(248)-A(250)-A(259)+A(283)-A(285)+A(287)+2
     &           *A(322)+2*A(323)
      RETURN
      END

C End of Fun_g function                                              
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C                                                                  
C The ODE Jacobian of Chemical Model File                          
C                                                                  
C Generated by KPP-2.2.4 for Mistra symbolic chemistry Kinetics PreProcessor
C       (http://www.cs.vt.edu/~asandu/Software/Kpp)                
C KPP is distributed under GPL, the general public licence         
C       (http://www.gnu.org/copyleft/gpl.html)                     
C (C) 1995-1997, V. Damian & A. Sandu, CGRER, Univ. Iowa           
C (C) 1997-2005, A. Sandu, Michigan Tech, Virginia Tech            
C     With important contributions from:                           
C        M. Damian, Villanova University, USA                      
C        R. Sander, Max-Planck Institute for Chemistry, Mainz, Germany
C                                                                  
C File                 : gas_Jacobian.f                            
C Time                 : Wed Jul 14 18:26:57 2021                  
C Working directory    : /local/josue/Mistra_2019/src/mech         
C Equation file        : gas.k                                     
C Output root filename : gas                                       
C                                                                  
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C                                                                  
C Jac_SP_g - the Jacobian of Variables in sparse matrix representation
C   Arguments :                                                    
C      V         - Concentrations of variable species (local)      
C      F         - Concentrations of fixed species (local)         
C      RCT       - Rate constants (local)                          
C      JVS       - sparse Jacobian of variables                    
C                                                                  
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      SUBROUTINE Jac_SP_g ( V, F, RCT, JVS )

      IMPLICIT NONE
      INCLUDE 'gas_Parameters.h'

C V - Concentrations of variable species (local)                   
      REAL*8 V(NVAR)
C F - Concentrations of fixed species (local)                      
      REAL*8 F(NFIX)
C RCT - Rate constants (local)                                     
      REAL*8 RCT(NREACT)
C JVS - sparse Jacobian of variables                               
      REAL*8 JVS(LU_NONZERO)


C Local variables                                                  
C B - Temporary array                                              
      REAL*8 B(576)

C B(1) = dA(1)/dV(38)                                              
      B(1) = RCT(1)*F(1)
C B(3) = dA(2)/dV(38)                                              
      B(3) = RCT(2)*V(94)
C B(4) = dA(2)/dV(94)                                              
      B(4) = RCT(2)*V(38)
C B(5) = dA(3)/dV(38)                                              
      B(5) = RCT(3)*F(3)
C B(7) = dA(4)/dV(38)                                              
      B(7) = RCT(4)*F(2)
C B(9) = dA(5)/dV(38)                                              
      B(9) = RCT(5)*V(50)
C B(10) = dA(5)/dV(50)                                             
      B(10) = RCT(5)*V(38)
C B(11) = dA(6)/dV(67)                                             
      B(11) = RCT(6)*V(90)
C B(12) = dA(6)/dV(90)                                             
      B(12) = RCT(6)*V(67)
C B(13) = dA(7)/dV(90)                                             
      B(13) = RCT(7)*F(1)*F(1)
C B(15) = dA(8)/dV(90)                                             
      B(15) = RCT(8)*V(94)
C B(16) = dA(8)/dV(94)                                             
      B(16) = RCT(8)*V(90)
C B(17) = dA(9)/dV(90)                                             
      B(17) = RCT(9)*F(1)*F(3)
C B(20) = dA(10)/dV(94)                                            
      B(20) = RCT(10)*V(98)
C B(21) = dA(10)/dV(98)                                            
      B(21) = RCT(10)*V(94)
C B(22) = dA(11)/dV(98)                                            
      B(22) = RCT(11)*V(102)
C B(23) = dA(11)/dV(102)                                           
      B(23) = RCT(11)*V(98)
C B(24) = dA(12)/dV(50)                                            
      B(24) = RCT(12)*V(98)
C B(25) = dA(12)/dV(98)                                            
      B(25) = RCT(12)*V(50)
C B(26) = dA(13)/dV(67)                                            
      B(26) = RCT(13)*V(98)
C B(27) = dA(13)/dV(98)                                            
      B(27) = RCT(13)*V(67)
C B(28) = dA(14)/dV(98)                                            
      B(28) = RCT(14)*2*V(98)
C B(29) = dA(15)/dV(98)                                            
      B(29) = RCT(15)*2*V(98)
C B(30) = dA(16)/dV(94)                                            
      B(30) = RCT(16)*V(102)
C B(31) = dA(16)/dV(102)                                           
      B(31) = RCT(16)*V(94)
C B(32) = dA(17)/dV(102)                                           
      B(32) = RCT(17)*2*V(102)
C B(33) = dA(18)/dV(94)                                            
      B(33) = RCT(18)
C B(34) = dA(19)/dV(94)                                            
      B(34) = RCT(19)
C B(35) = dA(20)/dV(67)                                            
      B(35) = RCT(20)
C B(36) = dA(21)/dV(90)                                            
      B(36) = RCT(21)*V(93)
C B(37) = dA(21)/dV(93)                                            
      B(37) = RCT(21)*V(90)
C B(38) = dA(22)/dV(93)                                            
      B(38) = RCT(22)*V(98)
C B(39) = dA(22)/dV(98)                                            
      B(39) = RCT(22)*V(93)
C B(40) = dA(23)/dV(93)                                            
      B(40) = RCT(23)*V(102)
C B(41) = dA(23)/dV(102)                                           
      B(41) = RCT(23)*V(93)
C B(42) = dA(24)/dV(93)                                            
      B(42) = RCT(24)*V(94)
C B(43) = dA(24)/dV(94)                                            
      B(43) = RCT(24)*V(93)
C B(44) = dA(25)/dV(93)                                            
      B(44) = RCT(25)*V(95)
C B(45) = dA(25)/dV(95)                                            
      B(45) = RCT(25)*V(93)
C B(46) = dA(26)/dV(90)                                            
      B(46) = RCT(26)*V(91)
C B(47) = dA(26)/dV(91)                                            
      B(47) = RCT(26)*V(90)
C B(48) = dA(27)/dV(90)                                            
      B(48) = RCT(27)*V(91)
C B(49) = dA(27)/dV(91)                                            
      B(49) = RCT(27)*V(90)
C B(50) = dA(28)/dV(91)                                            
      B(50) = RCT(28)*V(98)
C B(51) = dA(28)/dV(98)                                            
      B(51) = RCT(28)*V(91)
C B(52) = dA(29)/dV(91)                                            
      B(52) = RCT(29)*V(102)
C B(53) = dA(29)/dV(102)                                           
      B(53) = RCT(29)*V(91)
C B(54) = dA(30)/dV(91)                                            
      B(54) = RCT(30)*V(94)
C B(55) = dA(30)/dV(94)                                            
      B(55) = RCT(30)*V(91)
C B(56) = dA(31)/dV(91)                                            
      B(56) = RCT(31)*V(95)
C B(57) = dA(31)/dV(95)                                            
      B(57) = RCT(31)*V(91)
C B(58) = dA(32)/dV(91)                                            
      B(58) = RCT(32)
C B(59) = dA(33)/dV(90)                                            
      B(59) = RCT(33)*V(95)
C B(60) = dA(33)/dV(95)                                            
      B(60) = RCT(33)*V(90)
C B(61) = dA(34)/dV(95)                                            
      B(61) = RCT(34)*V(98)
C B(62) = dA(34)/dV(98)                                            
      B(62) = RCT(34)*V(95)
C B(63) = dA(35)/dV(95)                                            
      B(63) = RCT(35)*V(102)
C B(64) = dA(35)/dV(102)                                           
      B(64) = RCT(35)*V(95)
C B(65) = dA(36)/dV(95)                                            
      B(65) = RCT(36)*2*V(95)
C B(66) = dA(37)/dV(95)                                            
      B(66) = RCT(37)
C B(67) = dA(38)/dV(95)                                            
      B(67) = RCT(38)
C B(68) = dA(39)/dV(32)                                            
      B(68) = RCT(39)
C B(69) = dA(40)/dV(32)                                            
      B(69) = RCT(40)
C B(70) = dA(41)/dV(28)                                            
      B(70) = RCT(41)*V(98)
C B(71) = dA(41)/dV(98)                                            
      B(71) = RCT(41)*V(28)
C B(72) = dA(42)/dV(28)                                            
      B(72) = RCT(42)
C B(73) = dA(43)/dV(75)                                            
      B(73) = RCT(43)*V(98)
C B(74) = dA(43)/dV(98)                                            
      B(74) = RCT(43)*V(75)
C B(75) = dA(44)/dV(75)                                            
      B(75) = RCT(44)
C B(76) = dA(45)/dV(41)                                            
      B(76) = RCT(45)
C B(77) = dA(46)/dV(41)                                            
      B(77) = RCT(46)*V(98)
C B(78) = dA(46)/dV(98)                                            
      B(78) = RCT(46)*V(41)
C B(79) = dA(47)/dV(41)                                            
      B(79) = RCT(47)
C B(80) = dA(48)/dV(41)                                            
      B(80) = RCT(48)
C B(81) = dA(49)/dV(24)                                            
      B(81) = RCT(49)*V(98)
C B(82) = dA(49)/dV(98)                                            
      B(82) = RCT(49)*V(24)
C B(83) = dA(50)/dV(49)                                            
      B(83) = RCT(50)*V(98)
C B(84) = dA(50)/dV(98)                                            
      B(84) = RCT(50)*V(49)
C B(85) = dA(51)/dV(34)                                            
      B(85) = RCT(51)*V(98)
C B(86) = dA(51)/dV(98)                                            
      B(86) = RCT(51)*V(34)
C B(87) = dA(52)/dV(35)                                            
      B(87) = RCT(52)*V(98)
C B(88) = dA(52)/dV(98)                                            
      B(88) = RCT(52)*V(35)
C B(89) = dA(53)/dV(76)                                            
      B(89) = RCT(53)*V(98)
C B(90) = dA(53)/dV(98)                                            
      B(90) = RCT(53)*V(76)
C B(91) = dA(54)/dV(76)                                            
      B(91) = RCT(54)*V(94)
C B(92) = dA(54)/dV(94)                                            
      B(92) = RCT(54)*V(76)
C B(93) = dA(55)/dV(76)                                            
      B(93) = RCT(55)*V(95)
C B(94) = dA(55)/dV(95)                                            
      B(94) = RCT(55)*V(76)
C B(95) = dA(56)/dV(23)                                            
      B(95) = RCT(56)*F(2)
C B(97) = dA(57)/dV(93)                                            
      B(97) = RCT(57)*V(100)
C B(98) = dA(57)/dV(100)                                           
      B(98) = RCT(57)*V(93)
C B(99) = dA(58)/dV(100)                                           
      B(99) = RCT(58)*V(102)
C B(100) = dA(58)/dV(102)                                          
      B(100) = RCT(58)*V(100)
C B(101) = dA(59)/dV(100)                                          
      B(101) = RCT(59)*2*V(100)
C B(102) = dA(60)/dV(100)                                          
      B(102) = RCT(60)*2*V(100)
C B(103) = dA(61)/dV(71)                                           
      B(103) = RCT(61)*V(93)
C B(104) = dA(61)/dV(93)                                           
      B(104) = RCT(61)*V(71)
C B(105) = dA(62)/dV(71)                                           
      B(105) = RCT(62)*V(102)
C B(106) = dA(62)/dV(102)                                          
      B(106) = RCT(62)*V(71)
C B(107) = dA(63)/dV(71)                                           
      B(107) = RCT(63)*2*V(71)
C B(108) = dA(64)/dV(71)                                           
      B(108) = RCT(64)*2*V(71)
C B(109) = dA(65)/dV(71)                                           
      B(109) = RCT(65)*V(100)
C B(110) = dA(65)/dV(100)                                          
      B(110) = RCT(65)*V(71)
C B(111) = dA(66)/dV(71)                                           
      B(111) = RCT(66)*V(100)
C B(112) = dA(66)/dV(100)                                          
      B(112) = RCT(66)*V(71)
C B(113) = dA(67)/dV(71)                                           
      B(113) = RCT(67)*V(100)
C B(114) = dA(67)/dV(100)                                          
      B(114) = RCT(67)*V(71)
C B(115) = dA(68)/dV(73)                                           
      B(115) = RCT(68)*V(93)
C B(116) = dA(68)/dV(93)                                           
      B(116) = RCT(68)*V(73)
C B(117) = dA(69)/dV(73)                                           
      B(117) = RCT(69)*V(93)
C B(118) = dA(69)/dV(93)                                           
      B(118) = RCT(69)*V(73)
C B(119) = dA(70)/dV(73)                                           
      B(119) = RCT(70)*V(102)
C B(120) = dA(70)/dV(102)                                          
      B(120) = RCT(70)*V(73)
C B(121) = dA(71)/dV(73)                                           
      B(121) = RCT(71)*2*V(73)
C B(122) = dA(72)/dV(73)                                           
      B(122) = RCT(72)*2*V(73)
C B(123) = dA(73)/dV(73)                                           
      B(123) = RCT(73)*V(100)
C B(124) = dA(73)/dV(100)                                          
      B(124) = RCT(73)*V(73)
C B(125) = dA(74)/dV(73)                                           
      B(125) = RCT(74)*V(100)
C B(126) = dA(74)/dV(100)                                          
      B(126) = RCT(74)*V(73)
C B(127) = dA(75)/dV(73)                                           
      B(127) = RCT(75)*V(100)
C B(128) = dA(75)/dV(100)                                          
      B(128) = RCT(75)*V(73)
C B(129) = dA(76)/dV(82)                                           
      B(129) = RCT(76)*V(93)
C B(130) = dA(76)/dV(93)                                           
      B(130) = RCT(76)*V(82)
C B(131) = dA(77)/dV(82)                                           
      B(131) = RCT(77)*V(102)
C B(132) = dA(77)/dV(102)                                          
      B(132) = RCT(77)*V(82)
C B(133) = dA(78)/dV(82)                                           
      B(133) = RCT(78)*2*V(82)
C B(134) = dA(79)/dV(82)                                           
      B(134) = RCT(79)*V(100)
C B(135) = dA(79)/dV(100)                                          
      B(135) = RCT(79)*V(82)
C B(136) = dA(80)/dV(82)                                           
      B(136) = RCT(80)*V(100)
C B(137) = dA(80)/dV(100)                                          
      B(137) = RCT(80)*V(82)
C B(138) = dA(81)/dV(82)                                           
      B(138) = RCT(81)*V(91)
C B(139) = dA(81)/dV(91)                                           
      B(139) = RCT(81)*V(82)
C B(140) = dA(82)/dV(57)                                           
      B(140) = RCT(82)
C B(141) = dA(83)/dV(57)                                           
      B(141) = RCT(83)*V(98)
C B(142) = dA(83)/dV(98)                                           
      B(142) = RCT(83)*V(57)
C B(143) = dA(84)/dV(88)                                           
      B(143) = RCT(84)*V(98)
C B(144) = dA(84)/dV(98)                                           
      B(144) = RCT(84)*V(88)
C B(145) = dA(85)/dV(88)                                           
      B(145) = RCT(85)*V(95)
C B(146) = dA(85)/dV(95)                                           
      B(146) = RCT(85)*V(88)
C B(147) = dA(86)/dV(88)                                           
      B(147) = RCT(86)
C B(148) = dA(87)/dV(88)                                           
      B(148) = RCT(87)
C B(149) = dA(88)/dV(79)                                           
      B(149) = RCT(88)*V(98)
C B(150) = dA(88)/dV(98)                                           
      B(150) = RCT(88)*V(79)
C B(151) = dA(89)/dV(79)                                           
      B(151) = RCT(89)*V(95)
C B(152) = dA(89)/dV(95)                                           
      B(152) = RCT(89)*V(79)
C B(153) = dA(90)/dV(79)                                           
      B(153) = RCT(90)
C B(154) = dA(91)/dV(56)                                           
      B(154) = RCT(91)*V(98)
C B(155) = dA(91)/dV(98)                                           
      B(155) = RCT(91)*V(56)
C B(156) = dA(92)/dV(60)                                           
      B(156) = RCT(92)*V(98)
C B(157) = dA(92)/dV(98)                                           
      B(157) = RCT(92)*V(60)
C B(158) = dA(93)/dV(60)                                           
      B(158) = RCT(93)*V(98)
C B(159) = dA(93)/dV(98)                                           
      B(159) = RCT(93)*V(60)
C B(160) = dA(94)/dV(54)                                           
      B(160) = RCT(94)*V(98)
C B(161) = dA(94)/dV(98)                                           
      B(161) = RCT(94)*V(54)
C B(162) = dA(95)/dV(48)                                           
      B(162) = RCT(95)*V(98)
C B(163) = dA(95)/dV(98)                                           
      B(163) = RCT(95)*V(48)
C B(164) = dA(96)/dV(78)                                           
      B(164) = RCT(96)*V(98)
C B(165) = dA(96)/dV(98)                                           
      B(165) = RCT(96)*V(78)
C B(166) = dA(97)/dV(78)                                           
      B(166) = RCT(97)*V(98)
C B(167) = dA(97)/dV(98)                                           
      B(167) = RCT(97)*V(78)
C B(168) = dA(98)/dV(78)                                           
      B(168) = RCT(98)
C B(169) = dA(99)/dV(52)                                           
      B(169) = RCT(99)*V(90)
C B(170) = dA(99)/dV(90)                                           
      B(170) = RCT(99)*V(52)
C B(171) = dA(100)/dV(52)                                          
      B(171) = RCT(100)*V(98)
C B(172) = dA(100)/dV(98)                                          
      B(172) = RCT(100)*V(52)
C B(173) = dA(101)/dV(52)                                          
      B(173) = RCT(101)*V(94)
C B(174) = dA(101)/dV(94)                                          
      B(174) = RCT(101)*V(52)
C B(175) = dA(102)/dV(25)                                          
      B(175) = RCT(102)*F(1)
C B(177) = dA(103)/dV(26)                                          
      B(177) = RCT(103)
C B(178) = dA(104)/dV(24)                                          
      B(178) = RCT(104)*V(26)
C B(179) = dA(104)/dV(26)                                          
      B(179) = RCT(104)*V(24)
C B(180) = dA(105)/dV(87)                                          
      B(180) = RCT(105)*V(98)
C B(181) = dA(105)/dV(98)                                          
      B(181) = RCT(105)*V(87)
C B(182) = dA(106)/dV(87)                                          
      B(182) = RCT(106)*V(98)
C B(183) = dA(106)/dV(98)                                          
      B(183) = RCT(106)*V(87)
C B(184) = dA(107)/dV(87)                                          
      B(184) = RCT(107)*V(95)
C B(185) = dA(107)/dV(95)                                          
      B(185) = RCT(107)*V(87)
C B(186) = dA(108)/dV(87)                                          
      B(186) = RCT(108)*V(99)
C B(187) = dA(108)/dV(99)                                          
      B(187) = RCT(108)*V(87)
C B(188) = dA(109)/dV(87)                                          
      B(188) = RCT(109)*V(97)
C B(189) = dA(109)/dV(97)                                          
      B(189) = RCT(109)*V(87)
C B(190) = dA(110)/dV(87)                                          
      B(190) = RCT(110)*V(96)
C B(191) = dA(110)/dV(96)                                          
      B(191) = RCT(110)*V(87)
C B(192) = dA(111)/dV(87)                                          
      B(192) = RCT(111)*V(92)
C B(193) = dA(111)/dV(92)                                          
      B(193) = RCT(111)*V(87)
C B(194) = dA(112)/dV(87)                                          
      B(194) = RCT(112)*V(101)
C B(195) = dA(112)/dV(101)                                         
      B(195) = RCT(112)*V(87)
C B(196) = dA(113)/dV(86)                                          
      B(196) = RCT(113)*V(93)
C B(197) = dA(113)/dV(93)                                          
      B(197) = RCT(113)*V(86)
C B(198) = dA(114)/dV(86)                                          
      B(198) = RCT(114)*V(102)
C B(199) = dA(114)/dV(102)                                         
      B(199) = RCT(114)*V(86)
C B(200) = dA(115)/dV(86)                                          
      B(200) = RCT(115)*2*V(86)
C B(201) = dA(116)/dV(86)                                          
      B(201) = RCT(116)*V(100)
C B(202) = dA(116)/dV(100)                                         
      B(202) = RCT(116)*V(86)
C B(203) = dA(117)/dV(86)                                          
      B(203) = RCT(117)*V(91)
C B(204) = dA(117)/dV(91)                                          
      B(204) = RCT(117)*V(86)
C B(205) = dA(118)/dV(61)                                          
      B(205) = RCT(118)*V(94)
C B(206) = dA(118)/dV(94)                                          
      B(206) = RCT(118)*V(61)
C B(207) = dA(119)/dV(61)                                          
      B(207) = RCT(119)*V(91)
C B(208) = dA(119)/dV(91)                                          
      B(208) = RCT(119)*V(61)
C B(209) = dA(120)/dV(61)                                          
      B(209) = RCT(120)*V(91)
C B(210) = dA(120)/dV(91)                                          
      B(210) = RCT(120)*V(61)
C B(211) = dA(121)/dV(61)                                          
      B(211) = RCT(121)*V(93)
C B(212) = dA(121)/dV(93)                                          
      B(212) = RCT(121)*V(61)
C B(213) = dA(122)/dV(61)                                          
      B(213) = RCT(122)*V(93)
C B(214) = dA(122)/dV(93)                                          
      B(214) = RCT(122)*V(61)
C B(215) = dA(123)/dV(84)                                          
      B(215) = RCT(123)*V(94)
C B(216) = dA(123)/dV(94)                                          
      B(216) = RCT(123)*V(84)
C B(217) = dA(124)/dV(84)                                          
      B(217) = RCT(124)*V(91)
C B(218) = dA(124)/dV(91)                                          
      B(218) = RCT(124)*V(84)
C B(219) = dA(125)/dV(84)                                          
      B(219) = RCT(125)*V(91)
C B(220) = dA(125)/dV(91)                                          
      B(220) = RCT(125)*V(84)
C B(221) = dA(126)/dV(85)                                          
      B(221) = RCT(126)
C B(222) = dA(127)/dV(85)                                          
      B(222) = RCT(127)*V(94)
C B(223) = dA(127)/dV(94)                                          
      B(223) = RCT(127)*V(85)
C B(224) = dA(128)/dV(85)                                          
      B(224) = RCT(128)*V(91)
C B(225) = dA(128)/dV(91)                                          
      B(225) = RCT(128)*V(85)
C B(226) = dA(129)/dV(85)                                          
      B(226) = RCT(129)*V(91)
C B(227) = dA(129)/dV(91)                                          
      B(227) = RCT(129)*V(85)
C B(228) = dA(130)/dV(85)                                          
      B(228) = RCT(130)*V(93)
C B(229) = dA(130)/dV(93)                                          
      B(229) = RCT(130)*V(85)
C B(230) = dA(131)/dV(27)                                          
      B(230) = RCT(131)*V(102)
C B(231) = dA(131)/dV(102)                                         
      B(231) = RCT(131)*V(27)
C B(232) = dA(132)/dV(39)                                          
      B(232) = RCT(132)*V(98)
C B(233) = dA(132)/dV(98)                                          
      B(233) = RCT(132)*V(39)
C B(234) = dA(133)/dV(39)                                          
      B(234) = RCT(133)
C B(235) = dA(134)/dV(33)                                          
      B(235) = RCT(134)
C B(236) = dA(135)/dV(77)                                          
      B(236) = RCT(135)*V(98)
C B(237) = dA(135)/dV(98)                                          
      B(237) = RCT(135)*V(77)
C B(238) = dA(136)/dV(77)                                          
      B(238) = RCT(136)*V(99)
C B(239) = dA(136)/dV(99)                                          
      B(239) = RCT(136)*V(77)
C B(240) = dA(137)/dV(77)                                          
      B(240) = RCT(137)*V(92)
C B(241) = dA(137)/dV(92)                                          
      B(241) = RCT(137)*V(77)
C B(242) = dA(138)/dV(42)                                          
      B(242) = RCT(138)*V(98)
C B(243) = dA(138)/dV(98)                                          
      B(243) = RCT(138)*V(42)
C B(244) = dA(139)/dV(42)                                          
      B(244) = RCT(139)*V(95)
C B(245) = dA(139)/dV(95)                                          
      B(245) = RCT(139)*V(42)
C B(246) = dA(140)/dV(94)                                          
      B(246) = RCT(140)*V(99)
C B(247) = dA(140)/dV(99)                                          
      B(247) = RCT(140)*V(94)
C B(248) = dA(141)/dV(99)                                          
      B(248) = RCT(141)*V(102)
C B(249) = dA(141)/dV(102)                                         
      B(249) = RCT(141)*V(99)
C B(250) = dA(142)/dV(99)                                          
      B(250) = RCT(142)*V(102)
C B(251) = dA(142)/dV(102)                                         
      B(251) = RCT(142)*V(99)
C B(252) = dA(143)/dV(67)                                          
      B(252) = RCT(143)*V(99)
C B(253) = dA(143)/dV(99)                                          
      B(253) = RCT(143)*V(67)
C B(254) = dA(144)/dV(50)                                          
      B(254) = RCT(144)*V(99)
C B(255) = dA(144)/dV(99)                                          
      B(255) = RCT(144)*V(50)
C B(256) = dA(145)/dV(75)                                          
      B(256) = RCT(145)*V(99)
C B(257) = dA(145)/dV(99)                                          
      B(257) = RCT(145)*V(75)
C B(258) = dA(146)/dV(91)                                          
      B(258) = RCT(146)*V(99)
C B(259) = dA(146)/dV(99)                                          
      B(259) = RCT(146)*V(91)
C B(260) = dA(147)/dV(91)                                          
      B(260) = RCT(147)*V(99)
C B(261) = dA(147)/dV(99)                                          
      B(261) = RCT(147)*V(91)
C B(262) = dA(148)/dV(95)                                          
      B(262) = RCT(148)*V(99)
C B(263) = dA(148)/dV(99)                                          
      B(263) = RCT(148)*V(95)
C B(264) = dA(149)/dV(72)                                          
      B(264) = RCT(149)*V(98)
C B(265) = dA(149)/dV(98)                                          
      B(265) = RCT(149)*V(72)
C B(266) = dA(150)/dV(72)                                          
      B(266) = RCT(150)
C B(267) = dA(151)/dV(90)                                          
      B(267) = RCT(151)*V(96)
C B(268) = dA(151)/dV(96)                                          
      B(268) = RCT(151)*V(90)
C B(269) = dA(152)/dV(96)                                          
      B(269) = RCT(152)*V(98)
C B(270) = dA(152)/dV(98)                                          
      B(270) = RCT(152)*V(96)
C B(271) = dA(153)/dV(96)                                          
      B(271) = RCT(153)*V(98)
C B(272) = dA(153)/dV(98)                                          
      B(272) = RCT(153)*V(96)
C B(273) = dA(154)/dV(96)                                          
      B(273) = RCT(154)*V(102)
C B(274) = dA(154)/dV(102)                                         
      B(274) = RCT(154)*V(96)
C B(275) = dA(155)/dV(94)                                          
      B(275) = RCT(155)*V(96)
C B(276) = dA(155)/dV(96)                                          
      B(276) = RCT(155)*V(94)
C B(277) = dA(156)/dV(94)                                          
      B(277) = RCT(156)*V(96)
C B(278) = dA(156)/dV(96)                                          
      B(278) = RCT(156)*V(94)
C B(279) = dA(157)/dV(93)                                          
      B(279) = RCT(157)*V(96)
C B(280) = dA(157)/dV(96)                                          
      B(280) = RCT(157)*V(93)
C B(281) = dA(158)/dV(91)                                          
      B(281) = RCT(158)*V(96)
C B(282) = dA(158)/dV(96)                                          
      B(282) = RCT(158)*V(91)
C B(283) = dA(159)/dV(95)                                          
      B(283) = RCT(159)*V(96)
C B(284) = dA(159)/dV(96)                                          
      B(284) = RCT(159)*V(95)
C B(285) = dA(160)/dV(95)                                          
      B(285) = RCT(160)*V(96)
C B(286) = dA(160)/dV(96)                                          
      B(286) = RCT(160)*V(95)
C B(287) = dA(161)/dV(96)                                          
      B(287) = RCT(161)*2*V(96)
C B(288) = dA(162)/dV(96)                                          
      B(288) = RCT(162)*2*V(96)
C B(289) = dA(163)/dV(96)                                          
      B(289) = RCT(163)*2*V(96)
C B(290) = dA(164)/dV(96)                                          
      B(290) = RCT(164)*2*V(96)
C B(291) = dA(165)/dV(83)                                          
      B(291) = RCT(165)*V(96)
C B(292) = dA(165)/dV(96)                                          
      B(292) = RCT(165)*V(83)
C B(293) = dA(166)/dV(83)                                          
      B(293) = RCT(166)*V(99)
C B(294) = dA(166)/dV(99)                                          
      B(294) = RCT(166)*V(83)
C B(295) = dA(167)/dV(83)                                          
      B(295) = RCT(167)*V(90)
C B(296) = dA(167)/dV(90)                                          
      B(296) = RCT(167)*V(83)
C B(297) = dA(168)/dV(83)                                          
      B(297) = RCT(168)*V(90)
C B(298) = dA(168)/dV(90)                                          
      B(298) = RCT(168)*V(83)
C B(299) = dA(169)/dV(83)                                          
      B(299) = RCT(169)*V(98)
C B(300) = dA(169)/dV(98)                                          
      B(300) = RCT(169)*V(83)
C B(301) = dA(170)/dV(83)                                          
      B(301) = RCT(170)*V(94)
C B(302) = dA(170)/dV(94)                                          
      B(302) = RCT(170)*V(83)
C B(303) = dA(171)/dV(83)                                          
      B(303) = RCT(171)*V(93)
C B(304) = dA(171)/dV(93)                                          
      B(304) = RCT(171)*V(83)
C B(305) = dA(172)/dV(83)                                          
      B(305) = RCT(172)
C B(306) = dA(173)/dV(53)                                          
      B(306) = RCT(173)*V(99)
C B(307) = dA(173)/dV(99)                                          
      B(307) = RCT(173)*V(53)
C B(308) = dA(174)/dV(53)                                          
      B(308) = RCT(174)*V(94)
C B(309) = dA(174)/dV(94)                                          
      B(309) = RCT(174)*V(53)
C B(310) = dA(175)/dV(53)                                          
      B(310) = RCT(175)
C B(311) = dA(176)/dV(53)                                          
      B(311) = RCT(176)
C B(312) = dA(177)/dV(21)                                          
      B(312) = RCT(177)
C B(313) = dA(178)/dV(66)                                          
      B(313) = RCT(178)*V(98)
C B(314) = dA(178)/dV(98)                                          
      B(314) = RCT(178)*V(66)
C B(315) = dA(179)/dV(62)                                          
      B(315) = RCT(179)*V(90)
C B(316) = dA(179)/dV(90)                                          
      B(316) = RCT(179)*V(62)
C B(317) = dA(180)/dV(62)                                          
      B(317) = RCT(180)*V(98)
C B(318) = dA(180)/dV(98)                                          
      B(318) = RCT(180)*V(62)
C B(319) = dA(181)/dV(62)                                          
      B(319) = RCT(181)
C B(320) = dA(182)/dV(40)                                          
      B(320) = RCT(182)*V(98)
C B(321) = dA(182)/dV(98)                                          
      B(321) = RCT(182)*V(40)
C B(322) = dA(183)/dV(40)                                          
      B(322) = RCT(183)
C B(323) = dA(184)/dV(63)                                          
      B(323) = RCT(184)*V(99)
C B(324) = dA(184)/dV(99)                                          
      B(324) = RCT(184)*V(63)
C B(325) = dA(185)/dV(63)                                          
      B(325) = RCT(185)*V(90)
C B(326) = dA(185)/dV(90)                                          
      B(326) = RCT(185)*V(63)
C B(327) = dA(186)/dV(63)                                          
      B(327) = RCT(186)*V(98)
C B(328) = dA(186)/dV(98)                                          
      B(328) = RCT(186)*V(63)
C B(329) = dA(187)/dV(63)                                          
      B(329) = RCT(187)
C B(330) = dA(188)/dV(63)                                          
      B(330) = RCT(188)
C B(331) = dA(189)/dV(34)                                          
      B(331) = RCT(189)*V(99)
C B(332) = dA(189)/dV(99)                                          
      B(332) = RCT(189)*V(34)
C B(333) = dA(190)/dV(35)                                          
      B(333) = RCT(190)*V(99)
C B(334) = dA(190)/dV(99)                                          
      B(334) = RCT(190)*V(35)
C B(335) = dA(191)/dV(76)                                          
      B(335) = RCT(191)*V(99)
C B(336) = dA(191)/dV(99)                                          
      B(336) = RCT(191)*V(76)
C B(337) = dA(192)/dV(88)                                          
      B(337) = RCT(192)*V(99)
C B(338) = dA(192)/dV(99)                                          
      B(338) = RCT(192)*V(88)
C B(339) = dA(193)/dV(79)                                          
      B(339) = RCT(193)*V(99)
C B(340) = dA(193)/dV(99)                                          
      B(340) = RCT(193)*V(79)
C B(341) = dA(194)/dV(56)                                          
      B(341) = RCT(194)*V(99)
C B(342) = dA(194)/dV(99)                                          
      B(342) = RCT(194)*V(56)
C B(343) = dA(195)/dV(60)                                          
      B(343) = RCT(195)*V(99)
C B(344) = dA(195)/dV(99)                                          
      B(344) = RCT(195)*V(60)
C B(345) = dA(196)/dV(78)                                          
      B(345) = RCT(196)*V(99)
C B(346) = dA(196)/dV(99)                                          
      B(346) = RCT(196)*V(78)
C B(347) = dA(197)/dV(54)                                          
      B(347) = RCT(197)*V(99)
C B(348) = dA(197)/dV(99)                                          
      B(348) = RCT(197)*V(54)
C B(349) = dA(198)/dV(48)                                          
      B(349) = RCT(198)*V(99)
C B(350) = dA(198)/dV(99)                                          
      B(350) = RCT(198)*V(48)
C B(351) = dA(199)/dV(57)                                          
      B(351) = RCT(199)*V(99)
C B(352) = dA(199)/dV(99)                                          
      B(352) = RCT(199)*V(57)
C B(353) = dA(200)/dV(99)                                          
      B(353) = RCT(200)*V(100)
C B(354) = dA(200)/dV(100)                                         
      B(354) = RCT(200)*V(99)
C B(355) = dA(201)/dV(96)                                          
      B(355) = RCT(201)*V(100)
C B(356) = dA(201)/dV(100)                                         
      B(356) = RCT(201)*V(96)
C B(357) = dA(202)/dV(37)                                          
      B(357) = RCT(202)*V(98)
C B(358) = dA(202)/dV(98)                                          
      B(358) = RCT(202)*V(37)
C B(359) = dA(203)/dV(65)                                          
      B(359) = RCT(203)*V(93)
C B(360) = dA(203)/dV(93)                                          
      B(360) = RCT(203)*V(65)
C B(361) = dA(204)/dV(65)                                          
      B(361) = RCT(204)*V(102)
C B(362) = dA(204)/dV(102)                                         
      B(362) = RCT(204)*V(65)
C B(363) = dA(205)/dV(65)                                          
      B(363) = RCT(205)*2*V(65)
C B(364) = dA(206)/dV(65)                                          
      B(364) = RCT(206)*V(100)
C B(365) = dA(206)/dV(100)                                         
      B(365) = RCT(206)*V(65)
C B(366) = dA(207)/dV(94)                                          
      B(366) = RCT(207)*V(97)
C B(367) = dA(207)/dV(97)                                          
      B(367) = RCT(207)*V(94)
C B(368) = dA(208)/dV(97)                                          
      B(368) = RCT(208)*V(102)
C B(369) = dA(208)/dV(102)                                         
      B(369) = RCT(208)*V(97)
C B(370) = dA(209)/dV(67)                                          
      B(370) = RCT(209)*V(97)
C B(371) = dA(209)/dV(97)                                          
      B(371) = RCT(209)*V(67)
C B(372) = dA(210)/dV(91)                                          
      B(372) = RCT(210)*V(97)
C B(373) = dA(210)/dV(97)                                          
      B(373) = RCT(210)*V(91)
C B(374) = dA(211)/dV(95)                                          
      B(374) = RCT(211)*V(97)
C B(375) = dA(211)/dV(97)                                          
      B(375) = RCT(211)*V(95)
C B(376) = dA(212)/dV(74)                                          
      B(376) = RCT(212)*V(98)
C B(377) = dA(212)/dV(98)                                          
      B(377) = RCT(212)*V(74)
C B(378) = dA(213)/dV(74)                                          
      B(378) = RCT(213)*V(90)
C B(379) = dA(213)/dV(90)                                          
      B(379) = RCT(213)*V(74)
C B(380) = dA(214)/dV(74)                                          
      B(380) = RCT(214)
C B(381) = dA(215)/dV(92)                                          
      B(381) = RCT(215)*V(97)
C B(382) = dA(215)/dV(97)                                          
      B(382) = RCT(215)*V(92)
C B(383) = dA(216)/dV(90)                                          
      B(383) = RCT(216)*V(92)
C B(384) = dA(216)/dV(92)                                          
      B(384) = RCT(216)*V(90)
C B(385) = dA(217)/dV(92)                                          
      B(385) = RCT(217)*V(98)
C B(386) = dA(217)/dV(98)                                          
      B(386) = RCT(217)*V(92)
C B(387) = dA(218)/dV(92)                                          
      B(387) = RCT(218)*V(102)
C B(388) = dA(218)/dV(102)                                         
      B(388) = RCT(218)*V(92)
C B(389) = dA(219)/dV(92)                                          
      B(389) = RCT(219)*V(93)
C B(390) = dA(219)/dV(93)                                          
      B(390) = RCT(219)*V(92)
C B(391) = dA(220)/dV(91)                                          
      B(391) = RCT(220)*V(92)
C B(392) = dA(220)/dV(92)                                          
      B(392) = RCT(220)*V(91)
C B(393) = dA(221)/dV(92)                                          
      B(393) = RCT(221)*V(95)
C B(394) = dA(221)/dV(95)                                          
      B(394) = RCT(221)*V(92)
C B(395) = dA(222)/dV(92)                                          
      B(395) = RCT(222)*V(94)
C B(396) = dA(222)/dV(94)                                          
      B(396) = RCT(222)*V(92)
C B(397) = dA(223)/dV(92)                                          
      B(397) = RCT(223)*2*V(92)
C B(398) = dA(224)/dV(92)                                          
      B(398) = RCT(224)*2*V(92)
C B(399) = dA(225)/dV(92)                                          
      B(399) = RCT(225)
C B(400) = dA(226)/dV(29)                                          
      B(400) = RCT(226)*V(97)
C B(401) = dA(226)/dV(97)                                          
      B(401) = RCT(226)*V(29)
C B(402) = dA(227)/dV(64)                                          
      B(402) = RCT(227)*V(98)
C B(403) = dA(227)/dV(98)                                          
      B(403) = RCT(227)*V(64)
C B(404) = dA(228)/dV(64)                                          
      B(404) = RCT(228)*V(95)
C B(405) = dA(228)/dV(95)                                          
      B(405) = RCT(228)*V(64)
C B(406) = dA(229)/dV(68)                                          
      B(406) = RCT(229)*V(90)
C B(407) = dA(229)/dV(90)                                          
      B(407) = RCT(229)*V(68)
C B(408) = dA(230)/dV(68)                                          
      B(408) = RCT(230)
C B(409) = dA(231)/dV(22)                                          
      B(409) = RCT(231)
C B(410) = dA(232)/dV(51)                                          
      B(410) = RCT(232)*V(90)
C B(411) = dA(232)/dV(90)                                          
      B(411) = RCT(232)*V(51)
C B(412) = dA(233)/dV(51)                                          
      B(412) = RCT(233)*V(97)
C B(413) = dA(233)/dV(97)                                          
      B(413) = RCT(233)*V(51)
C B(414) = dA(234)/dV(51)                                          
      B(414) = RCT(234)
C B(415) = dA(235)/dV(51)                                          
      B(415) = RCT(235)
C B(416) = dA(236)/dV(76)                                          
      B(416) = RCT(236)*V(97)
C B(417) = dA(236)/dV(97)                                          
      B(417) = RCT(236)*V(76)
C B(418) = dA(237)/dV(88)                                          
      B(418) = RCT(237)*V(97)
C B(419) = dA(237)/dV(97)                                          
      B(419) = RCT(237)*V(88)
C B(420) = dA(238)/dV(79)                                          
      B(420) = RCT(238)*V(97)
C B(421) = dA(238)/dV(97)                                          
      B(421) = RCT(238)*V(79)
C B(422) = dA(239)/dV(78)                                          
      B(422) = RCT(239)*V(97)
C B(423) = dA(239)/dV(97)                                          
      B(423) = RCT(239)*V(78)
C B(424) = dA(240)/dV(97)                                          
      B(424) = RCT(240)*V(100)
C B(425) = dA(240)/dV(100)                                         
      B(425) = RCT(240)*V(97)
C B(426) = dA(241)/dV(88)                                          
      B(426) = RCT(241)*V(92)
C B(427) = dA(241)/dV(92)                                          
      B(427) = RCT(241)*V(88)
C B(428) = dA(242)/dV(92)                                          
      B(428) = RCT(242)*V(100)
C B(429) = dA(242)/dV(100)                                         
      B(429) = RCT(242)*V(92)
C B(430) = dA(243)/dV(92)                                          
      B(430) = RCT(243)*V(100)
C B(431) = dA(243)/dV(100)                                         
      B(431) = RCT(243)*V(92)
C B(432) = dA(244)/dV(31)                                          
      B(432) = RCT(244)*V(98)
C B(433) = dA(244)/dV(98)                                          
      B(433) = RCT(244)*V(31)
C B(434) = dA(245)/dV(70)                                          
      B(434) = RCT(245)*V(93)
C B(435) = dA(245)/dV(93)                                          
      B(435) = RCT(245)*V(70)
C B(436) = dA(246)/dV(70)                                          
      B(436) = RCT(246)*V(102)
C B(437) = dA(246)/dV(102)                                         
      B(437) = RCT(246)*V(70)
C B(438) = dA(247)/dV(70)                                          
      B(438) = RCT(247)*2*V(70)
C B(439) = dA(248)/dV(70)                                          
      B(439) = RCT(248)*V(100)
C B(440) = dA(248)/dV(100)                                         
      B(440) = RCT(248)*V(70)
C B(441) = dA(249)/dV(89)                                          
      B(441) = RCT(249)*V(94)
C B(442) = dA(249)/dV(94)                                          
      B(442) = RCT(249)*V(89)
C B(443) = dA(250)/dV(89)                                          
      B(443) = RCT(250)*V(102)
C B(444) = dA(250)/dV(102)                                         
      B(444) = RCT(250)*V(89)
C B(445) = dA(251)/dV(89)                                          
      B(445) = RCT(251)*V(91)
C B(446) = dA(251)/dV(91)                                          
      B(446) = RCT(251)*V(89)
C B(447) = dA(252)/dV(89)                                          
      B(447) = RCT(252)*V(95)
C B(448) = dA(252)/dV(95)                                          
      B(448) = RCT(252)*V(89)
C B(449) = dA(253)/dV(89)                                          
      B(449) = RCT(253)*2*V(89)
C B(450) = dA(254)/dV(81)                                          
      B(450) = RCT(254)*V(90)
C B(451) = dA(254)/dV(90)                                          
      B(451) = RCT(254)*V(81)
C B(452) = dA(255)/dV(81)                                          
      B(452) = RCT(255)*V(98)
C B(453) = dA(255)/dV(98)                                          
      B(453) = RCT(255)*V(81)
C B(454) = dA(256)/dV(81)                                          
      B(454) = RCT(256)*V(95)
C B(455) = dA(256)/dV(95)                                          
      B(455) = RCT(256)*V(81)
C B(456) = dA(257)/dV(81)                                          
      B(456) = RCT(257)
C B(457) = dA(258)/dV(90)                                          
      B(457) = RCT(258)*V(101)
C B(458) = dA(258)/dV(101)                                         
      B(458) = RCT(258)*V(90)
C B(459) = dA(259)/dV(101)                                         
      B(459) = RCT(259)*V(102)
C B(460) = dA(259)/dV(102)                                         
      B(460) = RCT(259)*V(101)
C B(461) = dA(260)/dV(93)                                          
      B(461) = RCT(260)*V(101)
C B(462) = dA(260)/dV(101)                                         
      B(462) = RCT(260)*V(93)
C B(463) = dA(261)/dV(91)                                          
      B(463) = RCT(261)*V(101)
C B(464) = dA(261)/dV(101)                                         
      B(464) = RCT(261)*V(91)
C B(465) = dA(262)/dV(101)                                         
      B(465) = RCT(262)*2*V(101)
C B(466) = dA(263)/dV(101)                                         
      B(466) = RCT(263)
C B(467) = dA(264)/dV(55)                                          
      B(467) = RCT(264)*V(98)
C B(468) = dA(264)/dV(98)                                          
      B(468) = RCT(264)*V(55)
C B(469) = dA(265)/dV(55)                                          
      B(469) = RCT(265)*V(93)
C B(470) = dA(265)/dV(93)                                          
      B(470) = RCT(265)*V(55)
C B(471) = dA(266)/dV(55)                                          
      B(471) = RCT(266)*2*V(55)
C B(472) = dA(267)/dV(55)                                          
      B(472) = RCT(267)
C B(473) = dA(268)/dV(20)                                          
      B(473) = RCT(268)
C B(474) = dA(269)/dV(43)                                          
      B(474) = RCT(269)*V(98)
C B(475) = dA(269)/dV(98)                                          
      B(475) = RCT(269)*V(43)
C B(476) = dA(270)/dV(43)                                          
      B(476) = RCT(270)*V(95)
C B(477) = dA(270)/dV(95)                                          
      B(477) = RCT(270)*V(43)
C B(478) = dA(271)/dV(36)                                          
      B(478) = RCT(271)
C B(479) = dA(272)/dV(30)                                          
      B(479) = RCT(272)*2*V(30)
C B(480) = dA(273)/dV(30)                                          
      B(480) = RCT(273)
C B(481) = dA(274)/dV(44)                                          
      B(481) = RCT(274)
C B(482) = dA(275)/dV(44)                                          
      B(482) = RCT(275)
C B(483) = dA(276)/dV(1)                                           
      B(483) = RCT(276)
C B(484) = dA(277)/dV(45)                                          
      B(484) = RCT(277)*V(98)
C B(485) = dA(277)/dV(98)                                          
      B(485) = RCT(277)*V(45)
C B(486) = dA(278)/dV(45)                                          
      B(486) = RCT(278)
C B(487) = dA(279)/dV(47)                                          
      B(487) = RCT(279)*V(98)
C B(488) = dA(279)/dV(98)                                          
      B(488) = RCT(279)*V(47)
C B(489) = dA(280)/dV(47)                                          
      B(489) = RCT(280)
C B(490) = dA(281)/dV(46)                                          
      B(490) = RCT(281)*V(98)
C B(491) = dA(281)/dV(98)                                          
      B(491) = RCT(281)*V(46)
C B(492) = dA(282)/dV(46)                                          
      B(492) = RCT(282)
C B(493) = dA(283)/dV(100)                                         
      B(493) = RCT(283)*V(101)
C B(494) = dA(283)/dV(101)                                         
      B(494) = RCT(283)*V(100)
C B(495) = dA(284)/dV(59)                                          
      B(495) = RCT(284)*V(93)
C B(496) = dA(284)/dV(93)                                          
      B(496) = RCT(284)*V(59)
C B(497) = dA(285)/dV(59)                                          
      B(497) = RCT(285)*V(102)
C B(498) = dA(285)/dV(102)                                         
      B(498) = RCT(285)*V(59)
C B(499) = dA(286)/dV(59)                                          
      B(499) = RCT(286)*2*V(59)
C B(500) = dA(287)/dV(59)                                          
      B(500) = RCT(287)*V(100)
C B(501) = dA(287)/dV(100)                                         
      B(501) = RCT(287)*V(59)
C B(502) = dA(288)/dV(80)                                          
      B(502) = RCT(288)*V(99)
C B(503) = dA(288)/dV(99)                                          
      B(503) = RCT(288)*V(80)
C B(504) = dA(289)/dV(74)                                          
      B(504) = RCT(289)*V(99)
C B(505) = dA(289)/dV(99)                                          
      B(505) = RCT(289)*V(74)
C B(506) = dA(290)/dV(81)                                          
      B(506) = RCT(290)*V(99)
C B(507) = dA(290)/dV(99)                                          
      B(507) = RCT(290)*V(81)
C B(508) = dA(291)/dV(99)                                          
      B(508) = RCT(291)*V(101)
C B(509) = dA(291)/dV(101)                                         
      B(509) = RCT(291)*V(99)
C B(510) = dA(292)/dV(83)                                          
      B(510) = RCT(292)*V(97)
C B(511) = dA(292)/dV(97)                                          
      B(511) = RCT(292)*V(83)
C B(512) = dA(293)/dV(72)                                          
      B(512) = RCT(293)*V(97)
C B(513) = dA(293)/dV(97)                                          
      B(513) = RCT(293)*V(72)
C B(514) = dA(294)/dV(53)                                          
      B(514) = RCT(294)*V(97)
C B(515) = dA(294)/dV(97)                                          
      B(515) = RCT(294)*V(53)
C B(516) = dA(295)/dV(80)                                          
      B(516) = RCT(295)*V(97)
C B(517) = dA(295)/dV(97)                                          
      B(517) = RCT(295)*V(80)
C B(518) = dA(296)/dV(81)                                          
      B(518) = RCT(296)*V(97)
C B(519) = dA(296)/dV(97)                                          
      B(519) = RCT(296)*V(81)
C B(520) = dA(297)/dV(97)                                          
      B(520) = RCT(297)*V(101)
C B(521) = dA(297)/dV(101)                                         
      B(521) = RCT(297)*V(97)
C B(522) = dA(298)/dV(58)                                          
      B(522) = RCT(298)*V(97)
C B(523) = dA(298)/dV(97)                                          
      B(523) = RCT(298)*V(58)
C B(524) = dA(299)/dV(74)                                          
      B(524) = RCT(299)*V(89)
C B(525) = dA(299)/dV(89)                                          
      B(525) = RCT(299)*V(74)
C B(526) = dA(300)/dV(89)                                          
      B(526) = RCT(300)*V(92)
C B(527) = dA(300)/dV(92)                                          
      B(527) = RCT(300)*V(89)
C B(528) = dA(301)/dV(81)                                          
      B(528) = RCT(301)*V(92)
C B(529) = dA(301)/dV(92)                                          
      B(529) = RCT(301)*V(81)
C B(530) = dA(302)/dV(92)                                          
      B(530) = RCT(302)*V(96)
C B(531) = dA(302)/dV(96)                                          
      B(531) = RCT(302)*V(92)
C B(532) = dA(303)/dV(92)                                          
      B(532) = RCT(303)*V(96)
C B(533) = dA(303)/dV(96)                                          
      B(533) = RCT(303)*V(92)
C B(534) = dA(304)/dV(92)                                          
      B(534) = RCT(304)*V(96)
C B(535) = dA(304)/dV(96)                                          
      B(535) = RCT(304)*V(92)
C B(536) = dA(305)/dV(96)                                          
      B(536) = RCT(305)*V(101)
C B(537) = dA(305)/dV(101)                                         
      B(537) = RCT(305)*V(96)
C B(538) = dA(306)/dV(96)                                          
      B(538) = RCT(306)*V(101)
C B(539) = dA(306)/dV(101)                                         
      B(539) = RCT(306)*V(96)
C B(540) = dA(307)/dV(96)                                          
      B(540) = RCT(307)*V(101)
C B(541) = dA(307)/dV(101)                                         
      B(541) = RCT(307)*V(96)
C B(542) = dA(308)/dV(92)                                          
      B(542) = RCT(308)*V(101)
C B(543) = dA(308)/dV(101)                                         
      B(543) = RCT(308)*V(92)
C B(544) = dA(309)/dV(92)                                          
      B(544) = RCT(309)*V(101)
C B(545) = dA(309)/dV(101)                                         
      B(545) = RCT(309)*V(92)
C B(546) = dA(310)/dV(58)                                          
      B(546) = RCT(310)*V(98)
C B(547) = dA(310)/dV(98)                                          
      B(547) = RCT(310)*V(58)
C B(548) = dA(311)/dV(58)                                          
      B(548) = RCT(311)
C B(549) = dA(312)/dV(69)                                          
      B(549) = RCT(312)*V(97)
C B(550) = dA(312)/dV(97)                                          
      B(550) = RCT(312)*V(69)
C B(551) = dA(313)/dV(69)                                          
      B(551) = RCT(313)*V(99)
C B(552) = dA(313)/dV(99)                                          
      B(552) = RCT(313)*V(69)
C B(553) = dA(314)/dV(69)                                          
      B(553) = RCT(314)*V(98)
C B(554) = dA(314)/dV(98)                                          
      B(554) = RCT(314)*V(69)
C B(555) = dA(315)/dV(69)                                          
      B(555) = RCT(315)
C B(556) = dA(316)/dV(80)                                          
      B(556) = RCT(316)*V(90)
C B(557) = dA(316)/dV(90)                                          
      B(557) = RCT(316)*V(80)
C B(558) = dA(317)/dV(80)                                          
      B(558) = RCT(317)*V(98)
C B(559) = dA(317)/dV(98)                                          
      B(559) = RCT(317)*V(80)
C B(560) = dA(318)/dV(80)                                          
      B(560) = RCT(318)
C B(561) = dA(319)/dV(45)                                          
      B(561) = RCT(319)*V(99)
C B(562) = dA(319)/dV(99)                                          
      B(562) = RCT(319)*V(45)
C B(563) = dA(320)/dV(47)                                          
      B(563) = RCT(320)*V(99)
C B(564) = dA(320)/dV(99)                                          
      B(564) = RCT(320)*V(47)
C B(565) = dA(321)/dV(46)                                          
      B(565) = RCT(321)*V(99)
C B(566) = dA(321)/dV(99)                                          
      B(566) = RCT(321)*V(46)
C B(567) = dA(322)/dV(3)                                           
      B(567) = RCT(322)
C B(568) = dA(323)/dV(2)                                           
      B(568) = RCT(323)
C B(569) = dA(324)/dV(75)                                          
      B(569) = RCT(324)
C B(570) = dA(325)/dV(32)                                          
      B(570) = RCT(325)
C B(571) = dA(326)/dV(24)                                          
      B(571) = RCT(326)
C B(572) = dA(327)/dV(19)                                          
      B(572) = RCT(327)
C B(573) = dA(328)/dV(75)                                          
      B(573) = RCT(328)
C B(574) = dA(329)/dV(32)                                          
      B(574) = RCT(329)
C B(575) = dA(330)/dV(24)                                          
      B(575) = RCT(330)
C B(576) = dA(331)/dV(19)                                          
      B(576) = RCT(331)

C Construct the Jacobian terms from B's                            
C JVS(1) = Jac_FULL(1,1)                                           
      JVS(1) = -B(483)
C JVS(2) = Jac_FULL(2,2)                                           
      JVS(2) = -B(568)
C JVS(3) = Jac_FULL(3,3)                                           
      JVS(3) = -B(567)
C JVS(4) = Jac_FULL(4,4)                                           
      JVS(4) = 0
C JVS(5) = Jac_FULL(4,32)                                          
      JVS(5) = B(570)
C JVS(6) = Jac_FULL(5,5)                                           
      JVS(6) = 0
C JVS(7) = Jac_FULL(5,48)                                          
      JVS(7) = B(162)
C JVS(8) = Jac_FULL(5,49)                                          
      JVS(8) = B(83)
C JVS(9) = Jac_FULL(5,54)                                          
      JVS(9) = B(160)
C JVS(10) = Jac_FULL(5,98)                                         
      JVS(10) = B(84)+B(161)+B(163)
C JVS(11) = Jac_FULL(6,6)                                          
      JVS(11) = 0
C JVS(12) = Jac_FULL(6,77)                                         
      JVS(12) = 0.05*B(236)+B(240)
C JVS(13) = Jac_FULL(6,92)                                         
      JVS(13) = B(241)
C JVS(14) = Jac_FULL(6,98)                                         
      JVS(14) = 0.05*B(237)
C JVS(15) = Jac_FULL(7,7)                                          
      JVS(15) = 0
C JVS(16) = Jac_FULL(7,27)                                         
      JVS(16) = B(230)
C JVS(17) = Jac_FULL(7,42)                                         
      JVS(17) = 0.05*B(242)
C JVS(18) = Jac_FULL(7,98)                                         
      JVS(18) = 0.05*B(243)
C JVS(19) = Jac_FULL(7,102)                                        
      JVS(19) = B(231)
C JVS(20) = Jac_FULL(8,8)                                          
      JVS(20) = 0
C JVS(21) = Jac_FULL(8,91)                                         
      JVS(21) = B(258)
C JVS(22) = Jac_FULL(8,99)                                         
      JVS(22) = B(259)
C JVS(23) = Jac_FULL(9,9)                                          
      JVS(23) = 0
C JVS(24) = Jac_FULL(9,83)                                         
      JVS(24) = B(297)+B(301)
C JVS(25) = Jac_FULL(9,90)                                         
      JVS(25) = B(298)
C JVS(26) = Jac_FULL(9,94)                                         
      JVS(26) = B(302)
C JVS(27) = Jac_FULL(10,10)                                        
      JVS(27) = 0
C JVS(28) = Jac_FULL(10,55)                                        
      JVS(28) = B(467)
C JVS(29) = Jac_FULL(10,98)                                        
      JVS(29) = B(468)
C JVS(30) = Jac_FULL(11,11)                                        
      JVS(30) = 0
C JVS(31) = Jac_FULL(11,24)                                        
      JVS(31) = B(81)+B(178)
C JVS(32) = Jac_FULL(11,26)                                        
      JVS(32) = B(179)
C JVS(33) = Jac_FULL(11,61)                                        
      JVS(33) = B(213)
C JVS(34) = Jac_FULL(11,93)                                        
      JVS(34) = B(214)
C JVS(35) = Jac_FULL(11,98)                                        
      JVS(35) = B(82)
C JVS(36) = Jac_FULL(12,12)                                        
      JVS(36) = 0
C JVS(37) = Jac_FULL(12,59)                                        
      JVS(37) = B(497)
C JVS(38) = Jac_FULL(12,65)                                        
      JVS(38) = B(361)
C JVS(39) = Jac_FULL(12,70)                                        
      JVS(39) = B(436)
C JVS(40) = Jac_FULL(12,102)                                       
      JVS(40) = B(362)+B(437)+B(498)
C JVS(41) = Jac_FULL(13,13)                                        
      JVS(41) = 0
C JVS(42) = Jac_FULL(13,75)                                        
      JVS(42) = B(569)
C JVS(43) = Jac_FULL(14,14)                                        
      JVS(43) = 0
C JVS(44) = Jac_FULL(14,24)                                        
      JVS(44) = B(571)
C JVS(45) = Jac_FULL(15,15)                                        
      JVS(45) = 0
C JVS(46) = Jac_FULL(15,19)                                        
      JVS(46) = B(572)
C JVS(47) = Jac_FULL(16,16)                                        
      JVS(47) = 0
C JVS(48) = Jac_FULL(16,75)                                        
      JVS(48) = B(573)
C JVS(49) = Jac_FULL(17,17)                                        
      JVS(49) = 0
C JVS(50) = Jac_FULL(17,24)                                        
      JVS(50) = B(575)
C JVS(51) = Jac_FULL(18,18)                                        
      JVS(51) = 0
C JVS(52) = Jac_FULL(18,19)                                        
      JVS(52) = B(576)
C JVS(53) = Jac_FULL(19,19)                                        
      JVS(53) = -B(572)-B(576)
C JVS(54) = Jac_FULL(19,26)                                        
      JVS(54) = B(177)
C JVS(55) = Jac_FULL(20,20)                                        
      JVS(55) = -B(473)
C JVS(56) = Jac_FULL(20,55)                                        
      JVS(56) = B(471)
C JVS(57) = Jac_FULL(20,101)                                       
      JVS(57) = 0.51*B(465)
C JVS(58) = Jac_FULL(21,21)                                        
      JVS(58) = -B(312)
C JVS(59) = Jac_FULL(21,83)                                        
      JVS(59) = B(291)
C JVS(60) = Jac_FULL(21,96)                                        
      JVS(60) = B(292)
C JVS(61) = Jac_FULL(22,22)                                        
      JVS(61) = -B(409)
C JVS(62) = Jac_FULL(22,91)                                        
      JVS(62) = B(372)
C JVS(63) = Jac_FULL(22,97)                                        
      JVS(63) = B(373)
C JVS(64) = Jac_FULL(23,23)                                        
      JVS(64) = -B(95)
C JVS(65) = Jac_FULL(23,76)                                        
      JVS(65) = 0.37*B(91)
C JVS(66) = Jac_FULL(23,94)                                        
      JVS(66) = 0.37*B(92)
C JVS(67) = Jac_FULL(23,97)                                        
      JVS(67) = B(424)
C JVS(68) = Jac_FULL(23,100)                                       
      JVS(68) = B(425)
C JVS(69) = Jac_FULL(24,24)                                        
      JVS(69) = -B(81)-B(178)-B(571)-B(575)
C JVS(70) = Jac_FULL(24,26)                                        
      JVS(70) = -B(179)
C JVS(71) = Jac_FULL(24,98)                                        
      JVS(71) = -B(82)
C JVS(72) = Jac_FULL(25,25)                                        
      JVS(72) = -B(175)
C JVS(73) = Jac_FULL(25,52)                                        
      JVS(73) = B(171)
C JVS(74) = Jac_FULL(25,98)                                        
      JVS(74) = B(172)
C JVS(75) = Jac_FULL(26,24)                                        
      JVS(75) = -B(178)
C JVS(76) = Jac_FULL(26,25)                                        
      JVS(76) = B(175)
C JVS(77) = Jac_FULL(26,26)                                        
      JVS(77) = -B(177)-B(179)
C JVS(78) = Jac_FULL(26,52)                                        
      JVS(78) = B(169)+B(173)
C JVS(79) = Jac_FULL(26,90)                                        
      JVS(79) = B(170)
C JVS(80) = Jac_FULL(26,94)                                        
      JVS(80) = B(174)
C JVS(81) = Jac_FULL(26,98)                                        
      JVS(81) = 0
C JVS(82) = Jac_FULL(27,27)                                        
      JVS(82) = -B(230)
C JVS(83) = Jac_FULL(27,85)                                        
      JVS(83) = B(222)+B(224)+B(228)
C JVS(84) = Jac_FULL(27,91)                                        
      JVS(84) = B(225)
C JVS(85) = Jac_FULL(27,93)                                        
      JVS(85) = B(229)
C JVS(86) = Jac_FULL(27,94)                                        
      JVS(86) = B(223)
C JVS(87) = Jac_FULL(27,102)                                       
      JVS(87) = -B(231)
C JVS(88) = Jac_FULL(28,28)                                        
      JVS(88) = -B(70)-B(72)
C JVS(89) = Jac_FULL(28,93)                                        
      JVS(89) = B(38)
C JVS(90) = Jac_FULL(28,98)                                        
      JVS(90) = B(39)-B(71)
C JVS(91) = Jac_FULL(29,29)                                        
      JVS(91) = -B(400)
C JVS(92) = Jac_FULL(29,92)                                        
      JVS(92) = B(381)
C JVS(93) = Jac_FULL(29,97)                                        
      JVS(93) = B(382)-B(401)
C JVS(94) = Jac_FULL(30,30)                                        
      JVS(94) = -2*B(479)-B(480)
C JVS(95) = Jac_FULL(30,89)                                        
      JVS(95) = B(445)
C JVS(96) = Jac_FULL(30,91)                                        
      JVS(96) = B(446)
C JVS(97) = Jac_FULL(31,31)                                        
      JVS(97) = -B(432)
C JVS(98) = Jac_FULL(31,87)                                        
      JVS(98) = B(188)
C JVS(99) = Jac_FULL(31,97)                                        
      JVS(99) = B(189)
C JVS(100) = Jac_FULL(31,98)                                       
      JVS(100) = -B(433)
C JVS(101) = Jac_FULL(32,32)                                       
      JVS(101) = -B(68)-B(69)-B(570)-B(574)
C JVS(102) = Jac_FULL(32,91)                                       
      JVS(102) = B(56)
C JVS(103) = Jac_FULL(32,95)                                       
      JVS(103) = B(57)
C JVS(104) = Jac_FULL(33,33)                                       
      JVS(104) = -B(235)
C JVS(105) = Jac_FULL(33,61)                                       
      JVS(105) = B(209)
C JVS(106) = Jac_FULL(33,85)                                       
      JVS(106) = B(226)
C JVS(107) = Jac_FULL(33,86)                                       
      JVS(107) = B(203)
C JVS(108) = Jac_FULL(33,91)                                       
      JVS(108) = B(204)+B(210)+B(227)
C JVS(109) = Jac_FULL(34,34)                                       
      JVS(109) = -B(85)-B(331)
C JVS(110) = Jac_FULL(34,98)                                       
      JVS(110) = -B(86)
C JVS(111) = Jac_FULL(34,99)                                       
      JVS(111) = -B(332)
C JVS(112) = Jac_FULL(35,35)                                       
      JVS(112) = -B(87)-B(333)
C JVS(113) = Jac_FULL(35,98)                                       
      JVS(113) = -B(88)
C JVS(114) = Jac_FULL(35,99)                                       
      JVS(114) = -B(334)
C JVS(115) = Jac_FULL(36,36)                                       
      JVS(115) = -B(478)
C JVS(116) = Jac_FULL(36,58)                                       
      JVS(116) = 0.84*B(546)
C JVS(117) = Jac_FULL(36,81)                                       
      JVS(117) = B(452)
C JVS(118) = Jac_FULL(36,98)                                       
      JVS(118) = B(453)+0.84*B(547)
C JVS(119) = Jac_FULL(36,101)                                      
      JVS(119) = B(459)
C JVS(120) = Jac_FULL(36,102)                                      
      JVS(120) = B(460)
C JVS(121) = Jac_FULL(37,37)                                       
      JVS(121) = -B(357)
C JVS(122) = Jac_FULL(37,45)                                       
      JVS(122) = 0.3*B(561)
C JVS(123) = Jac_FULL(37,46)                                       
      JVS(123) = 0.3*B(565)
C JVS(124) = Jac_FULL(37,47)                                       
      JVS(124) = 0.5*B(563)
C JVS(125) = Jac_FULL(37,98)                                       
      JVS(125) = -B(358)
C JVS(126) = Jac_FULL(37,99)                                       
      JVS(126) = 0.3*B(562)+0.5*B(564)+0.3*B(566)
C JVS(127) = Jac_FULL(38,38)                                       
      JVS(127) = -B(1)-B(3)-B(5)-B(7)-B(9)
C JVS(128) = Jac_FULL(38,50)                                       
      JVS(128) = -B(10)
C JVS(129) = Jac_FULL(38,94)                                       
      JVS(129) = -B(4)+B(33)
C JVS(130) = Jac_FULL(39,39)                                       
      JVS(130) = -B(232)-B(234)
C JVS(131) = Jac_FULL(39,86)                                       
      JVS(131) = B(198)
C JVS(132) = Jac_FULL(39,98)                                       
      JVS(132) = -B(233)
C JVS(133) = Jac_FULL(39,102)                                      
      JVS(133) = B(199)
C JVS(134) = Jac_FULL(40,40)                                       
      JVS(134) = -B(320)-B(322)
C JVS(135) = Jac_FULL(40,91)                                       
      JVS(135) = B(260)
C JVS(136) = Jac_FULL(40,98)                                       
      JVS(136) = -B(321)
C JVS(137) = Jac_FULL(40,99)                                       
      JVS(137) = B(261)
C JVS(138) = Jac_FULL(41,41)                                       
      JVS(138) = -B(76)-B(77)-B(79)-B(80)
C JVS(139) = Jac_FULL(41,91)                                       
      JVS(139) = B(52)
C JVS(140) = Jac_FULL(41,98)                                       
      JVS(140) = -B(78)
C JVS(141) = Jac_FULL(41,102)                                      
      JVS(141) = B(53)
C JVS(142) = Jac_FULL(42,42)                                       
      JVS(142) = -B(242)-B(244)
C JVS(143) = Jac_FULL(42,77)                                       
      JVS(143) = 0.95*B(236)
C JVS(144) = Jac_FULL(42,95)                                       
      JVS(144) = -B(245)
C JVS(145) = Jac_FULL(42,98)                                       
      JVS(145) = 0.95*B(237)-B(243)
C JVS(146) = Jac_FULL(43,43)                                       
      JVS(146) = -B(474)-B(476)
C JVS(147) = Jac_FULL(43,89)                                       
      JVS(147) = B(443)
C JVS(148) = Jac_FULL(43,95)                                       
      JVS(148) = -B(477)
C JVS(149) = Jac_FULL(43,98)                                       
      JVS(149) = -B(475)
C JVS(150) = Jac_FULL(43,102)                                      
      JVS(150) = B(444)
C JVS(151) = Jac_FULL(44,44)                                       
      JVS(151) = -B(481)-B(482)
C JVS(152) = Jac_FULL(44,81)                                       
      JVS(152) = B(454)
C JVS(153) = Jac_FULL(44,91)                                       
      JVS(153) = B(463)
C JVS(154) = Jac_FULL(44,95)                                       
      JVS(154) = B(455)
C JVS(155) = Jac_FULL(44,101)                                      
      JVS(155) = B(464)
C JVS(156) = Jac_FULL(45,45)                                       
      JVS(156) = -B(484)-B(486)-B(561)
C JVS(157) = Jac_FULL(45,98)                                       
      JVS(157) = -B(485)
C JVS(158) = Jac_FULL(45,99)                                       
      JVS(158) = -B(562)
C JVS(159) = Jac_FULL(46,46)                                       
      JVS(159) = -B(490)-B(492)-B(565)
C JVS(160) = Jac_FULL(46,98)                                       
      JVS(160) = -B(491)
C JVS(161) = Jac_FULL(46,99)                                       
      JVS(161) = -B(566)
C JVS(162) = Jac_FULL(47,47)                                       
      JVS(162) = -B(487)-B(489)-B(563)
C JVS(163) = Jac_FULL(47,98)                                       
      JVS(163) = -B(488)
C JVS(164) = Jac_FULL(47,99)                                       
      JVS(164) = -B(564)
C JVS(165) = Jac_FULL(48,48)                                       
      JVS(165) = -B(162)-B(349)
C JVS(166) = Jac_FULL(48,82)                                       
      JVS(166) = B(136)
C JVS(167) = Jac_FULL(48,98)                                       
      JVS(167) = -B(163)
C JVS(168) = Jac_FULL(48,99)                                       
      JVS(168) = -B(350)
C JVS(169) = Jac_FULL(48,100)                                      
      JVS(169) = B(137)
C JVS(170) = Jac_FULL(49,2)                                        
      JVS(170) = B(568)
C JVS(171) = Jac_FULL(49,3)                                        
      JVS(171) = B(567)
C JVS(172) = Jac_FULL(49,49)                                       
      JVS(172) = -B(83)
C JVS(173) = Jac_FULL(49,57)                                       
      JVS(173) = B(141)+B(351)
C JVS(174) = Jac_FULL(49,76)                                       
      JVS(174) = 0.63*B(91)
C JVS(175) = Jac_FULL(49,79)                                       
      JVS(175) = B(153)
C JVS(176) = Jac_FULL(49,88)                                       
      JVS(176) = B(143)+B(145)+B(147)+B(148)+B(337)+B(418)+B(426)
C JVS(177) = Jac_FULL(49,92)                                       
      JVS(177) = B(427)
C JVS(178) = Jac_FULL(49,94)                                       
      JVS(178) = 0.63*B(92)
C JVS(179) = Jac_FULL(49,95)                                       
      JVS(179) = B(146)
C JVS(180) = Jac_FULL(49,97)                                       
      JVS(180) = B(419)
C JVS(181) = Jac_FULL(49,98)                                       
      JVS(181) = -B(84)+B(142)+B(144)
C JVS(182) = Jac_FULL(49,99)                                       
      JVS(182) = B(338)+B(352)+0.5*B(353)
C JVS(183) = Jac_FULL(49,100)                                      
      JVS(183) = 0.5*B(354)
C JVS(184) = Jac_FULL(50,38)                                       
      JVS(184) = -B(9)
C JVS(185) = Jac_FULL(50,50)                                       
      JVS(185) = -B(10)-B(24)-B(254)
C JVS(186) = Jac_FULL(50,88)                                       
      JVS(186) = B(148)
C JVS(187) = Jac_FULL(50,94)                                       
      JVS(187) = 0
C JVS(188) = Jac_FULL(50,98)                                       
      JVS(188) = -B(25)
C JVS(189) = Jac_FULL(50,99)                                       
      JVS(189) = -B(255)
C JVS(190) = Jac_FULL(51,51)                                       
      JVS(190) = -B(410)-B(412)-B(414)-B(415)
C JVS(191) = Jac_FULL(51,90)                                       
      JVS(191) = -B(411)
C JVS(192) = Jac_FULL(51,91)                                       
      JVS(192) = B(391)
C JVS(193) = Jac_FULL(51,92)                                       
      JVS(193) = B(392)
C JVS(194) = Jac_FULL(51,97)                                       
      JVS(194) = -B(413)
C JVS(195) = Jac_FULL(52,52)                                       
      JVS(195) = -B(169)-B(171)-B(173)
C JVS(196) = Jac_FULL(52,84)                                       
      JVS(196) = B(219)
C JVS(197) = Jac_FULL(52,85)                                       
      JVS(197) = B(221)
C JVS(198) = Jac_FULL(52,90)                                       
      JVS(198) = -B(170)
C JVS(199) = Jac_FULL(52,91)                                       
      JVS(199) = B(220)
C JVS(200) = Jac_FULL(52,94)                                       
      JVS(200) = -B(174)
C JVS(201) = Jac_FULL(52,98)                                       
      JVS(201) = -B(172)
C JVS(202) = Jac_FULL(53,53)                                       
      JVS(202) = -B(306)-B(308)-B(310)-B(311)-B(514)
C JVS(203) = Jac_FULL(53,94)                                       
      JVS(203) = -B(309)
C JVS(204) = Jac_FULL(53,96)                                       
      JVS(204) = B(290)
C JVS(205) = Jac_FULL(53,97)                                       
      JVS(205) = -B(515)
C JVS(206) = Jac_FULL(53,99)                                       
      JVS(206) = -B(307)
C JVS(207) = Jac_FULL(54,23)                                       
      JVS(207) = B(95)
C JVS(208) = Jac_FULL(54,54)                                       
      JVS(208) = -B(160)-B(347)
C JVS(209) = Jac_FULL(54,76)                                       
      JVS(209) = 0
C JVS(210) = Jac_FULL(54,94)                                       
      JVS(210) = 0
C JVS(211) = Jac_FULL(54,97)                                       
      JVS(211) = 0
C JVS(212) = Jac_FULL(54,98)                                       
      JVS(212) = -B(161)
C JVS(213) = Jac_FULL(54,99)                                       
      JVS(213) = -B(348)
C JVS(214) = Jac_FULL(54,100)                                      
      JVS(214) = 0
C JVS(215) = Jac_FULL(55,55)                                       
      JVS(215) = -B(467)-B(469)-2*B(471)-B(472)
C JVS(216) = Jac_FULL(55,92)                                       
      JVS(216) = B(544)
C JVS(217) = Jac_FULL(55,93)                                       
      JVS(217) = -B(470)
C JVS(218) = Jac_FULL(55,98)                                       
      JVS(218) = -B(468)
C JVS(219) = Jac_FULL(55,100)                                      
      JVS(219) = 0.5*B(493)
C JVS(220) = Jac_FULL(55,101)                                      
      JVS(220) = 0.38*B(465)+0.5*B(494)+B(545)
C JVS(221) = Jac_FULL(56,45)                                       
      JVS(221) = 0.3*B(484)
C JVS(222) = Jac_FULL(56,56)                                       
      JVS(222) = -B(154)-B(341)
C JVS(223) = Jac_FULL(56,71)                                       
      JVS(223) = B(109)
C JVS(224) = Jac_FULL(56,73)                                       
      JVS(224) = B(125)
C JVS(225) = Jac_FULL(56,98)                                       
      JVS(225) = -B(155)+0.3*B(485)
C JVS(226) = Jac_FULL(56,99)                                       
      JVS(226) = -B(342)
C JVS(227) = Jac_FULL(56,100)                                      
      JVS(227) = B(101)+B(110)+B(126)
C JVS(228) = Jac_FULL(57,57)                                       
      JVS(228) = -B(140)-B(141)-B(351)
C JVS(229) = Jac_FULL(57,82)                                       
      JVS(229) = B(138)
C JVS(230) = Jac_FULL(57,91)                                       
      JVS(230) = B(139)
C JVS(231) = Jac_FULL(57,98)                                       
      JVS(231) = -B(142)
C JVS(232) = Jac_FULL(57,99)                                       
      JVS(232) = -B(352)
C JVS(233) = Jac_FULL(58,58)                                       
      JVS(233) = -B(522)-B(546)-B(548)
C JVS(234) = Jac_FULL(58,74)                                       
      JVS(234) = B(524)
C JVS(235) = Jac_FULL(58,81)                                       
      JVS(235) = B(518)+B(528)
C JVS(236) = Jac_FULL(58,89)                                       
      JVS(236) = B(525)
C JVS(237) = Jac_FULL(58,92)                                       
      JVS(237) = B(529)
C JVS(238) = Jac_FULL(58,97)                                       
      JVS(238) = B(519)-B(523)
C JVS(239) = Jac_FULL(58,98)                                       
      JVS(239) = -B(547)
C JVS(240) = Jac_FULL(59,45)                                       
      JVS(240) = 0.7*B(484)+0.7*B(561)
C JVS(241) = Jac_FULL(59,46)                                       
      JVS(241) = 0.7*B(490)+0.7*B(565)
C JVS(242) = Jac_FULL(59,47)                                       
      JVS(242) = 0.5*B(487)+0.5*B(563)
C JVS(243) = Jac_FULL(59,59)                                       
      JVS(243) = -B(495)-B(497)-2*B(499)-B(500)
C JVS(244) = Jac_FULL(59,93)                                       
      JVS(244) = -B(496)
C JVS(245) = Jac_FULL(59,98)                                       
      JVS(245) = 0.7*B(485)+0.5*B(488)+0.7*B(491)
C JVS(246) = Jac_FULL(59,99)                                       
      JVS(246) = 0.7*B(562)+0.5*B(564)+0.7*B(566)
C JVS(247) = Jac_FULL(59,100)                                      
      JVS(247) = -B(501)
C JVS(248) = Jac_FULL(59,102)                                      
      JVS(248) = -B(498)
C JVS(249) = Jac_FULL(60,46)                                       
      JVS(249) = 0.3*B(490)
C JVS(250) = Jac_FULL(60,47)                                       
      JVS(250) = 0.5*B(487)
C JVS(251) = Jac_FULL(60,60)                                       
      JVS(251) = -B(156)-B(158)-B(343)
C JVS(252) = Jac_FULL(60,71)                                       
      JVS(252) = B(107)+B(111)
C JVS(253) = Jac_FULL(60,73)                                       
      JVS(253) = B(121)+B(123)
C JVS(254) = Jac_FULL(60,98)                                       
      JVS(254) = -B(157)-B(159)+0.5*B(488)+0.3*B(491)
C JVS(255) = Jac_FULL(60,99)                                       
      JVS(255) = -B(344)
C JVS(256) = Jac_FULL(60,100)                                      
      JVS(256) = B(112)+B(124)
C JVS(257) = Jac_FULL(61,39)                                       
      JVS(257) = B(234)
C JVS(258) = Jac_FULL(61,61)                                       
      JVS(258) = -B(205)-B(207)-B(209)-B(211)-B(213)
C JVS(259) = Jac_FULL(61,86)                                       
      JVS(259) = B(196)+2*B(200)+B(201)
C JVS(260) = Jac_FULL(61,91)                                       
      JVS(260) = -B(208)-B(210)
C JVS(261) = Jac_FULL(61,93)                                       
      JVS(261) = B(197)-B(212)-B(214)
C JVS(262) = Jac_FULL(61,94)                                       
      JVS(262) = -B(206)
C JVS(263) = Jac_FULL(61,98)                                       
      JVS(263) = 0
C JVS(264) = Jac_FULL(61,100)                                      
      JVS(264) = B(202)
C JVS(265) = Jac_FULL(61,102)                                      
      JVS(265) = 0
C JVS(266) = Jac_FULL(62,40)                                       
      JVS(266) = B(320)
C JVS(267) = Jac_FULL(62,62)                                       
      JVS(267) = -B(315)-B(317)-B(319)
C JVS(268) = Jac_FULL(62,63)                                       
      JVS(268) = 0.5*B(327)
C JVS(269) = Jac_FULL(62,69)                                       
      JVS(269) = B(553)
C JVS(270) = Jac_FULL(62,72)                                       
      JVS(270) = B(264)
C JVS(271) = Jac_FULL(62,83)                                       
      JVS(271) = B(299)
C JVS(272) = Jac_FULL(62,90)                                       
      JVS(272) = -B(316)
C JVS(273) = Jac_FULL(62,91)                                       
      JVS(273) = 0
C JVS(274) = Jac_FULL(62,96)                                       
      JVS(274) = B(273)
C JVS(275) = Jac_FULL(62,98)                                       
      JVS(275) = B(265)+B(300)-B(318)+B(321)+0.5*B(328)+B(554)
C JVS(276) = Jac_FULL(62,99)                                       
      JVS(276) = 0
C JVS(277) = Jac_FULL(62,102)                                      
      JVS(277) = B(274)
C JVS(278) = Jac_FULL(63,63)                                       
      JVS(278) = -B(323)-B(325)-B(327)-B(329)-B(330)
C JVS(279) = Jac_FULL(63,90)                                       
      JVS(279) = -B(326)
C JVS(280) = Jac_FULL(63,91)                                       
      JVS(280) = B(281)
C JVS(281) = Jac_FULL(63,96)                                       
      JVS(281) = B(282)
C JVS(282) = Jac_FULL(63,98)                                       
      JVS(282) = -B(328)
C JVS(283) = Jac_FULL(63,99)                                       
      JVS(283) = -B(324)
C JVS(284) = Jac_FULL(64,64)                                       
      JVS(284) = -B(402)-B(404)
C JVS(285) = Jac_FULL(64,67)                                       
      JVS(285) = 0.5*B(370)
C JVS(286) = Jac_FULL(64,76)                                       
      JVS(286) = B(416)
C JVS(287) = Jac_FULL(64,78)                                       
      JVS(287) = B(422)
C JVS(288) = Jac_FULL(64,79)                                       
      JVS(288) = B(420)
C JVS(289) = Jac_FULL(64,88)                                       
      JVS(289) = B(418)
C JVS(290) = Jac_FULL(64,95)                                       
      JVS(290) = -B(405)
C JVS(291) = Jac_FULL(64,97)                                       
      JVS(291) = B(368)+0.5*B(371)+B(417)+B(419)+B(421)+B(423)+B(424)
C JVS(292) = Jac_FULL(64,98)                                       
      JVS(292) = -B(403)
C JVS(293) = Jac_FULL(64,100)                                      
      JVS(293) = B(425)
C JVS(294) = Jac_FULL(64,102)                                      
      JVS(294) = B(369)
C JVS(295) = Jac_FULL(65,37)                                       
      JVS(295) = B(357)
C JVS(296) = Jac_FULL(65,45)                                       
      JVS(296) = 0
C JVS(297) = Jac_FULL(65,46)                                       
      JVS(297) = 0
C JVS(298) = Jac_FULL(65,47)                                       
      JVS(298) = 0
C JVS(299) = Jac_FULL(65,65)                                       
      JVS(299) = -B(359)-B(361)-2*B(363)-B(364)
C JVS(300) = Jac_FULL(65,76)                                       
      JVS(300) = B(335)
C JVS(301) = Jac_FULL(65,93)                                       
      JVS(301) = -B(360)
C JVS(302) = Jac_FULL(65,98)                                       
      JVS(302) = B(358)
C JVS(303) = Jac_FULL(65,99)                                       
      JVS(303) = B(336)
C JVS(304) = Jac_FULL(65,100)                                      
      JVS(304) = -B(365)
C JVS(305) = Jac_FULL(65,102)                                      
      JVS(305) = -B(362)
C JVS(306) = Jac_FULL(66,34)                                       
      JVS(306) = B(331)
C JVS(307) = Jac_FULL(66,35)                                       
      JVS(307) = B(333)
C JVS(308) = Jac_FULL(66,45)                                       
      JVS(308) = 0.7*B(561)
C JVS(309) = Jac_FULL(66,46)                                       
      JVS(309) = 0.7*B(565)
C JVS(310) = Jac_FULL(66,47)                                       
      JVS(310) = 0.5*B(563)
C JVS(311) = Jac_FULL(66,48)                                       
      JVS(311) = B(349)
C JVS(312) = Jac_FULL(66,50)                                       
      JVS(312) = B(254)
C JVS(313) = Jac_FULL(66,54)                                       
      JVS(313) = B(347)
C JVS(314) = Jac_FULL(66,56)                                       
      JVS(314) = B(341)
C JVS(315) = Jac_FULL(66,57)                                       
      JVS(315) = B(351)
C JVS(316) = Jac_FULL(66,60)                                       
      JVS(316) = B(343)
C JVS(317) = Jac_FULL(66,65)                                       
      JVS(317) = B(359)+2*B(363)+B(364)
C JVS(318) = Jac_FULL(66,66)                                       
      JVS(318) = -B(313)
C JVS(319) = Jac_FULL(66,67)                                       
      JVS(319) = B(252)
C JVS(320) = Jac_FULL(66,71)                                       
      JVS(320) = 0
C JVS(321) = Jac_FULL(66,73)                                       
      JVS(321) = 0
C JVS(322) = Jac_FULL(66,75)                                       
      JVS(322) = B(256)
C JVS(323) = Jac_FULL(66,76)                                       
      JVS(323) = 0
C JVS(324) = Jac_FULL(66,77)                                       
      JVS(324) = 0.9*B(238)
C JVS(325) = Jac_FULL(66,78)                                       
      JVS(325) = B(345)
C JVS(326) = Jac_FULL(66,79)                                       
      JVS(326) = B(339)
C JVS(327) = Jac_FULL(66,82)                                       
      JVS(327) = 0
C JVS(328) = Jac_FULL(66,87)                                       
      JVS(328) = 0.45*B(186)
C JVS(329) = Jac_FULL(66,88)                                       
      JVS(329) = B(337)
C JVS(330) = Jac_FULL(66,91)                                       
      JVS(330) = 0
C JVS(331) = Jac_FULL(66,93)                                       
      JVS(331) = B(360)
C JVS(332) = Jac_FULL(66,94)                                       
      JVS(332) = 0
C JVS(333) = Jac_FULL(66,96)                                       
      JVS(333) = B(271)
C JVS(334) = Jac_FULL(66,97)                                       
      JVS(334) = 0
C JVS(335) = Jac_FULL(66,98)                                       
      JVS(335) = B(272)-B(314)
C JVS(336) = Jac_FULL(66,99)                                       
      JVS(336) = 0.45*B(187)+0.9*B(239)+B(248)+B(253)+B(255)+B(257)
     &          +B(332)+B(334)+B(338)+B(340)+B(342)+B(344)+B(346)
     &          +B(348)+B(350)+B(352)+0.5*B(353)+0.7*B(562)+0.5*B(564)
     &          +0.7*B(566)
C JVS(337) = Jac_FULL(66,100)                                      
      JVS(337) = 0.5*B(354)+B(365)
C JVS(338) = Jac_FULL(66,102)                                      
      JVS(338) = B(249)
C JVS(339) = Jac_FULL(67,67)                                       
      JVS(339) = -B(11)-B(26)-B(35)-B(252)-B(370)
C JVS(340) = Jac_FULL(67,90)                                       
      JVS(340) = -B(12)
C JVS(341) = Jac_FULL(67,97)                                       
      JVS(341) = -B(371)
C JVS(342) = Jac_FULL(67,98)                                       
      JVS(342) = -B(27)+B(29)
C JVS(343) = Jac_FULL(67,99)                                       
      JVS(343) = -B(253)
C JVS(344) = Jac_FULL(67,102)                                      
      JVS(344) = B(32)
C JVS(345) = Jac_FULL(68,58)                                       
      JVS(345) = 0.14*B(546)
C JVS(346) = Jac_FULL(68,67)                                       
      JVS(346) = 0.5*B(370)
C JVS(347) = Jac_FULL(68,68)                                       
      JVS(347) = -B(406)-B(408)
C JVS(348) = Jac_FULL(68,74)                                       
      JVS(348) = B(376)
C JVS(349) = Jac_FULL(68,80)                                       
      JVS(349) = B(558)
C JVS(350) = Jac_FULL(68,81)                                       
      JVS(350) = 0
C JVS(351) = Jac_FULL(68,88)                                       
      JVS(351) = B(426)
C JVS(352) = Jac_FULL(68,89)                                       
      JVS(352) = 0
C JVS(353) = Jac_FULL(68,90)                                       
      JVS(353) = -B(407)
C JVS(354) = Jac_FULL(68,92)                                       
      JVS(354) = B(387)+B(427)+B(430)
C JVS(355) = Jac_FULL(68,97)                                       
      JVS(355) = 0.5*B(371)
C JVS(356) = Jac_FULL(68,98)                                       
      JVS(356) = B(377)+0.14*B(547)+B(559)
C JVS(357) = Jac_FULL(68,99)                                       
      JVS(357) = 0
C JVS(358) = Jac_FULL(68,100)                                      
      JVS(358) = B(431)
C JVS(359) = Jac_FULL(68,102)                                      
      JVS(359) = B(388)
C JVS(360) = Jac_FULL(69,69)                                       
      JVS(360) = -B(549)-B(551)-B(553)-B(555)
C JVS(361) = Jac_FULL(69,81)                                       
      JVS(361) = B(506)
C JVS(362) = Jac_FULL(69,96)                                       
      JVS(362) = B(536)
C JVS(363) = Jac_FULL(69,97)                                       
      JVS(363) = -B(550)
C JVS(364) = Jac_FULL(69,98)                                       
      JVS(364) = -B(554)
C JVS(365) = Jac_FULL(69,99)                                       
      JVS(365) = B(507)-B(552)
C JVS(366) = Jac_FULL(69,101)                                      
      JVS(366) = B(537)
C JVS(367) = Jac_FULL(70,31)                                       
      JVS(367) = B(432)
C JVS(368) = Jac_FULL(70,70)                                       
      JVS(368) = -B(434)-B(436)-2*B(438)-B(439)
C JVS(369) = Jac_FULL(70,76)                                       
      JVS(369) = B(416)
C JVS(370) = Jac_FULL(70,87)                                       
      JVS(370) = 0
C JVS(371) = Jac_FULL(70,93)                                       
      JVS(371) = -B(435)
C JVS(372) = Jac_FULL(70,97)                                       
      JVS(372) = B(417)
C JVS(373) = Jac_FULL(70,98)                                       
      JVS(373) = B(433)
C JVS(374) = Jac_FULL(70,100)                                      
      JVS(374) = -B(440)
C JVS(375) = Jac_FULL(70,102)                                      
      JVS(375) = -B(437)
C JVS(376) = Jac_FULL(71,35)                                       
      JVS(376) = B(87)+B(333)
C JVS(377) = Jac_FULL(71,46)                                       
      JVS(377) = B(492)
C JVS(378) = Jac_FULL(71,47)                                       
      JVS(378) = B(489)
C JVS(379) = Jac_FULL(71,71)                                       
      JVS(379) = -B(103)-B(105)-2*B(107)-2*B(108)-B(109)-B(111)-B(113)
C JVS(380) = Jac_FULL(71,93)                                       
      JVS(380) = -B(104)
C JVS(381) = Jac_FULL(71,98)                                       
      JVS(381) = B(88)
C JVS(382) = Jac_FULL(71,99)                                       
      JVS(382) = B(334)
C JVS(383) = Jac_FULL(71,100)                                      
      JVS(383) = -B(110)-B(112)-B(114)
C JVS(384) = Jac_FULL(71,102)                                      
      JVS(384) = -B(106)
C JVS(385) = Jac_FULL(72,53)                                       
      JVS(385) = B(306)
C JVS(386) = Jac_FULL(72,63)                                       
      JVS(386) = B(323)
C JVS(387) = Jac_FULL(72,69)                                       
      JVS(387) = B(551)
C JVS(388) = Jac_FULL(72,72)                                       
      JVS(388) = -B(264)-B(266)-B(512)
C JVS(389) = Jac_FULL(72,80)                                       
      JVS(389) = B(502)
C JVS(390) = Jac_FULL(72,81)                                       
      JVS(390) = 0
C JVS(391) = Jac_FULL(72,90)                                       
      JVS(391) = 0
C JVS(392) = Jac_FULL(72,91)                                       
      JVS(392) = 0
C JVS(393) = Jac_FULL(72,94)                                       
      JVS(393) = 0
C JVS(394) = Jac_FULL(72,96)                                       
      JVS(394) = B(287)
C JVS(395) = Jac_FULL(72,97)                                       
      JVS(395) = -B(513)
C JVS(396) = Jac_FULL(72,98)                                       
      JVS(396) = -B(265)
C JVS(397) = Jac_FULL(72,99)                                       
      JVS(397) = B(307)+B(324)+B(503)+B(552)
C JVS(398) = Jac_FULL(72,101)                                      
      JVS(398) = 0
C JVS(399) = Jac_FULL(73,60)                                       
      JVS(399) = B(156)+0.08*B(343)
C JVS(400) = Jac_FULL(73,71)                                       
      JVS(400) = 0
C JVS(401) = Jac_FULL(73,73)                                       
      JVS(401) = -B(115)-B(117)-B(119)-2*B(121)-2*B(122)-B(123)-B(125)
     &          -B(127)
C JVS(402) = Jac_FULL(73,76)                                       
      JVS(402) = B(89)+B(93)
C JVS(403) = Jac_FULL(73,93)                                       
      JVS(403) = -B(116)-B(118)
C JVS(404) = Jac_FULL(73,95)                                       
      JVS(404) = B(94)
C JVS(405) = Jac_FULL(73,98)                                       
      JVS(405) = B(90)+B(157)
C JVS(406) = Jac_FULL(73,99)                                       
      JVS(406) = 0.08*B(344)
C JVS(407) = Jac_FULL(73,100)                                      
      JVS(407) = -B(124)-B(126)-B(128)
C JVS(408) = Jac_FULL(73,102)                                      
      JVS(408) = -B(120)
C JVS(409) = Jac_FULL(74,29)                                       
      JVS(409) = B(400)
C JVS(410) = Jac_FULL(74,51)                                       
      JVS(410) = B(412)
C JVS(411) = Jac_FULL(74,58)                                       
      JVS(411) = B(522)
C JVS(412) = Jac_FULL(74,74)                                       
      JVS(412) = -B(376)-B(378)-B(380)-B(504)-B(524)
C JVS(413) = Jac_FULL(74,80)                                       
      JVS(413) = B(516)
C JVS(414) = Jac_FULL(74,81)                                       
      JVS(414) = 0
C JVS(415) = Jac_FULL(74,89)                                       
      JVS(415) = -B(525)
C JVS(416) = Jac_FULL(74,90)                                       
      JVS(416) = -B(379)
C JVS(417) = Jac_FULL(74,91)                                       
      JVS(417) = 0
C JVS(418) = Jac_FULL(74,92)                                       
      JVS(418) = B(398)
C JVS(419) = Jac_FULL(74,97)                                       
      JVS(419) = B(401)+B(413)+B(517)+B(523)
C JVS(420) = Jac_FULL(74,98)                                       
      JVS(420) = -B(377)
C JVS(421) = Jac_FULL(74,99)                                       
      JVS(421) = -B(505)
C JVS(422) = Jac_FULL(75,32)                                       
      JVS(422) = 2*B(570)+2*B(574)
C JVS(423) = Jac_FULL(75,42)                                       
      JVS(423) = B(244)
C JVS(424) = Jac_FULL(75,43)                                       
      JVS(424) = B(476)
C JVS(425) = Jac_FULL(75,63)                                       
      JVS(425) = 0.5*B(327)
C JVS(426) = Jac_FULL(75,64)                                       
      JVS(426) = B(404)
C JVS(427) = Jac_FULL(75,67)                                       
      JVS(427) = 0
C JVS(428) = Jac_FULL(75,75)                                       
      JVS(428) = -B(73)-B(75)-B(256)-B(569)-B(573)
C JVS(429) = Jac_FULL(75,76)                                       
      JVS(429) = 0
C JVS(430) = Jac_FULL(75,77)                                       
      JVS(430) = 0
C JVS(431) = Jac_FULL(75,78)                                       
      JVS(431) = 0
C JVS(432) = Jac_FULL(75,79)                                       
      JVS(432) = B(151)
C JVS(433) = Jac_FULL(75,87)                                       
      JVS(433) = B(184)
C JVS(434) = Jac_FULL(75,88)                                       
      JVS(434) = B(145)
C JVS(435) = Jac_FULL(75,89)                                       
      JVS(435) = 0
C JVS(436) = Jac_FULL(75,90)                                       
      JVS(436) = 0
C JVS(437) = Jac_FULL(75,91)                                       
      JVS(437) = B(50)
C JVS(438) = Jac_FULL(75,95)                                       
      JVS(438) = B(146)+B(152)+B(185)+B(245)+B(405)+B(477)
C JVS(439) = Jac_FULL(75,96)                                       
      JVS(439) = 0
C JVS(440) = Jac_FULL(75,97)                                       
      JVS(440) = 0
C JVS(441) = Jac_FULL(75,98)                                       
      JVS(441) = B(51)-B(74)+0.5*B(328)
C JVS(442) = Jac_FULL(75,99)                                       
      JVS(442) = -B(257)
C JVS(443) = Jac_FULL(75,100)                                      
      JVS(443) = 0
C JVS(444) = Jac_FULL(75,102)                                      
      JVS(444) = 0
C JVS(445) = Jac_FULL(76,76)                                       
      JVS(445) = -B(89)-B(91)-B(93)-B(335)-B(416)
C JVS(446) = Jac_FULL(76,94)                                       
      JVS(446) = -B(92)
C JVS(447) = Jac_FULL(76,95)                                       
      JVS(447) = -B(94)
C JVS(448) = Jac_FULL(76,97)                                       
      JVS(448) = -B(417)
C JVS(449) = Jac_FULL(76,98)                                       
      JVS(449) = -B(90)
C JVS(450) = Jac_FULL(76,99)                                       
      JVS(450) = -B(336)
C JVS(451) = Jac_FULL(77,77)                                       
      JVS(451) = -B(236)-B(238)-B(240)
C JVS(452) = Jac_FULL(77,87)                                       
      JVS(452) = B(182)+0.55*B(186)+B(190)+B(192)+B(194)
C JVS(453) = Jac_FULL(77,92)                                       
      JVS(453) = B(193)-B(241)
C JVS(454) = Jac_FULL(77,96)                                       
      JVS(454) = B(191)
C JVS(455) = Jac_FULL(77,98)                                       
      JVS(455) = B(183)-B(237)
C JVS(456) = Jac_FULL(77,99)                                       
      JVS(456) = 0.55*B(187)-B(239)
C JVS(457) = Jac_FULL(77,101)                                      
      JVS(457) = B(195)
C JVS(458) = Jac_FULL(78,71)                                       
      JVS(458) = B(105)
C JVS(459) = Jac_FULL(78,73)                                       
      JVS(459) = B(119)
C JVS(460) = Jac_FULL(78,76)                                       
      JVS(460) = 0
C JVS(461) = Jac_FULL(78,78)                                       
      JVS(461) = -B(164)-B(166)-B(168)-B(345)-B(422)
C JVS(462) = Jac_FULL(78,82)                                       
      JVS(462) = B(131)
C JVS(463) = Jac_FULL(78,93)                                       
      JVS(463) = 0
C JVS(464) = Jac_FULL(78,94)                                       
      JVS(464) = 0
C JVS(465) = Jac_FULL(78,95)                                       
      JVS(465) = 0
C JVS(466) = Jac_FULL(78,97)                                       
      JVS(466) = -B(423)
C JVS(467) = Jac_FULL(78,98)                                       
      JVS(467) = -B(165)-B(167)
C JVS(468) = Jac_FULL(78,99)                                       
      JVS(468) = -B(346)
C JVS(469) = Jac_FULL(78,100)                                      
      JVS(469) = B(99)
C JVS(470) = Jac_FULL(78,102)                                      
      JVS(470) = B(100)+B(106)+B(120)+B(132)
C JVS(471) = Jac_FULL(79,60)                                       
      JVS(471) = B(158)+0.92*B(343)
C JVS(472) = Jac_FULL(79,70)                                       
      JVS(472) = B(434)+2*B(438)+B(439)
C JVS(473) = Jac_FULL(79,71)                                       
      JVS(473) = B(103)+B(107)+2*B(108)+B(109)+B(113)
C JVS(474) = Jac_FULL(79,73)                                       
      JVS(474) = B(115)+B(121)+B(122)+B(125)+0.5*B(127)
C JVS(475) = Jac_FULL(79,76)                                       
      JVS(475) = 0
C JVS(476) = Jac_FULL(79,79)                                       
      JVS(476) = -B(149)-B(151)-B(153)-B(339)-B(420)
C JVS(477) = Jac_FULL(79,87)                                       
      JVS(477) = 0
C JVS(478) = Jac_FULL(79,93)                                       
      JVS(478) = B(104)+B(116)+B(435)
C JVS(479) = Jac_FULL(79,94)                                       
      JVS(479) = 0
C JVS(480) = Jac_FULL(79,95)                                       
      JVS(480) = -B(152)
C JVS(481) = Jac_FULL(79,97)                                       
      JVS(481) = -B(421)
C JVS(482) = Jac_FULL(79,98)                                       
      JVS(482) = -B(150)+B(159)
C JVS(483) = Jac_FULL(79,99)                                       
      JVS(483) = -B(340)+0.92*B(344)
C JVS(484) = Jac_FULL(79,100)                                      
      JVS(484) = B(110)+B(114)+B(126)+0.5*B(128)+B(440)
C JVS(485) = Jac_FULL(79,102)                                      
      JVS(485) = 0
C JVS(486) = Jac_FULL(80,53)                                       
      JVS(486) = B(514)
C JVS(487) = Jac_FULL(80,69)                                       
      JVS(487) = B(549)
C JVS(488) = Jac_FULL(80,72)                                       
      JVS(488) = B(512)
C JVS(489) = Jac_FULL(80,74)                                       
      JVS(489) = B(504)
C JVS(490) = Jac_FULL(80,80)                                       
      JVS(490) = -B(502)-B(516)-B(556)-B(558)-B(560)
C JVS(491) = Jac_FULL(80,81)                                       
      JVS(491) = 0
C JVS(492) = Jac_FULL(80,89)                                       
      JVS(492) = 0
C JVS(493) = Jac_FULL(80,90)                                       
      JVS(493) = -B(557)
C JVS(494) = Jac_FULL(80,91)                                       
      JVS(494) = 0
C JVS(495) = Jac_FULL(80,92)                                       
      JVS(495) = B(534)
C JVS(496) = Jac_FULL(80,94)                                       
      JVS(496) = 0
C JVS(497) = Jac_FULL(80,96)                                       
      JVS(497) = B(535)
C JVS(498) = Jac_FULL(80,97)                                       
      JVS(498) = B(513)+B(515)-B(517)+B(550)
C JVS(499) = Jac_FULL(80,98)                                       
      JVS(499) = -B(559)
C JVS(500) = Jac_FULL(80,99)                                       
      JVS(500) = -B(503)+B(505)
C JVS(501) = Jac_FULL(80,101)                                      
      JVS(501) = 0
C JVS(502) = Jac_FULL(81,30)                                       
      JVS(502) = B(479)
C JVS(503) = Jac_FULL(81,81)                                       
      JVS(503) = -B(450)-B(452)-B(454)-B(456)-B(506)-B(518)-B(528)
C JVS(504) = Jac_FULL(81,89)                                       
      JVS(504) = B(449)
C JVS(505) = Jac_FULL(81,90)                                       
      JVS(505) = -B(451)
C JVS(506) = Jac_FULL(81,91)                                       
      JVS(506) = 0
C JVS(507) = Jac_FULL(81,92)                                       
      JVS(507) = -B(529)
C JVS(508) = Jac_FULL(81,95)                                       
      JVS(508) = -B(455)
C JVS(509) = Jac_FULL(81,97)                                       
      JVS(509) = -B(519)
C JVS(510) = Jac_FULL(81,98)                                       
      JVS(510) = -B(453)
C JVS(511) = Jac_FULL(81,99)                                       
      JVS(511) = -B(507)
C JVS(512) = Jac_FULL(81,101)                                      
      JVS(512) = 0.05*B(465)
C JVS(513) = Jac_FULL(82,57)                                       
      JVS(513) = B(140)
C JVS(514) = Jac_FULL(82,65)                                       
      JVS(514) = B(359)+2*B(363)+B(364)
C JVS(515) = Jac_FULL(82,76)                                       
      JVS(515) = 0
C JVS(516) = Jac_FULL(82,79)                                       
      JVS(516) = B(149)+B(151)+B(339)+B(420)
C JVS(517) = Jac_FULL(82,82)                                       
      JVS(517) = -B(129)-B(131)-2*B(133)-B(134)-B(136)-B(138)
C JVS(518) = Jac_FULL(82,87)                                       
      JVS(518) = 0
C JVS(519) = Jac_FULL(82,91)                                       
      JVS(519) = -B(139)
C JVS(520) = Jac_FULL(82,93)                                       
      JVS(520) = -B(130)+B(360)
C JVS(521) = Jac_FULL(82,94)                                       
      JVS(521) = 0
C JVS(522) = Jac_FULL(82,95)                                       
      JVS(522) = B(152)
C JVS(523) = Jac_FULL(82,97)                                       
      JVS(523) = B(421)
C JVS(524) = Jac_FULL(82,98)                                       
      JVS(524) = B(150)
C JVS(525) = Jac_FULL(82,99)                                       
      JVS(525) = B(340)
C JVS(526) = Jac_FULL(82,100)                                      
      JVS(526) = -B(135)-B(137)+B(365)
C JVS(527) = Jac_FULL(82,102)                                      
      JVS(527) = -B(132)
C JVS(528) = Jac_FULL(83,21)                                       
      JVS(528) = B(312)
C JVS(529) = Jac_FULL(83,83)                                       
      JVS(529) = -B(291)-B(293)-B(295)-B(297)-B(299)-B(301)-B(303)
     &          -B(305)-B(510)
C JVS(530) = Jac_FULL(83,90)                                       
      JVS(530) = -B(296)-B(298)
C JVS(531) = Jac_FULL(83,92)                                       
      JVS(531) = B(530)
C JVS(532) = Jac_FULL(83,93)                                       
      JVS(532) = -B(304)
C JVS(533) = Jac_FULL(83,94)                                       
      JVS(533) = B(277)-B(302)
C JVS(534) = Jac_FULL(83,95)                                       
      JVS(534) = B(285)
C JVS(535) = Jac_FULL(83,96)                                       
      JVS(535) = B(278)+B(286)+B(289)-B(292)+B(531)+B(540)
C JVS(536) = Jac_FULL(83,97)                                       
      JVS(536) = -B(511)
C JVS(537) = Jac_FULL(83,98)                                       
      JVS(537) = -B(300)
C JVS(538) = Jac_FULL(83,99)                                       
      JVS(538) = -B(294)
C JVS(539) = Jac_FULL(83,101)                                      
      JVS(539) = B(541)
C JVS(540) = Jac_FULL(84,61)                                       
      JVS(540) = B(205)+B(207)+B(211)
C JVS(541) = Jac_FULL(84,77)                                       
      JVS(541) = 0.1*B(238)
C JVS(542) = Jac_FULL(84,84)                                       
      JVS(542) = -B(215)-B(217)-B(219)
C JVS(543) = Jac_FULL(84,86)                                       
      JVS(543) = 0
C JVS(544) = Jac_FULL(84,87)                                       
      JVS(544) = 0
C JVS(545) = Jac_FULL(84,91)                                       
      JVS(545) = B(208)-B(218)-B(220)
C JVS(546) = Jac_FULL(84,92)                                       
      JVS(546) = 0
C JVS(547) = Jac_FULL(84,93)                                       
      JVS(547) = B(212)
C JVS(548) = Jac_FULL(84,94)                                       
      JVS(548) = B(206)-B(216)
C JVS(549) = Jac_FULL(84,96)                                       
      JVS(549) = 0
C JVS(550) = Jac_FULL(84,98)                                       
      JVS(550) = 0
C JVS(551) = Jac_FULL(84,99)                                       
      JVS(551) = 0.1*B(239)
C JVS(552) = Jac_FULL(84,100)                                      
      JVS(552) = 0
C JVS(553) = Jac_FULL(84,101)                                      
      JVS(553) = 0
C JVS(554) = Jac_FULL(84,102)                                      
      JVS(554) = 0
C JVS(555) = Jac_FULL(85,33)                                       
      JVS(555) = B(235)
C JVS(556) = Jac_FULL(85,42)                                       
      JVS(556) = 0.95*B(242)+B(244)
C JVS(557) = Jac_FULL(85,61)                                       
      JVS(557) = 0
C JVS(558) = Jac_FULL(85,77)                                       
      JVS(558) = 0
C JVS(559) = Jac_FULL(85,84)                                       
      JVS(559) = B(215)+B(217)
C JVS(560) = Jac_FULL(85,85)                                       
      JVS(560) = -B(221)-B(222)-B(224)-B(226)-B(228)
C JVS(561) = Jac_FULL(85,86)                                       
      JVS(561) = 0
C JVS(562) = Jac_FULL(85,87)                                       
      JVS(562) = 0
C JVS(563) = Jac_FULL(85,91)                                       
      JVS(563) = B(218)-B(225)-B(227)
C JVS(564) = Jac_FULL(85,92)                                       
      JVS(564) = 0
C JVS(565) = Jac_FULL(85,93)                                       
      JVS(565) = -B(229)
C JVS(566) = Jac_FULL(85,94)                                       
      JVS(566) = B(216)-B(223)
C JVS(567) = Jac_FULL(85,95)                                       
      JVS(567) = B(245)
C JVS(568) = Jac_FULL(85,96)                                       
      JVS(568) = 0
C JVS(569) = Jac_FULL(85,98)                                       
      JVS(569) = 0.95*B(243)
C JVS(570) = Jac_FULL(85,99)                                       
      JVS(570) = 0
C JVS(571) = Jac_FULL(85,100)                                      
      JVS(571) = 0
C JVS(572) = Jac_FULL(85,101)                                      
      JVS(572) = 0
C JVS(573) = Jac_FULL(85,102)                                      
      JVS(573) = 0
C JVS(574) = Jac_FULL(86,39)                                       
      JVS(574) = B(232)
C JVS(575) = Jac_FULL(86,77)                                       
      JVS(575) = 0.9*B(238)
C JVS(576) = Jac_FULL(86,86)                                       
      JVS(576) = -B(196)-B(198)-2*B(200)-B(201)-B(203)
C JVS(577) = Jac_FULL(86,87)                                       
      JVS(577) = B(180)+B(184)+0.45*B(186)
C JVS(578) = Jac_FULL(86,91)                                       
      JVS(578) = -B(204)
C JVS(579) = Jac_FULL(86,92)                                       
      JVS(579) = 0
C JVS(580) = Jac_FULL(86,93)                                       
      JVS(580) = -B(197)
C JVS(581) = Jac_FULL(86,95)                                       
      JVS(581) = B(185)
C JVS(582) = Jac_FULL(86,96)                                       
      JVS(582) = 0
C JVS(583) = Jac_FULL(86,98)                                       
      JVS(583) = B(181)+B(233)
C JVS(584) = Jac_FULL(86,99)                                       
      JVS(584) = 0.45*B(187)+0.9*B(239)
C JVS(585) = Jac_FULL(86,100)                                      
      JVS(585) = -B(202)
C JVS(586) = Jac_FULL(86,101)                                      
      JVS(586) = 0
C JVS(587) = Jac_FULL(86,102)                                      
      JVS(587) = -B(199)
C JVS(588) = Jac_FULL(87,87)                                       
      JVS(588) = -B(180)-B(182)-B(184)-B(186)-B(188)-B(190)-B(192)
     &          -B(194)
C JVS(589) = Jac_FULL(87,92)                                       
      JVS(589) = -B(193)
C JVS(590) = Jac_FULL(87,95)                                       
      JVS(590) = -B(185)
C JVS(591) = Jac_FULL(87,96)                                       
      JVS(591) = -B(191)
C JVS(592) = Jac_FULL(87,97)                                       
      JVS(592) = -B(189)
C JVS(593) = Jac_FULL(87,98)                                       
      JVS(593) = -B(181)-B(183)
C JVS(594) = Jac_FULL(87,99)                                       
      JVS(594) = -B(187)
C JVS(595) = Jac_FULL(87,101)                                      
      JVS(595) = -B(195)
C JVS(596) = Jac_FULL(88,1)                                        
      JVS(596) = B(483)
C JVS(597) = Jac_FULL(88,39)                                       
      JVS(597) = B(234)
C JVS(598) = Jac_FULL(88,56)                                       
      JVS(598) = B(154)+B(341)
C JVS(599) = Jac_FULL(88,57)                                       
      JVS(599) = B(141)+B(351)
C JVS(600) = Jac_FULL(88,59)                                       
      JVS(600) = B(495)+2*B(499)+2*B(500)
C JVS(601) = Jac_FULL(88,65)                                       
      JVS(601) = B(364)
C JVS(602) = Jac_FULL(88,70)                                       
      JVS(602) = B(439)
C JVS(603) = Jac_FULL(88,71)                                       
      JVS(603) = B(111)+B(113)
C JVS(604) = Jac_FULL(88,73)                                       
      JVS(604) = 2*B(117)+2*B(122)+B(123)+2*B(127)
C JVS(605) = Jac_FULL(88,76)                                       
      JVS(605) = B(91)
C JVS(606) = Jac_FULL(88,78)                                       
      JVS(606) = B(166)+B(168)+B(345)
C JVS(607) = Jac_FULL(88,82)                                       
      JVS(607) = B(134)+B(136)
C JVS(608) = Jac_FULL(88,86)                                       
      JVS(608) = B(196)+2*B(200)+2*B(201)
C JVS(609) = Jac_FULL(88,87)                                       
      JVS(609) = 0
C JVS(610) = Jac_FULL(88,88)                                       
      JVS(610) = -B(143)-B(145)-B(147)-B(148)-B(337)-B(418)-B(426)
C JVS(611) = Jac_FULL(88,91)                                       
      JVS(611) = 0
C JVS(612) = Jac_FULL(88,92)                                       
      JVS(612) = -B(427)+B(428)+B(430)
C JVS(613) = Jac_FULL(88,93)                                       
      JVS(613) = B(97)+2*B(118)+B(197)+B(496)
C JVS(614) = Jac_FULL(88,94)                                       
      JVS(614) = B(92)
C JVS(615) = Jac_FULL(88,95)                                       
      JVS(615) = -B(146)
C JVS(616) = Jac_FULL(88,96)                                       
      JVS(616) = B(355)
C JVS(617) = Jac_FULL(88,97)                                       
      JVS(617) = -B(419)
C JVS(618) = Jac_FULL(88,98)                                       
      JVS(618) = B(142)-B(144)+B(155)+B(167)
C JVS(619) = Jac_FULL(88,99)                                       
      JVS(619) = -B(338)+B(342)+B(346)+B(352)+0.5*B(353)
C JVS(620) = Jac_FULL(88,100)                                      
      JVS(620) = B(98)+B(101)+2*B(102)+B(112)+B(114)+B(124)+2*B(128)
     &          +B(135)+B(137)+2*B(202)+0.5*B(354)+B(356)+B(365)
     &          +B(429)+B(431)+B(440)+B(493)+2*B(501)
C JVS(621) = Jac_FULL(88,101)                                      
      JVS(621) = B(494)
C JVS(622) = Jac_FULL(88,102)                                      
      JVS(622) = 0
C JVS(623) = Jac_FULL(89,1)                                        
      JVS(623) = B(483)
C JVS(624) = Jac_FULL(89,2)                                        
      JVS(624) = B(568)
C JVS(625) = Jac_FULL(89,3)                                        
      JVS(625) = B(567)
C JVS(626) = Jac_FULL(89,20)                                       
      JVS(626) = 2*B(473)
C JVS(627) = Jac_FULL(89,30)                                       
      JVS(627) = B(480)
C JVS(628) = Jac_FULL(89,36)                                       
      JVS(628) = B(478)
C JVS(629) = Jac_FULL(89,43)                                       
      JVS(629) = B(474)+B(476)
C JVS(630) = Jac_FULL(89,44)                                       
      JVS(630) = B(482)
C JVS(631) = Jac_FULL(89,45)                                       
      JVS(631) = 0.3*B(484)+B(486)+0.3*B(561)
C JVS(632) = Jac_FULL(89,46)                                       
      JVS(632) = 0.3*B(490)+B(492)+0.3*B(565)
C JVS(633) = Jac_FULL(89,47)                                       
      JVS(633) = 0.5*B(487)+B(489)+0.5*B(563)
C JVS(634) = Jac_FULL(89,55)                                       
      JVS(634) = B(472)
C JVS(635) = Jac_FULL(89,58)                                       
      JVS(635) = B(522)+0.14*B(546)+B(548)
C JVS(636) = Jac_FULL(89,59)                                       
      JVS(636) = B(495)+2*B(499)+B(500)
C JVS(637) = Jac_FULL(89,69)                                       
      JVS(637) = B(549)+B(551)+B(553)+B(555)
C JVS(638) = Jac_FULL(89,74)                                       
      JVS(638) = -B(524)
C JVS(639) = Jac_FULL(89,80)                                       
      JVS(639) = 0
C JVS(640) = Jac_FULL(89,81)                                       
      JVS(640) = B(450)+B(452)+B(454)+2*B(456)+B(506)+B(518)
C JVS(641) = Jac_FULL(89,87)                                       
      JVS(641) = B(194)
C JVS(642) = Jac_FULL(89,89)                                       
      JVS(642) = -B(441)-B(443)-B(445)-B(447)-2*B(449)-B(525)-B(526)
C JVS(643) = Jac_FULL(89,90)                                       
      JVS(643) = B(451)+B(457)
C JVS(644) = Jac_FULL(89,91)                                       
      JVS(644) = -B(446)
C JVS(645) = Jac_FULL(89,92)                                       
      JVS(645) = -B(527)+B(542)
C JVS(646) = Jac_FULL(89,93)                                       
      JVS(646) = B(461)+B(496)
C JVS(647) = Jac_FULL(89,94)                                       
      JVS(647) = -B(442)
C JVS(648) = Jac_FULL(89,95)                                       
      JVS(648) = -B(448)+B(455)+B(477)
C JVS(649) = Jac_FULL(89,96)                                       
      JVS(649) = B(538)+B(540)
C JVS(650) = Jac_FULL(89,97)                                       
      JVS(650) = B(519)+B(520)+B(523)+B(550)
C JVS(651) = Jac_FULL(89,98)                                       
      JVS(651) = B(453)+B(475)+0.3*B(485)+0.5*B(488)+0.3*B(491)+0.14
     &          *B(547)+B(554)
C JVS(652) = Jac_FULL(89,99)                                       
      JVS(652) = B(507)+B(508)+B(552)+0.3*B(562)+0.5*B(564)+0.3*B(566)
C JVS(653) = Jac_FULL(89,100)                                      
      JVS(653) = 0.5*B(493)+B(501)
C JVS(654) = Jac_FULL(89,101)                                      
      JVS(654) = B(195)+B(458)+B(462)+0.5*B(465)+B(466)+0.5*B(494)
     &          +B(509)+B(521)+B(539)+B(541)+B(543)
C JVS(655) = Jac_FULL(89,102)                                      
      JVS(655) = -B(444)
C JVS(656) = Jac_FULL(90,38)                                       
      JVS(656) = B(1)+B(3)+B(5)
C JVS(657) = Jac_FULL(90,50)                                       
      JVS(657) = 0
C JVS(658) = Jac_FULL(90,51)                                       
      JVS(658) = -B(410)
C JVS(659) = Jac_FULL(90,52)                                       
      JVS(659) = -B(169)
C JVS(660) = Jac_FULL(90,62)                                       
      JVS(660) = -B(315)
C JVS(661) = Jac_FULL(90,63)                                       
      JVS(661) = -B(325)
C JVS(662) = Jac_FULL(90,67)                                       
      JVS(662) = -B(11)
C JVS(663) = Jac_FULL(90,68)                                       
      JVS(663) = -B(406)
C JVS(664) = Jac_FULL(90,69)                                       
      JVS(664) = 0
C JVS(665) = Jac_FULL(90,72)                                       
      JVS(665) = 0
C JVS(666) = Jac_FULL(90,74)                                       
      JVS(666) = -B(378)
C JVS(667) = Jac_FULL(90,80)                                       
      JVS(667) = -B(556)
C JVS(668) = Jac_FULL(90,81)                                       
      JVS(668) = -B(450)
C JVS(669) = Jac_FULL(90,83)                                       
      JVS(669) = -B(295)-B(297)
C JVS(670) = Jac_FULL(90,84)                                       
      JVS(670) = 0
C JVS(671) = Jac_FULL(90,85)                                       
      JVS(671) = 0
C JVS(672) = Jac_FULL(90,86)                                       
      JVS(672) = 0
C JVS(673) = Jac_FULL(90,87)                                       
      JVS(673) = 0
C JVS(674) = Jac_FULL(90,88)                                       
      JVS(674) = 0
C JVS(675) = Jac_FULL(90,89)                                       
      JVS(675) = 0
C JVS(676) = Jac_FULL(90,90)                                       
      JVS(676) = -B(12)-B(13)-B(15)-B(17)-B(36)-B(46)-B(48)-B(59)
     &          -B(170)-B(267)-B(296)-B(298)-B(316)-B(326)-B(379)
     &          -B(383)-B(407)-B(411)-B(451)-B(457)-B(557)
C JVS(677) = Jac_FULL(90,91)                                       
      JVS(677) = -B(47)-B(49)+B(58)
C JVS(678) = Jac_FULL(90,92)                                       
      JVS(678) = -B(384)
C JVS(679) = Jac_FULL(90,93)                                       
      JVS(679) = -B(37)
C JVS(680) = Jac_FULL(90,94)                                       
      JVS(680) = B(4)-B(16)+B(34)
C JVS(681) = Jac_FULL(90,95)                                       
      JVS(681) = -B(60)+B(67)
C JVS(682) = Jac_FULL(90,96)                                       
      JVS(682) = -B(268)
C JVS(683) = Jac_FULL(90,97)                                       
      JVS(683) = 0
C JVS(684) = Jac_FULL(90,98)                                       
      JVS(684) = B(28)
C JVS(685) = Jac_FULL(90,99)                                       
      JVS(685) = 0
C JVS(686) = Jac_FULL(90,100)                                      
      JVS(686) = 0
C JVS(687) = Jac_FULL(90,101)                                      
      JVS(687) = -B(458)
C JVS(688) = Jac_FULL(90,102)                                      
      JVS(688) = 0
C JVS(689) = Jac_FULL(91,22)                                       
      JVS(689) = B(409)
C JVS(690) = Jac_FULL(91,28)                                       
      JVS(690) = B(70)
C JVS(691) = Jac_FULL(91,30)                                       
      JVS(691) = 2*B(479)+B(480)
C JVS(692) = Jac_FULL(91,32)                                       
      JVS(692) = B(68)+B(69)
C JVS(693) = Jac_FULL(91,33)                                       
      JVS(693) = B(235)
C JVS(694) = Jac_FULL(91,40)                                       
      JVS(694) = B(320)+B(322)
C JVS(695) = Jac_FULL(91,41)                                       
      JVS(695) = B(76)+B(77)+B(79)
C JVS(696) = Jac_FULL(91,44)                                       
      JVS(696) = B(481)
C JVS(697) = Jac_FULL(91,51)                                       
      JVS(697) = B(414)
C JVS(698) = Jac_FULL(91,55)                                       
      JVS(698) = B(469)
C JVS(699) = Jac_FULL(91,57)                                       
      JVS(699) = B(140)+B(141)+B(351)
C JVS(700) = Jac_FULL(91,59)                                       
      JVS(700) = B(495)
C JVS(701) = Jac_FULL(91,61)                                       
      JVS(701) = -B(207)-B(209)+B(211)
C JVS(702) = Jac_FULL(91,63)                                       
      JVS(702) = B(329)
C JVS(703) = Jac_FULL(91,65)                                       
      JVS(703) = B(359)
C JVS(704) = Jac_FULL(91,70)                                       
      JVS(704) = B(434)
C JVS(705) = Jac_FULL(91,71)                                       
      JVS(705) = B(103)
C JVS(706) = Jac_FULL(91,73)                                       
      JVS(706) = B(115)+B(117)
C JVS(707) = Jac_FULL(91,75)                                       
      JVS(707) = B(75)
C JVS(708) = Jac_FULL(91,76)                                       
      JVS(708) = 0
C JVS(709) = Jac_FULL(91,77)                                       
      JVS(709) = 0
C JVS(710) = Jac_FULL(91,78)                                       
      JVS(710) = 0
C JVS(711) = Jac_FULL(91,79)                                       
      JVS(711) = 0
C JVS(712) = Jac_FULL(91,81)                                       
      JVS(712) = 0
C JVS(713) = Jac_FULL(91,82)                                       
      JVS(713) = B(129)-B(138)
C JVS(714) = Jac_FULL(91,83)                                       
      JVS(714) = B(303)
C JVS(715) = Jac_FULL(91,84)                                       
      JVS(715) = -B(217)-B(219)
C JVS(716) = Jac_FULL(91,85)                                       
      JVS(716) = -B(224)-B(226)
C JVS(717) = Jac_FULL(91,86)                                       
      JVS(717) = B(196)-B(203)
C JVS(718) = Jac_FULL(91,87)                                       
      JVS(718) = 0
C JVS(719) = Jac_FULL(91,88)                                       
      JVS(719) = 0
C JVS(720) = Jac_FULL(91,89)                                       
      JVS(720) = -B(445)+B(447)
C JVS(721) = Jac_FULL(91,90)                                       
      JVS(721) = B(36)-B(46)-B(48)+B(59)
C JVS(722) = Jac_FULL(91,91)                                       
      JVS(722) = -B(47)-B(49)-B(50)-B(52)-B(54)-B(56)-B(58)-B(139)
     &          -B(204)-B(208)-B(210)-B(218)-B(220)-B(225)-B(227)
     &          -B(258)-B(260)-B(281)-B(372)-B(391)-B(446)-B(463)
C JVS(723) = Jac_FULL(91,92)                                       
      JVS(723) = B(389)-B(392)+B(393)
C JVS(724) = Jac_FULL(91,93)                                       
      JVS(724) = B(37)+B(40)+B(42)+2*B(44)+B(97)+B(104)+B(116)+B(118)
     &          +B(130)+B(197)+B(212)+B(279)+B(304)+B(360)+B(390)
     &          +B(435)+B(461)+B(470)+B(496)
C JVS(725) = Jac_FULL(91,94)                                       
      JVS(725) = B(43)-B(55)
C JVS(726) = Jac_FULL(91,95)                                       
      JVS(726) = 2*B(45)-B(57)+B(60)+B(61)+B(63)+2*B(65)+B(67)+B(262)
     &          +B(283)+B(285)+B(374)+B(394)+B(448)
C JVS(727) = Jac_FULL(91,96)                                       
      JVS(727) = B(280)-B(282)+B(284)+B(286)
C JVS(728) = Jac_FULL(91,97)                                       
      JVS(728) = -B(373)+B(375)
C JVS(729) = Jac_FULL(91,98)                                       
      JVS(729) = -B(51)+B(62)+B(71)+B(78)+B(142)+B(321)
C JVS(730) = Jac_FULL(91,99)                                       
      JVS(730) = -B(259)-B(261)+B(263)+B(352)
C JVS(731) = Jac_FULL(91,100)                                      
      JVS(731) = B(98)
C JVS(732) = Jac_FULL(91,101)                                      
      JVS(732) = B(462)-B(464)
C JVS(733) = Jac_FULL(91,102)                                      
      JVS(733) = B(41)-B(53)+B(64)
C JVS(734) = Jac_FULL(92,29)                                       
      JVS(734) = B(400)
C JVS(735) = Jac_FULL(92,51)                                       
      JVS(735) = B(414)
C JVS(736) = Jac_FULL(92,68)                                       
      JVS(736) = B(406)
C JVS(737) = Jac_FULL(92,74)                                       
      JVS(737) = B(378)
C JVS(738) = Jac_FULL(92,77)                                       
      JVS(738) = -B(240)
C JVS(739) = Jac_FULL(92,80)                                       
      JVS(739) = B(556)
C JVS(740) = Jac_FULL(92,81)                                       
      JVS(740) = -B(528)
C JVS(741) = Jac_FULL(92,83)                                       
      JVS(741) = B(510)
C JVS(742) = Jac_FULL(92,87)                                       
      JVS(742) = -B(192)
C JVS(743) = Jac_FULL(92,88)                                       
      JVS(743) = -B(426)
C JVS(744) = Jac_FULL(92,89)                                       
      JVS(744) = -B(526)
C JVS(745) = Jac_FULL(92,90)                                       
      JVS(745) = B(379)-B(383)+B(407)+B(557)
C JVS(746) = Jac_FULL(92,91)                                       
      JVS(746) = -B(391)
C JVS(747) = Jac_FULL(92,92)                                       
      JVS(747) = -B(193)-B(241)-B(381)-B(384)-B(385)-B(387)-B(389)
     &          -B(392)-B(393)-B(395)-2*B(397)-2*B(398)-B(399)-B(427)
     &          -B(428)-B(430)-B(527)-B(529)-B(530)-B(532)-B(534)
     &          -B(542)-B(544)
C JVS(748) = Jac_FULL(92,93)                                       
      JVS(748) = -B(390)
C JVS(749) = Jac_FULL(92,94)                                       
      JVS(749) = B(366)-B(396)
C JVS(750) = Jac_FULL(92,95)                                       
      JVS(750) = B(374)-B(394)
C JVS(751) = Jac_FULL(92,96)                                       
      JVS(751) = -B(531)-B(533)-B(535)
C JVS(752) = Jac_FULL(92,97)                                       
      JVS(752) = B(367)+B(375)-B(382)+B(401)+B(511)+B(520)
C JVS(753) = Jac_FULL(92,98)                                       
      JVS(753) = -B(386)
C JVS(754) = Jac_FULL(92,99)                                       
      JVS(754) = 0
C JVS(755) = Jac_FULL(92,100)                                      
      JVS(755) = -B(429)-B(431)
C JVS(756) = Jac_FULL(92,101)                                      
      JVS(756) = B(521)-B(543)-B(545)
C JVS(757) = Jac_FULL(92,102)                                      
      JVS(757) = -B(388)
C JVS(758) = Jac_FULL(93,28)                                       
      JVS(758) = B(72)
C JVS(759) = Jac_FULL(93,55)                                       
      JVS(759) = -B(469)
C JVS(760) = Jac_FULL(93,59)                                       
      JVS(760) = -B(495)
C JVS(761) = Jac_FULL(93,61)                                       
      JVS(761) = B(207)-B(211)-B(213)
C JVS(762) = Jac_FULL(93,65)                                       
      JVS(762) = -B(359)
C JVS(763) = Jac_FULL(93,70)                                       
      JVS(763) = -B(434)
C JVS(764) = Jac_FULL(93,71)                                       
      JVS(764) = -B(103)
C JVS(765) = Jac_FULL(93,73)                                       
      JVS(765) = -B(115)-B(117)
C JVS(766) = Jac_FULL(93,76)                                       
      JVS(766) = 0
C JVS(767) = Jac_FULL(93,82)                                       
      JVS(767) = -B(129)
C JVS(768) = Jac_FULL(93,83)                                       
      JVS(768) = -B(303)
C JVS(769) = Jac_FULL(93,84)                                       
      JVS(769) = B(217)+B(219)
C JVS(770) = Jac_FULL(93,85)                                       
      JVS(770) = B(224)
C JVS(771) = Jac_FULL(93,86)                                       
      JVS(771) = -B(196)
C JVS(772) = Jac_FULL(93,87)                                       
      JVS(772) = 0
C JVS(773) = Jac_FULL(93,90)                                       
      JVS(773) = -B(36)+B(46)
C JVS(774) = Jac_FULL(93,91)                                       
      JVS(774) = B(47)+B(58)+B(208)+B(218)+B(220)+B(225)
C JVS(775) = Jac_FULL(93,92)                                       
      JVS(775) = -B(389)
C JVS(776) = Jac_FULL(93,93)                                       
      JVS(776) = -B(37)-B(38)-B(40)-B(42)-B(44)-B(97)-B(104)-B(116)
     &          -B(118)-B(130)-B(197)-B(212)-B(214)-B(279)-B(304)
     &          -B(360)-B(390)-B(435)-B(461)-B(470)-B(496)
C JVS(777) = Jac_FULL(93,94)                                       
      JVS(777) = -B(43)
C JVS(778) = Jac_FULL(93,95)                                       
      JVS(778) = -B(45)+B(66)
C JVS(779) = Jac_FULL(93,96)                                       
      JVS(779) = -B(280)
C JVS(780) = Jac_FULL(93,97)                                       
      JVS(780) = 0
C JVS(781) = Jac_FULL(93,98)                                       
      JVS(781) = -B(39)
C JVS(782) = Jac_FULL(93,99)                                       
      JVS(782) = 0
C JVS(783) = Jac_FULL(93,100)                                      
      JVS(783) = -B(98)
C JVS(784) = Jac_FULL(93,101)                                      
      JVS(784) = -B(462)
C JVS(785) = Jac_FULL(93,102)                                      
      JVS(785) = -B(41)
C JVS(786) = Jac_FULL(94,38)                                       
      JVS(786) = -B(3)
C JVS(787) = Jac_FULL(94,50)                                       
      JVS(787) = 0
C JVS(788) = Jac_FULL(94,52)                                       
      JVS(788) = -B(173)
C JVS(789) = Jac_FULL(94,53)                                       
      JVS(789) = -B(308)
C JVS(790) = Jac_FULL(94,61)                                       
      JVS(790) = -B(205)
C JVS(791) = Jac_FULL(94,76)                                       
      JVS(791) = -B(91)
C JVS(792) = Jac_FULL(94,83)                                       
      JVS(792) = -B(301)+B(305)
C JVS(793) = Jac_FULL(94,84)                                       
      JVS(793) = -B(215)
C JVS(794) = Jac_FULL(94,85)                                       
      JVS(794) = -B(222)
C JVS(795) = Jac_FULL(94,86)                                       
      JVS(795) = 0
C JVS(796) = Jac_FULL(94,87)                                       
      JVS(796) = 0
C JVS(797) = Jac_FULL(94,88)                                       
      JVS(797) = 0
C JVS(798) = Jac_FULL(94,89)                                       
      JVS(798) = -B(441)
C JVS(799) = Jac_FULL(94,90)                                       
      JVS(799) = B(13)-B(15)+B(17)
C JVS(800) = Jac_FULL(94,91)                                       
      JVS(800) = -B(54)
C JVS(801) = Jac_FULL(94,92)                                       
      JVS(801) = -B(395)+B(399)
C JVS(802) = Jac_FULL(94,93)                                       
      JVS(802) = -B(42)
C JVS(803) = Jac_FULL(94,94)                                       
      JVS(803) = -B(4)-B(16)-B(20)-B(30)-B(33)-B(34)-B(43)-B(55)-B(92)
     &          -B(174)-B(206)-B(216)-B(223)-B(246)-B(275)-B(277)
     &          -B(302)-B(309)-B(366)-B(396)-B(442)
C JVS(804) = Jac_FULL(94,95)                                       
      JVS(804) = 0
C JVS(805) = Jac_FULL(94,96)                                       
      JVS(805) = -B(276)-B(278)
C JVS(806) = Jac_FULL(94,97)                                       
      JVS(806) = -B(367)
C JVS(807) = Jac_FULL(94,98)                                       
      JVS(807) = -B(21)
C JVS(808) = Jac_FULL(94,99)                                       
      JVS(808) = -B(247)
C JVS(809) = Jac_FULL(94,100)                                      
      JVS(809) = 0
C JVS(810) = Jac_FULL(94,101)                                      
      JVS(810) = B(466)
C JVS(811) = Jac_FULL(94,102)                                      
      JVS(811) = -B(31)
C JVS(812) = Jac_FULL(95,32)                                       
      JVS(812) = B(68)+B(69)
C JVS(813) = Jac_FULL(95,41)                                       
      JVS(813) = B(80)
C JVS(814) = Jac_FULL(95,42)                                       
      JVS(814) = -B(244)
C JVS(815) = Jac_FULL(95,43)                                       
      JVS(815) = -B(476)
C JVS(816) = Jac_FULL(95,44)                                       
      JVS(816) = B(482)
C JVS(817) = Jac_FULL(95,51)                                       
      JVS(817) = B(410)+B(412)+B(415)
C JVS(818) = Jac_FULL(95,63)                                       
      JVS(818) = B(323)+B(325)+0.5*B(327)+B(330)
C JVS(819) = Jac_FULL(95,64)                                       
      JVS(819) = -B(404)
C JVS(820) = Jac_FULL(95,67)                                       
      JVS(820) = 0
C JVS(821) = Jac_FULL(95,75)                                       
      JVS(821) = B(73)+B(256)
C JVS(822) = Jac_FULL(95,76)                                       
      JVS(822) = -B(93)
C JVS(823) = Jac_FULL(95,77)                                       
      JVS(823) = 0
C JVS(824) = Jac_FULL(95,78)                                       
      JVS(824) = 0
C JVS(825) = Jac_FULL(95,79)                                       
      JVS(825) = -B(151)
C JVS(826) = Jac_FULL(95,81)                                       
      JVS(826) = -B(454)
C JVS(827) = Jac_FULL(95,82)                                       
      JVS(827) = 0
C JVS(828) = Jac_FULL(95,87)                                       
      JVS(828) = -B(184)
C JVS(829) = Jac_FULL(95,88)                                       
      JVS(829) = -B(145)
C JVS(830) = Jac_FULL(95,89)                                       
      JVS(830) = -B(447)
C JVS(831) = Jac_FULL(95,90)                                       
      JVS(831) = B(48)-B(59)+B(326)+B(411)
C JVS(832) = Jac_FULL(95,91)                                       
      JVS(832) = B(49)+B(54)-B(56)
C JVS(833) = Jac_FULL(95,92)                                       
      JVS(833) = -B(393)
C JVS(834) = Jac_FULL(95,93)                                       
      JVS(834) = -B(44)
C JVS(835) = Jac_FULL(95,94)                                       
      JVS(835) = B(55)
C JVS(836) = Jac_FULL(95,95)                                       
      JVS(836) = -B(45)-B(57)-B(60)-B(61)-B(63)-2*B(65)-B(66)-B(67)
     &          -B(94)-B(146)-B(152)-B(185)-B(245)-B(262)-B(283)
     &          -B(285)-B(374)-B(394)-B(405)-B(448)-B(455)-B(477)
C JVS(837) = Jac_FULL(95,96)                                       
      JVS(837) = -B(284)-B(286)
C JVS(838) = Jac_FULL(95,97)                                       
      JVS(838) = -B(375)+B(413)
C JVS(839) = Jac_FULL(95,98)                                       
      JVS(839) = -B(62)+B(74)+0.5*B(328)
C JVS(840) = Jac_FULL(95,99)                                       
      JVS(840) = B(257)-B(263)+B(324)
C JVS(841) = Jac_FULL(95,100)                                      
      JVS(841) = 0
C JVS(842) = Jac_FULL(95,101)                                      
      JVS(842) = 0
C JVS(843) = Jac_FULL(95,102)                                      
      JVS(843) = -B(64)
C JVS(844) = Jac_FULL(96,21)                                       
      JVS(844) = B(312)
C JVS(845) = Jac_FULL(96,53)                                       
      JVS(845) = B(308)+2*B(310)
C JVS(846) = Jac_FULL(96,62)                                       
      JVS(846) = B(315)+B(317)
C JVS(847) = Jac_FULL(96,63)                                       
      JVS(847) = B(325)+0.5*B(327)+B(329)
C JVS(848) = Jac_FULL(96,69)                                       
      JVS(848) = 0
C JVS(849) = Jac_FULL(96,72)                                       
      JVS(849) = 0
C JVS(850) = Jac_FULL(96,80)                                       
      JVS(850) = 0
C JVS(851) = Jac_FULL(96,81)                                       
      JVS(851) = 0
C JVS(852) = Jac_FULL(96,83)                                       
      JVS(852) = -B(291)+2*B(293)+B(295)+B(303)+B(305)+B(510)
C JVS(853) = Jac_FULL(96,87)                                       
      JVS(853) = 0.55*B(186)-B(190)
C JVS(854) = Jac_FULL(96,89)                                       
      JVS(854) = 0
C JVS(855) = Jac_FULL(96,90)                                       
      JVS(855) = -B(267)+B(296)+B(316)+B(326)
C JVS(856) = Jac_FULL(96,91)                                       
      JVS(856) = -B(281)
C JVS(857) = Jac_FULL(96,92)                                       
      JVS(857) = -B(530)-B(532)-B(534)
C JVS(858) = Jac_FULL(96,93)                                       
      JVS(858) = -B(279)+B(304)
C JVS(859) = Jac_FULL(96,94)                                       
      JVS(859) = B(246)-B(275)-B(277)+B(309)
C JVS(860) = Jac_FULL(96,95)                                       
      JVS(860) = B(262)-B(283)-B(285)
C JVS(861) = Jac_FULL(96,96)                                       
      JVS(861) = -B(191)-B(268)-B(269)-B(271)-B(273)-B(276)-B(278)
     &          -B(280)-B(282)-B(284)-B(286)-2*B(287)-2*B(288)-2
     &          *B(289)-2*B(290)-B(292)-B(355)-B(531)-B(533)-B(535)
     &          -B(536)-B(538)-B(540)
C JVS(862) = Jac_FULL(96,97)                                       
      JVS(862) = B(511)
C JVS(863) = Jac_FULL(96,98)                                       
      JVS(863) = -B(270)-B(272)+B(318)+0.5*B(328)
C JVS(864) = Jac_FULL(96,99)                                       
      JVS(864) = 0.55*B(187)+B(247)+B(250)+B(263)+2*B(294)+0.5*B(353)
     &          +B(508)
C JVS(865) = Jac_FULL(96,100)                                      
      JVS(865) = 0.5*B(354)-B(356)
C JVS(866) = Jac_FULL(96,101)                                      
      JVS(866) = B(509)-B(537)-B(539)-B(541)
C JVS(867) = Jac_FULL(96,102)                                      
      JVS(867) = B(251)-B(274)
C JVS(868) = Jac_FULL(97,3)                                        
      JVS(868) = B(567)
C JVS(869) = Jac_FULL(97,22)                                       
      JVS(869) = B(409)
C JVS(870) = Jac_FULL(97,29)                                       
      JVS(870) = -B(400)
C JVS(871) = Jac_FULL(97,51)                                       
      JVS(871) = B(410)-B(412)+B(415)
C JVS(872) = Jac_FULL(97,53)                                       
      JVS(872) = -B(514)
C JVS(873) = Jac_FULL(97,58)                                       
      JVS(873) = -B(522)+0.84*B(546)+B(548)
C JVS(874) = Jac_FULL(97,64)                                       
      JVS(874) = B(402)+B(404)
C JVS(875) = Jac_FULL(97,67)                                       
      JVS(875) = -B(370)
C JVS(876) = Jac_FULL(97,68)                                       
      JVS(876) = B(408)
C JVS(877) = Jac_FULL(97,69)                                       
      JVS(877) = -B(549)
C JVS(878) = Jac_FULL(97,70)                                       
      JVS(878) = B(434)+2*B(438)+B(439)
C JVS(879) = Jac_FULL(97,72)                                       
      JVS(879) = -B(512)
C JVS(880) = Jac_FULL(97,74)                                       
      JVS(880) = B(376)+B(378)+2*B(380)+B(504)+B(524)
C JVS(881) = Jac_FULL(97,76)                                       
      JVS(881) = -B(416)
C JVS(882) = Jac_FULL(97,77)                                       
      JVS(882) = B(240)
C JVS(883) = Jac_FULL(97,78)                                       
      JVS(883) = -B(422)
C JVS(884) = Jac_FULL(97,79)                                       
      JVS(884) = -B(420)
C JVS(885) = Jac_FULL(97,80)                                       
      JVS(885) = B(502)-B(516)+B(560)
C JVS(886) = Jac_FULL(97,81)                                       
      JVS(886) = -B(518)+B(528)
C JVS(887) = Jac_FULL(97,82)                                       
      JVS(887) = 0
C JVS(888) = Jac_FULL(97,83)                                       
      JVS(888) = -B(510)
C JVS(889) = Jac_FULL(97,87)                                       
      JVS(889) = -B(188)+B(192)
C JVS(890) = Jac_FULL(97,88)                                       
      JVS(890) = -B(418)
C JVS(891) = Jac_FULL(97,89)                                       
      JVS(891) = B(525)+B(526)
C JVS(892) = Jac_FULL(97,90)                                       
      JVS(892) = B(379)+B(383)+B(411)
C JVS(893) = Jac_FULL(97,91)                                       
      JVS(893) = -B(372)
C JVS(894) = Jac_FULL(97,92)                                       
      JVS(894) = B(193)+B(241)-B(381)+B(384)+B(385)+B(389)+B(393)
     &          +B(395)+2*B(397)+B(399)+B(428)+B(527)+B(529)+B(530)
     &          +B(532)+B(542)+B(544)
C JVS(895) = Jac_FULL(97,93)                                       
      JVS(895) = B(390)+B(435)
C JVS(896) = Jac_FULL(97,94)                                       
      JVS(896) = -B(366)+B(396)
C JVS(897) = Jac_FULL(97,95)                                       
      JVS(897) = -B(374)+B(394)+B(405)
C JVS(898) = Jac_FULL(97,96)                                       
      JVS(898) = B(531)+B(533)
C JVS(899) = Jac_FULL(97,97)                                       
      JVS(899) = -B(189)-B(367)-B(368)-B(371)-B(373)-B(375)-B(382)
     &          -B(401)-B(413)-B(417)-B(419)-B(421)-B(423)-B(424)
     &          -B(511)-B(513)-B(515)-B(517)-B(519)-B(520)-B(523)
     &          -B(550)
C JVS(900) = Jac_FULL(97,98)                                       
      JVS(900) = B(377)+B(386)+B(403)+0.84*B(547)
C JVS(901) = Jac_FULL(97,99)                                       
      JVS(901) = B(503)+B(505)
C JVS(902) = Jac_FULL(97,100)                                      
      JVS(902) = -B(425)+B(429)+B(440)
C JVS(903) = Jac_FULL(97,101)                                      
      JVS(903) = -B(521)+B(543)+B(545)
C JVS(904) = Jac_FULL(97,102)                                      
      JVS(904) = -B(369)
C JVS(905) = Jac_FULL(98,24)                                       
      JVS(905) = -B(81)
C JVS(906) = Jac_FULL(98,26)                                       
      JVS(906) = 0
C JVS(907) = Jac_FULL(98,28)                                       
      JVS(907) = -B(70)+B(72)
C JVS(908) = Jac_FULL(98,31)                                       
      JVS(908) = -B(432)
C JVS(909) = Jac_FULL(98,34)                                       
      JVS(909) = -B(85)
C JVS(910) = Jac_FULL(98,35)                                       
      JVS(910) = -B(87)
C JVS(911) = Jac_FULL(98,36)                                       
      JVS(911) = B(478)
C JVS(912) = Jac_FULL(98,37)                                       
      JVS(912) = -B(357)
C JVS(913) = Jac_FULL(98,38)                                       
      JVS(913) = 2*B(7)+B(9)
C JVS(914) = Jac_FULL(98,39)                                       
      JVS(914) = -B(232)+B(234)
C JVS(915) = Jac_FULL(98,40)                                       
      JVS(915) = -B(320)
C JVS(916) = Jac_FULL(98,41)                                       
      JVS(916) = -B(77)+B(80)
C JVS(917) = Jac_FULL(98,42)                                       
      JVS(917) = -B(242)
C JVS(918) = Jac_FULL(98,43)                                       
      JVS(918) = -B(474)
C JVS(919) = Jac_FULL(98,45)                                       
      JVS(919) = -B(484)
C JVS(920) = Jac_FULL(98,46)                                       
      JVS(920) = -B(490)
C JVS(921) = Jac_FULL(98,47)                                       
      JVS(921) = -B(487)
C JVS(922) = Jac_FULL(98,48)                                       
      JVS(922) = -B(162)
C JVS(923) = Jac_FULL(98,49)                                       
      JVS(923) = -B(83)
C JVS(924) = Jac_FULL(98,50)                                       
      JVS(924) = B(10)-B(24)
C JVS(925) = Jac_FULL(98,52)                                       
      JVS(925) = -B(171)
C JVS(926) = Jac_FULL(98,54)                                       
      JVS(926) = -B(160)
C JVS(927) = Jac_FULL(98,55)                                       
      JVS(927) = -B(467)
C JVS(928) = Jac_FULL(98,56)                                       
      JVS(928) = -B(154)
C JVS(929) = Jac_FULL(98,57)                                       
      JVS(929) = -B(141)
C JVS(930) = Jac_FULL(98,58)                                       
      JVS(930) = -B(546)
C JVS(931) = Jac_FULL(98,60)                                       
      JVS(931) = -B(156)-B(158)
C JVS(932) = Jac_FULL(98,62)                                       
      JVS(932) = B(315)-B(317)+B(319)
C JVS(933) = Jac_FULL(98,63)                                       
      JVS(933) = -B(327)
C JVS(934) = Jac_FULL(98,64)                                       
      JVS(934) = -B(402)
C JVS(935) = Jac_FULL(98,66)                                       
      JVS(935) = -B(313)
C JVS(936) = Jac_FULL(98,67)                                       
      JVS(936) = B(11)-B(26)+2*B(35)+0.5*B(370)
C JVS(937) = Jac_FULL(98,68)                                       
      JVS(937) = B(406)+B(408)
C JVS(938) = Jac_FULL(98,69)                                       
      JVS(938) = -B(553)
C JVS(939) = Jac_FULL(98,71)                                       
      JVS(939) = 0
C JVS(940) = Jac_FULL(98,72)                                       
      JVS(940) = -B(264)
C JVS(941) = Jac_FULL(98,73)                                       
      JVS(941) = 0
C JVS(942) = Jac_FULL(98,74)                                       
      JVS(942) = -B(376)
C JVS(943) = Jac_FULL(98,75)                                       
      JVS(943) = -B(73)+B(75)
C JVS(944) = Jac_FULL(98,76)                                       
      JVS(944) = -B(89)+0.13*B(91)
C JVS(945) = Jac_FULL(98,77)                                       
      JVS(945) = -B(236)
C JVS(946) = Jac_FULL(98,78)                                       
      JVS(946) = -B(164)+B(168)+B(345)
C JVS(947) = Jac_FULL(98,79)                                       
      JVS(947) = -B(149)
C JVS(948) = Jac_FULL(98,80)                                       
      JVS(948) = -B(558)
C JVS(949) = Jac_FULL(98,81)                                       
      JVS(949) = -B(452)
C JVS(950) = Jac_FULL(98,82)                                       
      JVS(950) = 0
C JVS(951) = Jac_FULL(98,83)                                       
      JVS(951) = -B(299)
C JVS(952) = Jac_FULL(98,84)                                       
      JVS(952) = 0
C JVS(953) = Jac_FULL(98,85)                                       
      JVS(953) = 0
C JVS(954) = Jac_FULL(98,86)                                       
      JVS(954) = 0
C JVS(955) = Jac_FULL(98,87)                                       
      JVS(955) = -B(180)-B(182)
C JVS(956) = Jac_FULL(98,88)                                       
      JVS(956) = -B(143)
C JVS(957) = Jac_FULL(98,89)                                       
      JVS(957) = 0
C JVS(958) = Jac_FULL(98,90)                                       
      JVS(958) = B(12)+B(316)+B(407)
C JVS(959) = Jac_FULL(98,91)                                       
      JVS(959) = -B(50)
C JVS(960) = Jac_FULL(98,92)                                       
      JVS(960) = -B(385)
C JVS(961) = Jac_FULL(98,93)                                       
      JVS(961) = -B(38)+B(40)
C JVS(962) = Jac_FULL(98,94)                                       
      JVS(962) = -B(20)+B(30)+0.13*B(92)
C JVS(963) = Jac_FULL(98,95)                                       
      JVS(963) = -B(61)+B(63)
C JVS(964) = Jac_FULL(98,96)                                       
      JVS(964) = -B(269)-B(271)
C JVS(965) = Jac_FULL(98,97)                                       
      JVS(965) = 0.5*B(371)
C JVS(966) = Jac_FULL(98,98)                                       
      JVS(966) = -B(21)-B(22)-B(25)-B(27)-2*B(28)-2*B(29)-B(39)-B(51)
     &          -B(62)-B(71)-B(74)-B(78)-B(82)-B(84)-B(86)-B(88)-B(90)
     &          -B(142)-B(144)-B(150)-B(155)-B(157)-B(159)-B(161)
     &          -B(163)-B(165)-B(172)-B(181)-B(183)-B(233)-B(237)
     &          -B(243)-B(265)-B(270)-B(272)-B(300)-B(314)-B(318)
     &          -B(321)-B(328)-B(358)-B(377)-B(386)-B(403)-B(433)
     &          -B(453)-B(468)-B(475)-B(485)-B(488)-B(491)-B(547)
     &          -B(554)-B(559)
C JVS(967) = Jac_FULL(98,99)                                       
      JVS(967) = B(250)+B(346)
C JVS(968) = Jac_FULL(98,100)                                      
      JVS(968) = 0
C JVS(969) = Jac_FULL(98,101)                                      
      JVS(969) = 0
C JVS(970) = Jac_FULL(98,102)                                      
      JVS(970) = -B(23)+B(31)+B(41)+B(64)+B(251)
C JVS(971) = Jac_FULL(99,2)                                        
      JVS(971) = B(568)
C JVS(972) = Jac_FULL(99,34)                                       
      JVS(972) = -B(331)
C JVS(973) = Jac_FULL(99,35)                                       
      JVS(973) = -B(333)
C JVS(974) = Jac_FULL(99,40)                                       
      JVS(974) = B(322)
C JVS(975) = Jac_FULL(99,45)                                       
      JVS(975) = -B(561)
C JVS(976) = Jac_FULL(99,46)                                       
      JVS(976) = -B(565)
C JVS(977) = Jac_FULL(99,47)                                       
      JVS(977) = -B(563)
C JVS(978) = Jac_FULL(99,48)                                       
      JVS(978) = -B(349)
C JVS(979) = Jac_FULL(99,50)                                       
      JVS(979) = -B(254)
C JVS(980) = Jac_FULL(99,53)                                       
      JVS(980) = B(308)+2*B(311)+B(514)
C JVS(981) = Jac_FULL(99,54)                                       
      JVS(981) = -B(347)
C JVS(982) = Jac_FULL(99,56)                                       
      JVS(982) = -B(341)
C JVS(983) = Jac_FULL(99,57)                                       
      JVS(983) = -B(351)
C JVS(984) = Jac_FULL(99,60)                                       
      JVS(984) = -B(343)
C JVS(985) = Jac_FULL(99,62)                                       
      JVS(985) = B(319)
C JVS(986) = Jac_FULL(99,63)                                       
      JVS(986) = -B(323)+B(330)
C JVS(987) = Jac_FULL(99,66)                                       
      JVS(987) = B(313)
C JVS(988) = Jac_FULL(99,67)                                       
      JVS(988) = -B(252)
C JVS(989) = Jac_FULL(99,69)                                       
      JVS(989) = -B(551)+B(555)
C JVS(990) = Jac_FULL(99,71)                                       
      JVS(990) = 0
C JVS(991) = Jac_FULL(99,72)                                       
      JVS(991) = B(264)+2*B(266)+B(512)
C JVS(992) = Jac_FULL(99,73)                                       
      JVS(992) = 0
C JVS(993) = Jac_FULL(99,74)                                       
      JVS(993) = -B(504)
C JVS(994) = Jac_FULL(99,75)                                       
      JVS(994) = -B(256)
C JVS(995) = Jac_FULL(99,76)                                       
      JVS(995) = -B(335)
C JVS(996) = Jac_FULL(99,77)                                       
      JVS(996) = -B(238)
C JVS(997) = Jac_FULL(99,78)                                       
      JVS(997) = -B(345)
C JVS(998) = Jac_FULL(99,79)                                       
      JVS(998) = -B(339)
C JVS(999) = Jac_FULL(99,80)                                       
      JVS(999) = -B(502)+B(516)+B(556)+B(558)+B(560)
C JVS(1000) = Jac_FULL(99,81)                                      
      JVS(1000) = -B(506)
C JVS(1001) = Jac_FULL(99,82)                                      
      JVS(1001) = 0
C JVS(1002) = Jac_FULL(99,83)                                      
      JVS(1002) = -B(293)
C JVS(1003) = Jac_FULL(99,87)                                      
      JVS(1003) = -B(186)+B(190)
C JVS(1004) = Jac_FULL(99,88)                                      
      JVS(1004) = -B(337)
C JVS(1005) = Jac_FULL(99,89)                                      
      JVS(1005) = 0
C JVS(1006) = Jac_FULL(99,90)                                      
      JVS(1006) = B(267)+B(557)
C JVS(1007) = Jac_FULL(99,91)                                      
      JVS(1007) = -B(258)-B(260)
C JVS(1008) = Jac_FULL(99,92)                                      
      JVS(1008) = B(532)
C JVS(1009) = Jac_FULL(99,93)                                      
      JVS(1009) = B(279)
C JVS(1010) = Jac_FULL(99,94)                                      
      JVS(1010) = -B(246)+B(275)+B(309)
C JVS(1011) = Jac_FULL(99,95)                                      
      JVS(1011) = -B(262)+B(283)
C JVS(1012) = Jac_FULL(99,96)                                      
      JVS(1012) = B(191)+B(268)+B(269)+B(276)+B(280)+B(284)+2*B(288)
     &           +B(289)+B(355)+B(533)+B(538)
C JVS(1013) = Jac_FULL(99,97)                                      
      JVS(1013) = B(513)+B(515)+B(517)
C JVS(1014) = Jac_FULL(99,98)                                      
      JVS(1014) = B(265)+B(270)+B(314)+B(559)
C JVS(1015) = Jac_FULL(99,99)                                      
      JVS(1015) = -B(187)-B(239)-B(247)-B(248)-B(250)-B(253)-B(255)
     &           -B(257)-B(259)-B(261)-B(263)-B(294)-B(324)-B(332)
     &           -B(334)-B(336)-B(338)-B(340)-B(342)-B(344)-B(346)
     &           -B(348)-B(350)-B(352)-B(353)-B(503)-B(505)-B(507)
     &           -B(508)-B(552)-B(562)-B(564)-B(566)
C JVS(1016) = Jac_FULL(99,100)                                     
      JVS(1016) = -B(354)+B(356)
C JVS(1017) = Jac_FULL(99,101)                                     
      JVS(1017) = -B(509)+B(539)
C JVS(1018) = Jac_FULL(99,102)                                     
      JVS(1018) = -B(249)-B(251)
C JVS(1019) = Jac_FULL(100,34)                                     
      JVS(1019) = B(85)+B(331)
C JVS(1020) = Jac_FULL(100,45)                                     
      JVS(1020) = B(486)
C JVS(1021) = Jac_FULL(100,48)                                     
      JVS(1021) = B(162)+B(349)
C JVS(1022) = Jac_FULL(100,59)                                     
      JVS(1022) = -B(500)
C JVS(1023) = Jac_FULL(100,65)                                     
      JVS(1023) = -B(364)
C JVS(1024) = Jac_FULL(100,70)                                     
      JVS(1024) = -B(439)
C JVS(1025) = Jac_FULL(100,71)                                     
      JVS(1025) = -B(109)-B(111)-B(113)
C JVS(1026) = Jac_FULL(100,73)                                     
      JVS(1026) = -B(123)-B(125)-B(127)
C JVS(1027) = Jac_FULL(100,76)                                     
      JVS(1027) = 0
C JVS(1028) = Jac_FULL(100,77)                                     
      JVS(1028) = 0.95*B(236)+0.1*B(238)
C JVS(1029) = Jac_FULL(100,78)                                     
      JVS(1029) = B(164)+B(422)
C JVS(1030) = Jac_FULL(100,79)                                     
      JVS(1030) = B(153)
C JVS(1031) = Jac_FULL(100,82)                                     
      JVS(1031) = B(129)+2*B(133)-B(136)
C JVS(1032) = Jac_FULL(100,84)                                     
      JVS(1032) = B(219)
C JVS(1033) = Jac_FULL(100,85)                                     
      JVS(1033) = B(221)
C JVS(1034) = Jac_FULL(100,86)                                     
      JVS(1034) = -B(201)
C JVS(1035) = Jac_FULL(100,87)                                     
      JVS(1035) = B(188)
C JVS(1036) = Jac_FULL(100,91)                                     
      JVS(1036) = B(220)
C JVS(1037) = Jac_FULL(100,92)                                     
      JVS(1037) = -B(428)-B(430)
C JVS(1038) = Jac_FULL(100,93)                                     
      JVS(1038) = -B(97)+B(130)
C JVS(1039) = Jac_FULL(100,94)                                     
      JVS(1039) = 0
C JVS(1040) = Jac_FULL(100,95)                                     
      JVS(1040) = 0
C JVS(1041) = Jac_FULL(100,96)                                     
      JVS(1041) = -B(355)
C JVS(1042) = Jac_FULL(100,97)                                     
      JVS(1042) = B(189)+B(423)-B(424)
C JVS(1043) = Jac_FULL(100,98)                                     
      JVS(1043) = B(86)+B(163)+B(165)+0.95*B(237)
C JVS(1044) = Jac_FULL(100,99)                                     
      JVS(1044) = 0.1*B(239)+B(332)+B(350)-B(353)
C JVS(1045) = Jac_FULL(100,100)                                    
      JVS(1045) = -B(98)-B(99)-2*B(101)-2*B(102)-B(110)-B(112)-B(114)
     &           -B(124)-B(126)-B(128)-B(137)-B(202)-B(354)-B(356)
     &           -B(365)-B(425)-B(429)-B(431)-B(440)-B(493)-B(501)
C JVS(1046) = Jac_FULL(100,101)                                    
      JVS(1046) = -B(494)
C JVS(1047) = Jac_FULL(100,102)                                    
      JVS(1047) = -B(100)
C JVS(1048) = Jac_FULL(101,1)                                      
      JVS(1048) = B(483)
C JVS(1049) = Jac_FULL(101,44)                                     
      JVS(1049) = B(481)
C JVS(1050) = Jac_FULL(101,55)                                     
      JVS(1050) = B(469)
C JVS(1051) = Jac_FULL(101,81)                                     
      JVS(1051) = B(450)
C JVS(1052) = Jac_FULL(101,87)                                     
      JVS(1052) = -B(194)
C JVS(1053) = Jac_FULL(101,89)                                     
      JVS(1053) = B(441)+B(447)+B(526)
C JVS(1054) = Jac_FULL(101,90)                                     
      JVS(1054) = B(451)-B(457)
C JVS(1055) = Jac_FULL(101,91)                                     
      JVS(1055) = -B(463)
C JVS(1056) = Jac_FULL(101,92)                                     
      JVS(1056) = B(527)-B(542)-B(544)
C JVS(1057) = Jac_FULL(101,93)                                     
      JVS(1057) = -B(461)+B(470)
C JVS(1058) = Jac_FULL(101,94)                                     
      JVS(1058) = B(442)
C JVS(1059) = Jac_FULL(101,95)                                     
      JVS(1059) = B(448)
C JVS(1060) = Jac_FULL(101,96)                                     
      JVS(1060) = -B(536)-B(538)-B(540)
C JVS(1061) = Jac_FULL(101,97)                                     
      JVS(1061) = -B(520)
C JVS(1062) = Jac_FULL(101,98)                                     
      JVS(1062) = 0
C JVS(1063) = Jac_FULL(101,99)                                     
      JVS(1063) = -B(508)
C JVS(1064) = Jac_FULL(101,100)                                    
      JVS(1064) = -B(493)
C JVS(1065) = Jac_FULL(101,101)                                    
      JVS(1065) = -B(195)-B(458)-B(459)-B(462)-B(464)-2*B(465)-B(466)
     &           -B(494)-B(509)-B(521)-B(537)-B(539)-B(541)-B(543)
     &           -B(545)
C JVS(1066) = Jac_FULL(101,102)                                    
      JVS(1066) = -B(460)
C JVS(1067) = Jac_FULL(102,2)                                      
      JVS(1067) = 2*B(568)
C JVS(1068) = Jac_FULL(102,3)                                      
      JVS(1068) = 2*B(567)
C JVS(1069) = Jac_FULL(102,25)                                     
      JVS(1069) = B(175)
C JVS(1070) = Jac_FULL(102,27)                                     
      JVS(1070) = -B(230)
C JVS(1071) = Jac_FULL(102,38)                                     
      JVS(1071) = B(9)
C JVS(1072) = Jac_FULL(102,41)                                     
      JVS(1072) = B(76)+B(79)
C JVS(1073) = Jac_FULL(102,42)                                     
      JVS(1073) = 0.05*B(242)
C JVS(1074) = Jac_FULL(102,49)                                     
      JVS(1074) = B(83)
C JVS(1075) = Jac_FULL(102,50)                                     
      JVS(1075) = B(10)+B(24)+B(254)
C JVS(1076) = Jac_FULL(102,52)                                     
      JVS(1076) = 0
C JVS(1077) = Jac_FULL(102,54)                                     
      JVS(1077) = B(160)+B(347)
C JVS(1078) = Jac_FULL(102,56)                                     
      JVS(1078) = B(154)+B(341)
C JVS(1079) = Jac_FULL(102,57)                                     
      JVS(1079) = 0
C JVS(1080) = Jac_FULL(102,59)                                     
      JVS(1080) = -B(497)+B(500)
C JVS(1081) = Jac_FULL(102,60)                                     
      JVS(1081) = B(158)+0.92*B(343)
C JVS(1082) = Jac_FULL(102,65)                                     
      JVS(1082) = -B(361)+B(364)
C JVS(1083) = Jac_FULL(102,67)                                     
      JVS(1083) = B(11)+B(26)+B(252)+0.5*B(370)
C JVS(1084) = Jac_FULL(102,70)                                     
      JVS(1084) = -B(436)+B(439)
C JVS(1085) = Jac_FULL(102,71)                                     
      JVS(1085) = B(103)-B(105)+2*B(108)+2*B(113)
C JVS(1086) = Jac_FULL(102,73)                                     
      JVS(1086) = B(115)+B(117)-B(119)+2*B(122)+2*B(127)
C JVS(1087) = Jac_FULL(102,76)                                     
      JVS(1087) = 0.13*B(91)
C JVS(1088) = Jac_FULL(102,77)                                     
      JVS(1088) = 0
C JVS(1089) = Jac_FULL(102,78)                                     
      JVS(1089) = B(168)
C JVS(1090) = Jac_FULL(102,79)                                     
      JVS(1090) = B(153)
C JVS(1091) = Jac_FULL(102,82)                                     
      JVS(1091) = -B(131)+B(134)
C JVS(1092) = Jac_FULL(102,84)                                     
      JVS(1092) = 0
C JVS(1093) = Jac_FULL(102,85)                                     
      JVS(1093) = 0
C JVS(1094) = Jac_FULL(102,86)                                     
      JVS(1094) = -B(198)+B(201)
C JVS(1095) = Jac_FULL(102,87)                                     
      JVS(1095) = B(182)
C JVS(1096) = Jac_FULL(102,88)                                     
      JVS(1096) = B(143)+B(145)+2*B(147)+B(337)+B(418)+B(426)
C JVS(1097) = Jac_FULL(102,89)                                     
      JVS(1097) = -B(443)
C JVS(1098) = Jac_FULL(102,90)                                     
      JVS(1098) = B(12)
C JVS(1099) = Jac_FULL(102,91)                                     
      JVS(1099) = -B(52)
C JVS(1100) = Jac_FULL(102,92)                                     
      JVS(1100) = B(385)-B(387)+B(427)+B(428)
C JVS(1101) = Jac_FULL(102,93)                                     
      JVS(1101) = -B(40)+B(97)+B(104)+B(116)+B(118)
C JVS(1102) = Jac_FULL(102,94)                                     
      JVS(1102) = B(20)-B(30)+0.13*B(92)
C JVS(1103) = Jac_FULL(102,95)                                     
      JVS(1103) = B(61)-B(63)+B(146)
C JVS(1104) = Jac_FULL(102,96)                                     
      JVS(1104) = B(269)-B(273)+B(355)
C JVS(1105) = Jac_FULL(102,97)                                     
      JVS(1105) = -B(368)+0.5*B(371)+B(419)
C JVS(1106) = Jac_FULL(102,98)                                     
      JVS(1106) = B(21)-B(22)+B(25)+B(27)+B(62)+B(84)+B(144)+B(155)
     &           +B(159)+B(161)+B(183)+0.05*B(243)+B(270)+B(386)
C JVS(1107) = Jac_FULL(102,99)                                     
      JVS(1107) = -B(248)-B(250)+B(253)+B(255)+B(338)+B(342)+0.92
     &           *B(344)+B(348)+0.5*B(353)
C JVS(1108) = Jac_FULL(102,100)                                    
      JVS(1108) = B(98)-B(99)+2*B(102)+2*B(114)+2*B(128)+B(135)+B(202)
     &           +0.5*B(354)+B(356)+B(365)+B(429)+B(440)+B(493)+B(501)
C JVS(1109) = Jac_FULL(102,101)                                    
      JVS(1109) = -B(459)+B(494)
C JVS(1110) = Jac_FULL(102,102)                                    
      JVS(1110) = -B(23)-B(31)-2*B(32)-B(41)-B(53)-B(64)-B(100)-B(106)
     &           -B(120)-B(132)-B(199)-B(231)-B(249)-B(251)-B(274)
     &           -B(362)-B(369)-B(388)-B(437)-B(444)-B(460)-B(498)
      RETURN
      END

C End of Jac_SP_g function                                           
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C                                                                  
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C                                                                  
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C                                                                  
C Linear Algebra Data and Routines File                            
C                                                                  
C Generated by KPP-2.2.4 for Mistra symbolic chemistry Kinetics PreProcessor
C       (http://www.cs.vt.edu/~asandu/Software/Kpp)                
C KPP is distributed under GPL, the general public licence         
C       (http://www.gnu.org/copyleft/gpl.html)                     
C (C) 1995-1997, V. Damian & A. Sandu, CGRER, Univ. Iowa           
C (C) 1997-2005, A. Sandu, Michigan Tech, Virginia Tech            
C     With important contributions from:                           
C        M. Damian, Villanova University, USA                      
C        R. Sander, Max-Planck Institute for Chemistry, Mainz, Germany
C                                                                  
C File                 : gas_LinearAlgebra.f                       
C Time                 : Wed Jul 14 18:26:57 2021                  
C Working directory    : /local/josue/Mistra_2019/src/mech         
C Equation file        : gas.k                                     
C Output root filename : gas                                       
C                                                                  
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C                                                                  
C SPARSE_UTIL - SPARSE utility functions                           
C   Arguments :                                                    
C                                                                  
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
C KppDecomp_g
C
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE KppDecomp_g( JVS, IER )
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C        Sparse LU factorization
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      INCLUDE 'gas_Parameters.h'
      INCLUDE 'gas_Sparse.h'

      INTEGER  IER
      REAL*8 JVS(1110), W(102)
      INTEGER  k, kk, j, jj
      REAL*8 a

      IER = 0
      DO k=1,NVAR
        IF ( JVS( LU_DIAG_g(k) ) .EQ. 0. ) THEN
            IER = k
            RETURN
        END IF
        DO kk = LU_CROW_g(k), LU_CROW_g(k+1)-1
              W( LU_ICOL_g(kk) ) = JVS(kk)
        END DO
        DO kk = LU_CROW_g(k), LU_DIAG_g(k)-1
            j = LU_ICOL_g(kk)
            a = -W(j) / JVS( LU_DIAG_g(j) )
            W(j) = -a
            DO jj = LU_DIAG_g(j)+1, LU_CROW_g(j+1)-1
               W( LU_ICOL_g(jj) ) = W( LU_ICOL_g(jj) ) + a*JVS(jj)
            END DO
         END DO
         DO kk = LU_CROW_g(k), LU_CROW_g(k+1)-1
            JVS(kk) = W( LU_ICOL_g(kk) )
         END DO
      END DO
      RETURN
      END

C End of KppDecomp_g subroutine
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C End of SPARSE_UTIL function                                      
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C                                                                  
C KppSolve_g - sparse back substitution                              
C   Arguments :                                                    
C      JVS       - sparse Jacobian of variables                    
C      X         - Vector for variables                            
C                                                                  
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      SUBROUTINE KppSolve_g ( JVS, X )

      IMPLICIT NONE
      INCLUDE 'gas_Parameters.h'

C JVS - sparse Jacobian of variables                               
      REAL*8 JVS(LU_NONZERO)
C X - Vector for variables                                         
      REAL*8 X(NVAR)

      X(26) = X(26)-JVS(75)*X(24)-JVS(76)*X(25)
      X(49) = X(49)-JVS(170)*X(2)-JVS(171)*X(3)
      X(50) = X(50)-JVS(184)*X(38)
      X(54) = X(54)-JVS(207)*X(23)
      X(56) = X(56)-JVS(221)*X(45)
      X(59) = X(59)-JVS(240)*X(45)-JVS(241)*X(46)-JVS(242)*X(47)
      X(60) = X(60)-JVS(249)*X(46)-JVS(250)*X(47)
      X(61) = X(61)-JVS(257)*X(39)
      X(62) = X(62)-JVS(266)*X(40)
      X(65) = X(65)-JVS(295)*X(37)-JVS(296)*X(45)-JVS(297)*X(46)
     &       -JVS(298)*X(47)
      X(66) = X(66)-JVS(306)*X(34)-JVS(307)*X(35)-JVS(308)*X(45)
     &       -JVS(309)*X(46)-JVS(310)*X(47)-JVS(311)*X(48)-JVS(312)
     &       *X(50)-JVS(313)*X(54)-JVS(314)*X(56)-JVS(315)*X(57)
     &       -JVS(316)*X(60)-JVS(317)*X(65)
      X(68) = X(68)-JVS(345)*X(58)-JVS(346)*X(67)
      X(70) = X(70)-JVS(367)*X(31)
      X(71) = X(71)-JVS(376)*X(35)-JVS(377)*X(46)-JVS(378)*X(47)
      X(72) = X(72)-JVS(385)*X(53)-JVS(386)*X(63)-JVS(387)*X(69)
      X(73) = X(73)-JVS(399)*X(60)-JVS(400)*X(71)
      X(74) = X(74)-JVS(409)*X(29)-JVS(410)*X(51)-JVS(411)*X(58)
      X(75) = X(75)-JVS(422)*X(32)-JVS(423)*X(42)-JVS(424)*X(43)
     &       -JVS(425)*X(63)-JVS(426)*X(64)-JVS(427)*X(67)
      X(78) = X(78)-JVS(458)*X(71)-JVS(459)*X(73)-JVS(460)*X(76)
      X(79) = X(79)-JVS(471)*X(60)-JVS(472)*X(70)-JVS(473)*X(71)
     &       -JVS(474)*X(73)-JVS(475)*X(76)
      X(80) = X(80)-JVS(486)*X(53)-JVS(487)*X(69)-JVS(488)*X(72)
     &       -JVS(489)*X(74)
      X(81) = X(81)-JVS(502)*X(30)
      X(82) = X(82)-JVS(513)*X(57)-JVS(514)*X(65)-JVS(515)*X(76)
     &       -JVS(516)*X(79)
      X(83) = X(83)-JVS(528)*X(21)
      X(84) = X(84)-JVS(540)*X(61)-JVS(541)*X(77)
      X(85) = X(85)-JVS(555)*X(33)-JVS(556)*X(42)-JVS(557)*X(61)
     &       -JVS(558)*X(77)-JVS(559)*X(84)
      X(86) = X(86)-JVS(574)*X(39)-JVS(575)*X(77)
      X(88) = X(88)-JVS(596)*X(1)-JVS(597)*X(39)-JVS(598)*X(56)
     &       -JVS(599)*X(57)-JVS(600)*X(59)-JVS(601)*X(65)-JVS(602)
     &       *X(70)-JVS(603)*X(71)-JVS(604)*X(73)-JVS(605)*X(76)
     &       -JVS(606)*X(78)-JVS(607)*X(82)-JVS(608)*X(86)-JVS(609)
     &       *X(87)
      X(89) = X(89)-JVS(623)*X(1)-JVS(624)*X(2)-JVS(625)*X(3)-JVS(626)
     &       *X(20)-JVS(627)*X(30)-JVS(628)*X(36)-JVS(629)*X(43)
     &       -JVS(630)*X(44)-JVS(631)*X(45)-JVS(632)*X(46)-JVS(633)
     &       *X(47)-JVS(634)*X(55)-JVS(635)*X(58)-JVS(636)*X(59)
     &       -JVS(637)*X(69)-JVS(638)*X(74)-JVS(639)*X(80)-JVS(640)
     &       *X(81)-JVS(641)*X(87)
      X(90) = X(90)-JVS(656)*X(38)-JVS(657)*X(50)-JVS(658)*X(51)
     &       -JVS(659)*X(52)-JVS(660)*X(62)-JVS(661)*X(63)-JVS(662)
     &       *X(67)-JVS(663)*X(68)-JVS(664)*X(69)-JVS(665)*X(72)
     &       -JVS(666)*X(74)-JVS(667)*X(80)-JVS(668)*X(81)-JVS(669)
     &       *X(83)-JVS(670)*X(84)-JVS(671)*X(85)-JVS(672)*X(86)
     &       -JVS(673)*X(87)-JVS(674)*X(88)-JVS(675)*X(89)
      X(91) = X(91)-JVS(689)*X(22)-JVS(690)*X(28)-JVS(691)*X(30)
     &       -JVS(692)*X(32)-JVS(693)*X(33)-JVS(694)*X(40)-JVS(695)
     &       *X(41)-JVS(696)*X(44)-JVS(697)*X(51)-JVS(698)*X(55)
     &       -JVS(699)*X(57)-JVS(700)*X(59)-JVS(701)*X(61)-JVS(702)
     &       *X(63)-JVS(703)*X(65)-JVS(704)*X(70)-JVS(705)*X(71)
     &       -JVS(706)*X(73)-JVS(707)*X(75)-JVS(708)*X(76)-JVS(709)
     &       *X(77)-JVS(710)*X(78)-JVS(711)*X(79)-JVS(712)*X(81)
     &       -JVS(713)*X(82)-JVS(714)*X(83)-JVS(715)*X(84)-JVS(716)
     &       *X(85)-JVS(717)*X(86)-JVS(718)*X(87)-JVS(719)*X(88)
     &       -JVS(720)*X(89)-JVS(721)*X(90)
      X(92) = X(92)-JVS(734)*X(29)-JVS(735)*X(51)-JVS(736)*X(68)
     &       -JVS(737)*X(74)-JVS(738)*X(77)-JVS(739)*X(80)-JVS(740)
     &       *X(81)-JVS(741)*X(83)-JVS(742)*X(87)-JVS(743)*X(88)
     &       -JVS(744)*X(89)-JVS(745)*X(90)-JVS(746)*X(91)
      X(93) = X(93)-JVS(758)*X(28)-JVS(759)*X(55)-JVS(760)*X(59)
     &       -JVS(761)*X(61)-JVS(762)*X(65)-JVS(763)*X(70)-JVS(764)
     &       *X(71)-JVS(765)*X(73)-JVS(766)*X(76)-JVS(767)*X(82)
     &       -JVS(768)*X(83)-JVS(769)*X(84)-JVS(770)*X(85)-JVS(771)
     &       *X(86)-JVS(772)*X(87)-JVS(773)*X(90)-JVS(774)*X(91)
     &       -JVS(775)*X(92)
      X(94) = X(94)-JVS(786)*X(38)-JVS(787)*X(50)-JVS(788)*X(52)
     &       -JVS(789)*X(53)-JVS(790)*X(61)-JVS(791)*X(76)-JVS(792)
     &       *X(83)-JVS(793)*X(84)-JVS(794)*X(85)-JVS(795)*X(86)
     &       -JVS(796)*X(87)-JVS(797)*X(88)-JVS(798)*X(89)-JVS(799)
     &       *X(90)-JVS(800)*X(91)-JVS(801)*X(92)-JVS(802)*X(93)
      X(95) = X(95)-JVS(812)*X(32)-JVS(813)*X(41)-JVS(814)*X(42)
     &       -JVS(815)*X(43)-JVS(816)*X(44)-JVS(817)*X(51)-JVS(818)
     &       *X(63)-JVS(819)*X(64)-JVS(820)*X(67)-JVS(821)*X(75)
     &       -JVS(822)*X(76)-JVS(823)*X(77)-JVS(824)*X(78)-JVS(825)
     &       *X(79)-JVS(826)*X(81)-JVS(827)*X(82)-JVS(828)*X(87)
     &       -JVS(829)*X(88)-JVS(830)*X(89)-JVS(831)*X(90)-JVS(832)
     &       *X(91)-JVS(833)*X(92)-JVS(834)*X(93)-JVS(835)*X(94)
      X(96) = X(96)-JVS(844)*X(21)-JVS(845)*X(53)-JVS(846)*X(62)
     &       -JVS(847)*X(63)-JVS(848)*X(69)-JVS(849)*X(72)-JVS(850)
     &       *X(80)-JVS(851)*X(81)-JVS(852)*X(83)-JVS(853)*X(87)
     &       -JVS(854)*X(89)-JVS(855)*X(90)-JVS(856)*X(91)-JVS(857)
     &       *X(92)-JVS(858)*X(93)-JVS(859)*X(94)-JVS(860)*X(95)
      X(97) = X(97)-JVS(868)*X(3)-JVS(869)*X(22)-JVS(870)*X(29)
     &       -JVS(871)*X(51)-JVS(872)*X(53)-JVS(873)*X(58)-JVS(874)
     &       *X(64)-JVS(875)*X(67)-JVS(876)*X(68)-JVS(877)*X(69)
     &       -JVS(878)*X(70)-JVS(879)*X(72)-JVS(880)*X(74)-JVS(881)
     &       *X(76)-JVS(882)*X(77)-JVS(883)*X(78)-JVS(884)*X(79)
     &       -JVS(885)*X(80)-JVS(886)*X(81)-JVS(887)*X(82)-JVS(888)
     &       *X(83)-JVS(889)*X(87)-JVS(890)*X(88)-JVS(891)*X(89)
     &       -JVS(892)*X(90)-JVS(893)*X(91)-JVS(894)*X(92)-JVS(895)
     &       *X(93)-JVS(896)*X(94)-JVS(897)*X(95)-JVS(898)*X(96)
      X(98) = X(98)-JVS(905)*X(24)-JVS(906)*X(26)-JVS(907)*X(28)
     &       -JVS(908)*X(31)-JVS(909)*X(34)-JVS(910)*X(35)-JVS(911)
     &       *X(36)-JVS(912)*X(37)-JVS(913)*X(38)-JVS(914)*X(39)
     &       -JVS(915)*X(40)-JVS(916)*X(41)-JVS(917)*X(42)-JVS(918)
     &       *X(43)-JVS(919)*X(45)-JVS(920)*X(46)-JVS(921)*X(47)
     &       -JVS(922)*X(48)-JVS(923)*X(49)-JVS(924)*X(50)-JVS(925)
     &       *X(52)-JVS(926)*X(54)-JVS(927)*X(55)-JVS(928)*X(56)
     &       -JVS(929)*X(57)-JVS(930)*X(58)-JVS(931)*X(60)-JVS(932)
     &       *X(62)-JVS(933)*X(63)-JVS(934)*X(64)-JVS(935)*X(66)
     &       -JVS(936)*X(67)-JVS(937)*X(68)-JVS(938)*X(69)-JVS(939)
     &       *X(71)-JVS(940)*X(72)-JVS(941)*X(73)-JVS(942)*X(74)
     &       -JVS(943)*X(75)-JVS(944)*X(76)-JVS(945)*X(77)-JVS(946)
     &       *X(78)-JVS(947)*X(79)-JVS(948)*X(80)-JVS(949)*X(81)
     &       -JVS(950)*X(82)-JVS(951)*X(83)-JVS(952)*X(84)-JVS(953)
     &       *X(85)-JVS(954)*X(86)-JVS(955)*X(87)-JVS(956)*X(88)
     &       -JVS(957)*X(89)-JVS(958)*X(90)-JVS(959)*X(91)-JVS(960)
     &       *X(92)-JVS(961)*X(93)-JVS(962)*X(94)-JVS(963)*X(95)
     &       -JVS(964)*X(96)-JVS(965)*X(97)
      X(99) = X(99)-JVS(971)*X(2)-JVS(972)*X(34)-JVS(973)*X(35)
     &       -JVS(974)*X(40)-JVS(975)*X(45)-JVS(976)*X(46)-JVS(977)
     &       *X(47)-JVS(978)*X(48)-JVS(979)*X(50)-JVS(980)*X(53)
     &       -JVS(981)*X(54)-JVS(982)*X(56)-JVS(983)*X(57)-JVS(984)
     &       *X(60)-JVS(985)*X(62)-JVS(986)*X(63)-JVS(987)*X(66)
     &       -JVS(988)*X(67)-JVS(989)*X(69)-JVS(990)*X(71)-JVS(991)
     &       *X(72)-JVS(992)*X(73)-JVS(993)*X(74)-JVS(994)*X(75)
     &       -JVS(995)*X(76)-JVS(996)*X(77)-JVS(997)*X(78)-JVS(998)
     &       *X(79)-JVS(999)*X(80)-JVS(1000)*X(81)-JVS(1001)*X(82)
     &       -JVS(1002)*X(83)-JVS(1003)*X(87)-JVS(1004)*X(88)
     &       -JVS(1005)*X(89)-JVS(1006)*X(90)-JVS(1007)*X(91)
     &       -JVS(1008)*X(92)-JVS(1009)*X(93)-JVS(1010)*X(94)
     &       -JVS(1011)*X(95)-JVS(1012)*X(96)-JVS(1013)*X(97)
     &       -JVS(1014)*X(98)
      X(100) = X(100)-JVS(1019)*X(34)-JVS(1020)*X(45)-JVS(1021)*X(48)
     &        -JVS(1022)*X(59)-JVS(1023)*X(65)-JVS(1024)*X(70)
     &        -JVS(1025)*X(71)-JVS(1026)*X(73)-JVS(1027)*X(76)
     &        -JVS(1028)*X(77)-JVS(1029)*X(78)-JVS(1030)*X(79)
     &        -JVS(1031)*X(82)-JVS(1032)*X(84)-JVS(1033)*X(85)
     &        -JVS(1034)*X(86)-JVS(1035)*X(87)-JVS(1036)*X(91)
     &        -JVS(1037)*X(92)-JVS(1038)*X(93)-JVS(1039)*X(94)
     &        -JVS(1040)*X(95)-JVS(1041)*X(96)-JVS(1042)*X(97)
     &        -JVS(1043)*X(98)-JVS(1044)*X(99)
      X(101) = X(101)-JVS(1048)*X(1)-JVS(1049)*X(44)-JVS(1050)*X(55)
     &        -JVS(1051)*X(81)-JVS(1052)*X(87)-JVS(1053)*X(89)
     &        -JVS(1054)*X(90)-JVS(1055)*X(91)-JVS(1056)*X(92)
     &        -JVS(1057)*X(93)-JVS(1058)*X(94)-JVS(1059)*X(95)
     &        -JVS(1060)*X(96)-JVS(1061)*X(97)-JVS(1062)*X(98)
     &        -JVS(1063)*X(99)-JVS(1064)*X(100)
      X(102) = X(102)-JVS(1067)*X(2)-JVS(1068)*X(3)-JVS(1069)*X(25)
     &        -JVS(1070)*X(27)-JVS(1071)*X(38)-JVS(1072)*X(41)
     &        -JVS(1073)*X(42)-JVS(1074)*X(49)-JVS(1075)*X(50)
     &        -JVS(1076)*X(52)-JVS(1077)*X(54)-JVS(1078)*X(56)
     &        -JVS(1079)*X(57)-JVS(1080)*X(59)-JVS(1081)*X(60)
     &        -JVS(1082)*X(65)-JVS(1083)*X(67)-JVS(1084)*X(70)
     &        -JVS(1085)*X(71)-JVS(1086)*X(73)-JVS(1087)*X(76)
     &        -JVS(1088)*X(77)-JVS(1089)*X(78)-JVS(1090)*X(79)
     &        -JVS(1091)*X(82)-JVS(1092)*X(84)-JVS(1093)*X(85)
     &        -JVS(1094)*X(86)-JVS(1095)*X(87)-JVS(1096)*X(88)
     &        -JVS(1097)*X(89)-JVS(1098)*X(90)-JVS(1099)*X(91)
     &        -JVS(1100)*X(92)-JVS(1101)*X(93)-JVS(1102)*X(94)
     &        -JVS(1103)*X(95)-JVS(1104)*X(96)-JVS(1105)*X(97)
     &        -JVS(1106)*X(98)-JVS(1107)*X(99)-JVS(1108)*X(100)
     &        -JVS(1109)*X(101)
      X(102) = X(102)/JVS(1110)
      X(101) = (X(101)-JVS(1066)*X(102))/(JVS(1065))
      X(100) = (X(100)-JVS(1046)*X(101)-JVS(1047)*X(102))/(JVS(1045))
      X(99) = (X(99)-JVS(1016)*X(100)-JVS(1017)*X(101)-JVS(1018)
     &       *X(102))/(JVS(1015))
      X(98) = (X(98)-JVS(967)*X(99)-JVS(968)*X(100)-JVS(969)*X(101)
     &       -JVS(970)*X(102))/(JVS(966))
      X(97) = (X(97)-JVS(900)*X(98)-JVS(901)*X(99)-JVS(902)*X(100)
     &       -JVS(903)*X(101)-JVS(904)*X(102))/(JVS(899))
      X(96) = (X(96)-JVS(862)*X(97)-JVS(863)*X(98)-JVS(864)*X(99)
     &       -JVS(865)*X(100)-JVS(866)*X(101)-JVS(867)*X(102))
     &       /(JVS(861))
      X(95) = (X(95)-JVS(837)*X(96)-JVS(838)*X(97)-JVS(839)*X(98)
     &       -JVS(840)*X(99)-JVS(841)*X(100)-JVS(842)*X(101)-JVS(843)
     &       *X(102))/(JVS(836))
      X(94) = (X(94)-JVS(804)*X(95)-JVS(805)*X(96)-JVS(806)*X(97)
     &       -JVS(807)*X(98)-JVS(808)*X(99)-JVS(809)*X(100)-JVS(810)
     &       *X(101)-JVS(811)*X(102))/(JVS(803))
      X(93) = (X(93)-JVS(777)*X(94)-JVS(778)*X(95)-JVS(779)*X(96)
     &       -JVS(780)*X(97)-JVS(781)*X(98)-JVS(782)*X(99)-JVS(783)
     &       *X(100)-JVS(784)*X(101)-JVS(785)*X(102))/(JVS(776))
      X(92) = (X(92)-JVS(748)*X(93)-JVS(749)*X(94)-JVS(750)*X(95)
     &       -JVS(751)*X(96)-JVS(752)*X(97)-JVS(753)*X(98)-JVS(754)
     &       *X(99)-JVS(755)*X(100)-JVS(756)*X(101)-JVS(757)*X(102))
     &       /(JVS(747))
      X(91) = (X(91)-JVS(723)*X(92)-JVS(724)*X(93)-JVS(725)*X(94)
     &       -JVS(726)*X(95)-JVS(727)*X(96)-JVS(728)*X(97)-JVS(729)
     &       *X(98)-JVS(730)*X(99)-JVS(731)*X(100)-JVS(732)*X(101)
     &       -JVS(733)*X(102))/(JVS(722))
      X(90) = (X(90)-JVS(677)*X(91)-JVS(678)*X(92)-JVS(679)*X(93)
     &       -JVS(680)*X(94)-JVS(681)*X(95)-JVS(682)*X(96)-JVS(683)
     &       *X(97)-JVS(684)*X(98)-JVS(685)*X(99)-JVS(686)*X(100)
     &       -JVS(687)*X(101)-JVS(688)*X(102))/(JVS(676))
      X(89) = (X(89)-JVS(643)*X(90)-JVS(644)*X(91)-JVS(645)*X(92)
     &       -JVS(646)*X(93)-JVS(647)*X(94)-JVS(648)*X(95)-JVS(649)
     &       *X(96)-JVS(650)*X(97)-JVS(651)*X(98)-JVS(652)*X(99)
     &       -JVS(653)*X(100)-JVS(654)*X(101)-JVS(655)*X(102))
     &       /(JVS(642))
      X(88) = (X(88)-JVS(611)*X(91)-JVS(612)*X(92)-JVS(613)*X(93)
     &       -JVS(614)*X(94)-JVS(615)*X(95)-JVS(616)*X(96)-JVS(617)
     &       *X(97)-JVS(618)*X(98)-JVS(619)*X(99)-JVS(620)*X(100)
     &       -JVS(621)*X(101)-JVS(622)*X(102))/(JVS(610))
      X(87) = (X(87)-JVS(589)*X(92)-JVS(590)*X(95)-JVS(591)*X(96)
     &       -JVS(592)*X(97)-JVS(593)*X(98)-JVS(594)*X(99)-JVS(595)
     &       *X(101))/(JVS(588))
      X(86) = (X(86)-JVS(577)*X(87)-JVS(578)*X(91)-JVS(579)*X(92)
     &       -JVS(580)*X(93)-JVS(581)*X(95)-JVS(582)*X(96)-JVS(583)
     &       *X(98)-JVS(584)*X(99)-JVS(585)*X(100)-JVS(586)*X(101)
     &       -JVS(587)*X(102))/(JVS(576))
      X(85) = (X(85)-JVS(561)*X(86)-JVS(562)*X(87)-JVS(563)*X(91)
     &       -JVS(564)*X(92)-JVS(565)*X(93)-JVS(566)*X(94)-JVS(567)
     &       *X(95)-JVS(568)*X(96)-JVS(569)*X(98)-JVS(570)*X(99)
     &       -JVS(571)*X(100)-JVS(572)*X(101)-JVS(573)*X(102))
     &       /(JVS(560))
      X(84) = (X(84)-JVS(543)*X(86)-JVS(544)*X(87)-JVS(545)*X(91)
     &       -JVS(546)*X(92)-JVS(547)*X(93)-JVS(548)*X(94)-JVS(549)
     &       *X(96)-JVS(550)*X(98)-JVS(551)*X(99)-JVS(552)*X(100)
     &       -JVS(553)*X(101)-JVS(554)*X(102))/(JVS(542))
      X(83) = (X(83)-JVS(530)*X(90)-JVS(531)*X(92)-JVS(532)*X(93)
     &       -JVS(533)*X(94)-JVS(534)*X(95)-JVS(535)*X(96)-JVS(536)
     &       *X(97)-JVS(537)*X(98)-JVS(538)*X(99)-JVS(539)*X(101))
     &       /(JVS(529))
      X(82) = (X(82)-JVS(518)*X(87)-JVS(519)*X(91)-JVS(520)*X(93)
     &       -JVS(521)*X(94)-JVS(522)*X(95)-JVS(523)*X(97)-JVS(524)
     &       *X(98)-JVS(525)*X(99)-JVS(526)*X(100)-JVS(527)*X(102))
     &       /(JVS(517))
      X(81) = (X(81)-JVS(504)*X(89)-JVS(505)*X(90)-JVS(506)*X(91)
     &       -JVS(507)*X(92)-JVS(508)*X(95)-JVS(509)*X(97)-JVS(510)
     &       *X(98)-JVS(511)*X(99)-JVS(512)*X(101))/(JVS(503))
      X(80) = (X(80)-JVS(491)*X(81)-JVS(492)*X(89)-JVS(493)*X(90)
     &       -JVS(494)*X(91)-JVS(495)*X(92)-JVS(496)*X(94)-JVS(497)
     &       *X(96)-JVS(498)*X(97)-JVS(499)*X(98)-JVS(500)*X(99)
     &       -JVS(501)*X(101))/(JVS(490))
      X(79) = (X(79)-JVS(477)*X(87)-JVS(478)*X(93)-JVS(479)*X(94)
     &       -JVS(480)*X(95)-JVS(481)*X(97)-JVS(482)*X(98)-JVS(483)
     &       *X(99)-JVS(484)*X(100)-JVS(485)*X(102))/(JVS(476))
      X(78) = (X(78)-JVS(462)*X(82)-JVS(463)*X(93)-JVS(464)*X(94)
     &       -JVS(465)*X(95)-JVS(466)*X(97)-JVS(467)*X(98)-JVS(468)
     &       *X(99)-JVS(469)*X(100)-JVS(470)*X(102))/(JVS(461))
      X(77) = (X(77)-JVS(452)*X(87)-JVS(453)*X(92)-JVS(454)*X(96)
     &       -JVS(455)*X(98)-JVS(456)*X(99)-JVS(457)*X(101))
     &       /(JVS(451))
      X(76) = (X(76)-JVS(446)*X(94)-JVS(447)*X(95)-JVS(448)*X(97)
     &       -JVS(449)*X(98)-JVS(450)*X(99))/(JVS(445))
      X(75) = (X(75)-JVS(429)*X(76)-JVS(430)*X(77)-JVS(431)*X(78)
     &       -JVS(432)*X(79)-JVS(433)*X(87)-JVS(434)*X(88)-JVS(435)
     &       *X(89)-JVS(436)*X(90)-JVS(437)*X(91)-JVS(438)*X(95)
     &       -JVS(439)*X(96)-JVS(440)*X(97)-JVS(441)*X(98)-JVS(442)
     &       *X(99)-JVS(443)*X(100)-JVS(444)*X(102))/(JVS(428))
      X(74) = (X(74)-JVS(413)*X(80)-JVS(414)*X(81)-JVS(415)*X(89)
     &       -JVS(416)*X(90)-JVS(417)*X(91)-JVS(418)*X(92)-JVS(419)
     &       *X(97)-JVS(420)*X(98)-JVS(421)*X(99))/(JVS(412))
      X(73) = (X(73)-JVS(402)*X(76)-JVS(403)*X(93)-JVS(404)*X(95)
     &       -JVS(405)*X(98)-JVS(406)*X(99)-JVS(407)*X(100)-JVS(408)
     &       *X(102))/(JVS(401))
      X(72) = (X(72)-JVS(389)*X(80)-JVS(390)*X(81)-JVS(391)*X(90)
     &       -JVS(392)*X(91)-JVS(393)*X(94)-JVS(394)*X(96)-JVS(395)
     &       *X(97)-JVS(396)*X(98)-JVS(397)*X(99)-JVS(398)*X(101))
     &       /(JVS(388))
      X(71) = (X(71)-JVS(380)*X(93)-JVS(381)*X(98)-JVS(382)*X(99)
     &       -JVS(383)*X(100)-JVS(384)*X(102))/(JVS(379))
      X(70) = (X(70)-JVS(369)*X(76)-JVS(370)*X(87)-JVS(371)*X(93)
     &       -JVS(372)*X(97)-JVS(373)*X(98)-JVS(374)*X(100)-JVS(375)
     &       *X(102))/(JVS(368))
      X(69) = (X(69)-JVS(361)*X(81)-JVS(362)*X(96)-JVS(363)*X(97)
     &       -JVS(364)*X(98)-JVS(365)*X(99)-JVS(366)*X(101))
     &       /(JVS(360))
      X(68) = (X(68)-JVS(348)*X(74)-JVS(349)*X(80)-JVS(350)*X(81)
     &       -JVS(351)*X(88)-JVS(352)*X(89)-JVS(353)*X(90)-JVS(354)
     &       *X(92)-JVS(355)*X(97)-JVS(356)*X(98)-JVS(357)*X(99)
     &       -JVS(358)*X(100)-JVS(359)*X(102))/(JVS(347))
      X(67) = (X(67)-JVS(340)*X(90)-JVS(341)*X(97)-JVS(342)*X(98)
     &       -JVS(343)*X(99)-JVS(344)*X(102))/(JVS(339))
      X(66) = (X(66)-JVS(319)*X(67)-JVS(320)*X(71)-JVS(321)*X(73)
     &       -JVS(322)*X(75)-JVS(323)*X(76)-JVS(324)*X(77)-JVS(325)
     &       *X(78)-JVS(326)*X(79)-JVS(327)*X(82)-JVS(328)*X(87)
     &       -JVS(329)*X(88)-JVS(330)*X(91)-JVS(331)*X(93)-JVS(332)
     &       *X(94)-JVS(333)*X(96)-JVS(334)*X(97)-JVS(335)*X(98)
     &       -JVS(336)*X(99)-JVS(337)*X(100)-JVS(338)*X(102))
     &       /(JVS(318))
      X(65) = (X(65)-JVS(300)*X(76)-JVS(301)*X(93)-JVS(302)*X(98)
     &       -JVS(303)*X(99)-JVS(304)*X(100)-JVS(305)*X(102))
     &       /(JVS(299))
      X(64) = (X(64)-JVS(285)*X(67)-JVS(286)*X(76)-JVS(287)*X(78)
     &       -JVS(288)*X(79)-JVS(289)*X(88)-JVS(290)*X(95)-JVS(291)
     &       *X(97)-JVS(292)*X(98)-JVS(293)*X(100)-JVS(294)*X(102))
     &       /(JVS(284))
      X(63) = (X(63)-JVS(279)*X(90)-JVS(280)*X(91)-JVS(281)*X(96)
     &       -JVS(282)*X(98)-JVS(283)*X(99))/(JVS(278))
      X(62) = (X(62)-JVS(268)*X(63)-JVS(269)*X(69)-JVS(270)*X(72)
     &       -JVS(271)*X(83)-JVS(272)*X(90)-JVS(273)*X(91)-JVS(274)
     &       *X(96)-JVS(275)*X(98)-JVS(276)*X(99)-JVS(277)*X(102))
     &       /(JVS(267))
      X(61) = (X(61)-JVS(259)*X(86)-JVS(260)*X(91)-JVS(261)*X(93)
     &       -JVS(262)*X(94)-JVS(263)*X(98)-JVS(264)*X(100)-JVS(265)
     &       *X(102))/(JVS(258))
      X(60) = (X(60)-JVS(252)*X(71)-JVS(253)*X(73)-JVS(254)*X(98)
     &       -JVS(255)*X(99)-JVS(256)*X(100))/(JVS(251))
      X(59) = (X(59)-JVS(244)*X(93)-JVS(245)*X(98)-JVS(246)*X(99)
     &       -JVS(247)*X(100)-JVS(248)*X(102))/(JVS(243))
      X(58) = (X(58)-JVS(234)*X(74)-JVS(235)*X(81)-JVS(236)*X(89)
     &       -JVS(237)*X(92)-JVS(238)*X(97)-JVS(239)*X(98))/(JVS(233))
      X(57) = (X(57)-JVS(229)*X(82)-JVS(230)*X(91)-JVS(231)*X(98)
     &       -JVS(232)*X(99))/(JVS(228))
      X(56) = (X(56)-JVS(223)*X(71)-JVS(224)*X(73)-JVS(225)*X(98)
     &       -JVS(226)*X(99)-JVS(227)*X(100))/(JVS(222))
      X(55) = (X(55)-JVS(216)*X(92)-JVS(217)*X(93)-JVS(218)*X(98)
     &       -JVS(219)*X(100)-JVS(220)*X(101))/(JVS(215))
      X(54) = (X(54)-JVS(209)*X(76)-JVS(210)*X(94)-JVS(211)*X(97)
     &       -JVS(212)*X(98)-JVS(213)*X(99)-JVS(214)*X(100))
     &       /(JVS(208))
      X(53) = (X(53)-JVS(203)*X(94)-JVS(204)*X(96)-JVS(205)*X(97)
     &       -JVS(206)*X(99))/(JVS(202))
      X(52) = (X(52)-JVS(196)*X(84)-JVS(197)*X(85)-JVS(198)*X(90)
     &       -JVS(199)*X(91)-JVS(200)*X(94)-JVS(201)*X(98))/(JVS(195))
      X(51) = (X(51)-JVS(191)*X(90)-JVS(192)*X(91)-JVS(193)*X(92)
     &       -JVS(194)*X(97))/(JVS(190))
      X(50) = (X(50)-JVS(186)*X(88)-JVS(187)*X(94)-JVS(188)*X(98)
     &       -JVS(189)*X(99))/(JVS(185))
      X(49) = (X(49)-JVS(173)*X(57)-JVS(174)*X(76)-JVS(175)*X(79)
     &       -JVS(176)*X(88)-JVS(177)*X(92)-JVS(178)*X(94)-JVS(179)
     &       *X(95)-JVS(180)*X(97)-JVS(181)*X(98)-JVS(182)*X(99)
     &       -JVS(183)*X(100))/(JVS(172))
      X(48) = (X(48)-JVS(166)*X(82)-JVS(167)*X(98)-JVS(168)*X(99)
     &       -JVS(169)*X(100))/(JVS(165))
      X(47) = (X(47)-JVS(163)*X(98)-JVS(164)*X(99))/(JVS(162))
      X(46) = (X(46)-JVS(160)*X(98)-JVS(161)*X(99))/(JVS(159))
      X(45) = (X(45)-JVS(157)*X(98)-JVS(158)*X(99))/(JVS(156))
      X(44) = (X(44)-JVS(152)*X(81)-JVS(153)*X(91)-JVS(154)*X(95)
     &       -JVS(155)*X(101))/(JVS(151))
      X(43) = (X(43)-JVS(147)*X(89)-JVS(148)*X(95)-JVS(149)*X(98)
     &       -JVS(150)*X(102))/(JVS(146))
      X(42) = (X(42)-JVS(143)*X(77)-JVS(144)*X(95)-JVS(145)*X(98))
     &       /(JVS(142))
      X(41) = (X(41)-JVS(139)*X(91)-JVS(140)*X(98)-JVS(141)*X(102))
     &       /(JVS(138))
      X(40) = (X(40)-JVS(135)*X(91)-JVS(136)*X(98)-JVS(137)*X(99))
     &       /(JVS(134))
      X(39) = (X(39)-JVS(131)*X(86)-JVS(132)*X(98)-JVS(133)*X(102))
     &       /(JVS(130))
      X(38) = (X(38)-JVS(128)*X(50)-JVS(129)*X(94))/(JVS(127))
      X(37) = (X(37)-JVS(122)*X(45)-JVS(123)*X(46)-JVS(124)*X(47)
     &       -JVS(125)*X(98)-JVS(126)*X(99))/(JVS(121))
      X(36) = (X(36)-JVS(116)*X(58)-JVS(117)*X(81)-JVS(118)*X(98)
     &       -JVS(119)*X(101)-JVS(120)*X(102))/(JVS(115))
      X(35) = (X(35)-JVS(113)*X(98)-JVS(114)*X(99))/(JVS(112))
      X(34) = (X(34)-JVS(110)*X(98)-JVS(111)*X(99))/(JVS(109))
      X(33) = (X(33)-JVS(105)*X(61)-JVS(106)*X(85)-JVS(107)*X(86)
     &       -JVS(108)*X(91))/(JVS(104))
      X(32) = (X(32)-JVS(102)*X(91)-JVS(103)*X(95))/(JVS(101))
      X(31) = (X(31)-JVS(98)*X(87)-JVS(99)*X(97)-JVS(100)*X(98))
     &       /(JVS(97))
      X(30) = (X(30)-JVS(95)*X(89)-JVS(96)*X(91))/(JVS(94))
      X(29) = (X(29)-JVS(92)*X(92)-JVS(93)*X(97))/(JVS(91))
      X(28) = (X(28)-JVS(89)*X(93)-JVS(90)*X(98))/(JVS(88))
      X(27) = (X(27)-JVS(83)*X(85)-JVS(84)*X(91)-JVS(85)*X(93)-JVS(86)
     &       *X(94)-JVS(87)*X(102))/(JVS(82))
      X(26) = (X(26)-JVS(78)*X(52)-JVS(79)*X(90)-JVS(80)*X(94)-JVS(81)
     &       *X(98))/(JVS(77))
      X(25) = (X(25)-JVS(73)*X(52)-JVS(74)*X(98))/(JVS(72))
      X(24) = (X(24)-JVS(70)*X(26)-JVS(71)*X(98))/(JVS(69))
      X(23) = (X(23)-JVS(65)*X(76)-JVS(66)*X(94)-JVS(67)*X(97)-JVS(68)
     &       *X(100))/(JVS(64))
      X(22) = (X(22)-JVS(62)*X(91)-JVS(63)*X(97))/(JVS(61))
      X(21) = (X(21)-JVS(59)*X(83)-JVS(60)*X(96))/(JVS(58))
      X(20) = (X(20)-JVS(56)*X(55)-JVS(57)*X(101))/(JVS(55))
      X(19) = (X(19)-JVS(54)*X(26))/(JVS(53))
      X(18) = (X(18)-JVS(52)*X(19))/(JVS(51))
      X(17) = (X(17)-JVS(50)*X(24))/(JVS(49))
      X(16) = (X(16)-JVS(48)*X(75))/(JVS(47))
      X(15) = (X(15)-JVS(46)*X(19))/(JVS(45))
      X(14) = (X(14)-JVS(44)*X(24))/(JVS(43))
      X(13) = (X(13)-JVS(42)*X(75))/(JVS(41))
      X(12) = (X(12)-JVS(37)*X(59)-JVS(38)*X(65)-JVS(39)*X(70)-JVS(40)
     &       *X(102))/(JVS(36))
      X(11) = (X(11)-JVS(31)*X(24)-JVS(32)*X(26)-JVS(33)*X(61)-JVS(34)
     &       *X(93)-JVS(35)*X(98))/(JVS(30))
      X(10) = (X(10)-JVS(28)*X(55)-JVS(29)*X(98))/(JVS(27))
      X(9) = (X(9)-JVS(24)*X(83)-JVS(25)*X(90)-JVS(26)*X(94))
     &      /(JVS(23))
      X(8) = (X(8)-JVS(21)*X(91)-JVS(22)*X(99))/(JVS(20))
      X(7) = (X(7)-JVS(16)*X(27)-JVS(17)*X(42)-JVS(18)*X(98)-JVS(19)
     &      *X(102))/(JVS(15))
      X(6) = (X(6)-JVS(12)*X(77)-JVS(13)*X(92)-JVS(14)*X(98))
     &      /(JVS(11))
      X(5) = (X(5)-JVS(7)*X(48)-JVS(8)*X(49)-JVS(9)*X(54)-JVS(10)
     &      *X(98))/(JVS(6))
      X(4) = (X(4)-JVS(5)*X(32))/(JVS(4))
      X(3) = X(3)/JVS(3)
      X(2) = X(2)/JVS(2)
      X(1) = X(1)/JVS(1)
      RETURN
      END

C End of KppSolve_g function                                         
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C                                                                  
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C                                                                  
C BLAS_UTIL - BLAS-LIKE utility functions                          
C   Arguments :                                                    
C                                                                  
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!--------------------------------------------------------------
!
! BLAS/LAPACK-like subroutines used by the integration algorithms
! It is recommended to replace them by calls to the optimized
!      BLAS/LAPACK library for your machine
!
!  (C) Adrian Sandu, Aug. 2004
!      Virginia Polytechnic Institute and State University
!--------------------------------------------------------------


!--------------------------------------------------------------

!--------------------------------------------------------------
      SUBROUTINE WAXPY_g(N,Alpha,X,incX,Y,incY)
!--------------------------------------------------------------
!     constant times a vector plus a vector: y <- y + Alpha*x
!     only for incX=incY=1
!     after BLAS
!     replace this by the function from the optimized BLAS implementation:
!         CALL SAXPY(N,Alpha,X,1,Y,1) or  CALL DAXPY(N,Alpha,X,1,Y,1)
!--------------------------------------------------------------

      INTEGER i,incX,incY,M,MP1,N
      REAL*8 X(N),Y(N),Alpha
      REAL*8 ZERO
      PARAMETER( ZERO = 0.0d0 )

      IF (Alpha .EQ. ZERO) RETURN
      IF (N .LE. 0) RETURN

      M = MOD(N,4)
      IF( M .NE. 0 ) THEN
        DO i = 1,M
          Y(i) = Y(i) + Alpha*X(i)
        END DO
        IF( N .LT. 4 ) RETURN
      END IF
      MP1 = M + 1
      DO i = MP1,N,4
        Y(i) = Y(i) + Alpha*X(i)
        Y(i + 1) = Y(i + 1) + Alpha*X(i + 1)
        Y(i + 2) = Y(i + 2) + Alpha*X(i + 2)
        Y(i + 3) = Y(i + 3) + Alpha*X(i + 3)
      END DO
      RETURN
      END

! End of WAXPY_g

!--------------------------------------------------------------

!--------------------------------------------------------------

!--------------------------------------------------------------

!--------------------------------------------------------------

!--------------------------------------------------------------
!--------------------------------------------------------------
C End of BLAS_UTIL function                                        
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C                                                                  
C Sparse Jacobian Data Structures File                             
C                                                                  
C Generated by KPP-2.2.4 for Mistra symbolic chemistry Kinetics PreProcessor
C       (http://www.cs.vt.edu/~asandu/Software/Kpp)                
C KPP is distributed under GPL, the general public licence         
C       (http://www.gnu.org/copyleft/gpl.html)                     
C (C) 1995-1997, V. Damian & A. Sandu, CGRER, Univ. Iowa           
C (C) 1997-2005, A. Sandu, Michigan Tech, Virginia Tech            
C     With important contributions from:                           
C        M. Damian, Villanova University, USA                      
C        R. Sander, Max-Planck Institute for Chemistry, Mainz, Germany
C                                                                  
C File                 : gas_JacobianSP.f                          
C Time                 : Wed Jul 14 18:26:57 2021                  
C Working directory    : /local/josue/Mistra_2019/src/mech         
C Equation file        : gas.k                                     
C Output root filename : gas                                       
C                                                                  
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~




C Sparse Jacobian Data                                             

      BLOCK DATA JACOBIAN_SPARSE_DATA_g

      INCLUDE 'gas_Sparse.h'
      INTEGER i






      DATA( LU_ICOL_g(i), i = 1, 300 ) /
     *  1,  2,  3,  4, 32,  5, 48, 49, 54, 98,  6, 77, 92, 98,  7,
     * 27, 42, 98,102,  8, 91, 99,  9, 83, 90, 94, 10, 55, 98, 11,
     * 24, 26, 61, 93, 98, 12, 59, 65, 70,102, 13, 75, 14, 24, 15,
     * 19, 16, 75, 17, 24, 18, 19, 19, 26, 20, 55,101, 21, 83, 96,
     * 22, 91, 97, 23, 76, 94, 97,100, 24, 26, 98, 25, 52, 98, 24,
     * 25, 26, 52, 90, 94, 98, 27, 85, 91, 93, 94,102, 28, 93, 98,
     * 29, 92, 97, 30, 89, 91, 31, 87, 97, 98, 32, 91, 95, 33, 61,
     * 85, 86, 91, 34, 98, 99, 35, 98, 99, 36, 58, 81, 98,101,102,
     * 37, 45, 46, 47, 98, 99, 38, 50, 94, 39, 86, 98,102, 40, 91,
     * 98, 99, 41, 91, 98,102, 42, 77, 95, 98, 43, 89, 95, 98,102,
     * 44, 81, 91, 95,101, 45, 98, 99, 46, 98, 99, 47, 98, 99, 48,
     * 82, 98, 99,100,  2,  3, 49, 57, 76, 79, 88, 92, 94, 95, 97,
     * 98, 99,100, 38, 50, 88, 94, 98, 99, 51, 90, 91, 92, 97, 52,
     * 84, 85, 90, 91, 94, 98, 53, 94, 96, 97, 99, 23, 54, 76, 94,
     * 97, 98, 99,100, 55, 92, 93, 98,100,101, 45, 56, 71, 73, 98,
     * 99,100, 57, 82, 91, 98, 99, 58, 74, 81, 89, 92, 97, 98, 45,
     * 46, 47, 59, 93, 98, 99,100,102, 46, 47, 60, 71, 73, 98, 99,
     *100, 39, 61, 86, 91, 93, 94, 98,100,102, 40, 62, 63, 69, 72,
     * 83, 90, 91, 96, 98, 99,102, 63, 90, 91, 96, 98, 99, 64, 67,
     * 76, 78, 79, 88, 95, 97, 98,100,102, 37, 45, 46, 47, 65, 76 /

      DATA( LU_ICOL_g(i), i = 301, 600 ) /
     * 93, 98, 99,100,102, 34, 35, 45, 46, 47, 48, 50, 54, 56, 57,
     * 60, 65, 66, 67, 71, 73, 75, 76, 77, 78, 79, 82, 87, 88, 91,
     * 93, 94, 96, 97, 98, 99,100,102, 67, 90, 97, 98, 99,102, 58,
     * 67, 68, 74, 80, 81, 88, 89, 90, 92, 97, 98, 99,100,102, 69,
     * 81, 96, 97, 98, 99,101, 31, 70, 76, 87, 93, 97, 98,100,102,
     * 35, 46, 47, 71, 93, 98, 99,100,102, 53, 63, 69, 72, 80, 81,
     * 90, 91, 94, 96, 97, 98, 99,101, 60, 71, 73, 76, 93, 95, 98,
     * 99,100,102, 29, 51, 58, 74, 80, 81, 89, 90, 91, 92, 97, 98,
     * 99, 32, 42, 43, 63, 64, 67, 75, 76, 77, 78, 79, 87, 88, 89,
     * 90, 91, 95, 96, 97, 98, 99,100,102, 76, 94, 95, 97, 98, 99,
     * 77, 87, 92, 96, 98, 99,101, 71, 73, 76, 78, 82, 93, 94, 95,
     * 97, 98, 99,100,102, 60, 70, 71, 73, 76, 79, 87, 93, 94, 95,
     * 97, 98, 99,100,102, 53, 69, 72, 74, 80, 81, 89, 90, 91, 92,
     * 94, 96, 97, 98, 99,101, 30, 81, 89, 90, 91, 92, 95, 97, 98,
     * 99,101, 57, 65, 76, 79, 82, 87, 91, 93, 94, 95, 97, 98, 99,
     *100,102, 21, 83, 90, 92, 93, 94, 95, 96, 97, 98, 99,101, 61,
     * 77, 84, 86, 87, 91, 92, 93, 94, 96, 98, 99,100,101,102, 33,
     * 42, 61, 77, 84, 85, 86, 87, 91, 92, 93, 94, 95, 96, 98, 99,
     *100,101,102, 39, 77, 86, 87, 91, 92, 93, 95, 96, 98, 99,100,
     *101,102, 87, 92, 95, 96, 97, 98, 99,101,  1, 39, 56, 57, 59 /

      DATA( LU_ICOL_g(i), i = 601, 900 ) /
     * 65, 70, 71, 73, 76, 78, 82, 86, 87, 88, 91, 92, 93, 94, 95,
     * 96, 97, 98, 99,100,101,102,  1,  2,  3, 20, 30, 36, 43, 44,
     * 45, 46, 47, 55, 58, 59, 69, 74, 80, 81, 87, 89, 90, 91, 92,
     * 93, 94, 95, 96, 97, 98, 99,100,101,102, 38, 50, 51, 52, 62,
     * 63, 67, 68, 69, 72, 74, 80, 81, 83, 84, 85, 86, 87, 88, 89,
     * 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,100,101,102, 22, 28,
     * 30, 32, 33, 40, 41, 44, 51, 55, 57, 59, 61, 63, 65, 70, 71,
     * 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89,
     * 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,100,101,102, 29, 51,
     * 68, 74, 77, 80, 81, 83, 87, 88, 89, 90, 91, 92, 93, 94, 95,
     * 96, 97, 98, 99,100,101,102, 28, 55, 59, 61, 65, 70, 71, 73,
     * 76, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97,
     * 98, 99,100,101,102, 38, 50, 52, 53, 61, 76, 83, 84, 85, 86,
     * 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,100,101,
     *102, 32, 41, 42, 43, 44, 51, 63, 64, 67, 75, 76, 77, 78, 79,
     * 81, 82, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
     *100,101,102, 21, 53, 62, 63, 69, 72, 80, 81, 83, 87, 89, 90,
     * 91, 92, 93, 94, 95, 96, 97, 98, 99,100,101,102,  3, 22, 29,
     * 51, 53, 58, 64, 67, 68, 69, 70, 72, 74, 76, 77, 78, 79, 80,
     * 81, 82, 83, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 /

      DATA( LU_ICOL_g(i), i = 901, 1110 ) /
     * 99,100,101,102, 24, 26, 28, 31, 34, 35, 36, 37, 38, 39, 40,
     * 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 54, 55, 56, 57, 58,
     * 60, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77,
     * 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,
     * 93, 94, 95, 96, 97, 98, 99,100,101,102,  2, 34, 35, 40, 45,
     * 46, 47, 48, 50, 53, 54, 56, 57, 60, 62, 63, 66, 67, 69, 71,
     * 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88, 89,
     * 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,100,101,102, 34, 45,
     * 48, 59, 65, 70, 71, 73, 76, 77, 78, 79, 82, 84, 85, 86, 87,
     * 91, 92, 93, 94, 95, 96, 97, 98, 99,100,101,102,  1, 44, 55,
     * 81, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,100,101,
     *102,  2,  3, 25, 27, 38, 41, 42, 49, 50, 52, 54, 56, 57, 59,
     * 60, 65, 67, 70, 71, 73, 76, 77, 78, 79, 82, 84, 85, 86, 87,
     * 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,100,101,102 /


      DATA LU_CROW_g /
     *  1,  2,  3,  4,  6, 11, 15, 20, 23, 27, 30, 36, 41, 43, 45,
     * 47, 49, 51, 53, 55, 58, 61, 64, 69, 72, 75, 82, 88, 91, 94,
     * 97,101,104,109,112,115,121,127,130,134,138,142,146,151,156,
     *159,162,165,170,184,190,195,202,207,215,221,228,233,240,249,
     *257,266,278,284,295,306,339,345,360,367,376,385,399,409,422,
     *445,451,458,471,486,502,513,528,540,555,574,588,596,623,656,
     *689,734,758,786,812,844,868,905,971,1019,1048,1067,
     *1111 /


      DATA LU_DIAG_g /
     *  1,  2,  3,  4,  6, 11, 15, 20, 23, 27, 30, 36, 41, 43, 45,
     * 47, 49, 51, 53, 55, 58, 61, 64, 69, 72, 77, 82, 88, 91, 94,
     * 97,101,104,109,112,115,121,127,130,134,138,142,146,151,156,
     *159,162,165,172,185,190,195,202,208,215,222,228,233,243,251,
     *258,267,278,284,299,318,339,347,360,368,379,388,401,412,428,
     *445,451,461,476,490,503,517,529,542,560,576,588,610,642,676,
     *722,747,776,803,836,861,899,966,1015,1045,1065,1110,
     *1111 /


      END


C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C                                                                  
C Initialization of Utility Data Structures                        
C                                                                  
C Generated by KPP-2.2.4 for Mistra symbolic chemistry Kinetics PreProcessor
C       (http://www.cs.vt.edu/~asandu/Software/Kpp)                
C KPP is distributed under GPL, the general public licence         
C       (http://www.gnu.org/copyleft/gpl.html)                     
C (C) 1995-1997, V. Damian & A. Sandu, CGRER, Univ. Iowa           
C (C) 1997-2005, A. Sandu, Michigan Tech, Virginia Tech            
C     With important contributions from:                           
C        M. Damian, Villanova University, USA                      
C        R. Sander, Max-Planck Institute for Chemistry, Mainz, Germany
C                                                                  
C File                 : gas_Monitor.f                             
C Time                 : Wed Jul 14 18:26:57 2021                  
C Working directory    : /local/josue/Mistra_2019/src/mech         
C Equation file        : gas.k                                     
C Output root filename : gas                                       
C                                                                  
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



      BLOCK DATA MONITOR_DATA_g

      INCLUDE 'gas_Parameters.h'
      INCLUDE 'gas_Global.h'
      INTEGER i


      DATA( SPC_NAMES(i), i = 1, 100 ) /
     *'CH2I2','CH2ClI','CH2BrI','DUMM1','CO2',
     *'DMSO2','CH3SO3H','ClONO','ClO3','HIO3',
     *'NHS','XOR','HNO3l1','NH3l1','SO4l1',
     *'HNO3l2','NH3l2','SO4l2','H2SO4','I2O2',
     *'Cl2O3','BrNO2','CHO2','NH3','HOSO2',
     *'SO3','CH3SO3','HONO','Br2O','INO2',
     *'RBr','N2O5','SPAN','CH4','C2H6',
     *'HOI','RCl','O1D','SOR','ClNO2',
     *'HNO4','CH3SO2H','HI','INO3','CH3I',
     *'C3H7I','C2H5I','ACTA','CO','H2',
     *'BrNO3','SO2','Cl2O2','ACO2','OIO',
     *'CH3OH','PAN','IBr','IRO2','C2H5OH',
     *'CH3S','HOCl','ClNO3','HBr','ClRO2',
     *'HCl','H2O2','HOBr','ICl','BrRO2',
     *'ETO2','Cl2','EO2','Br2','HNO3',
     *'ETHE','DMSO','ROOH','ALD2','BrCl',
     *'I2','MCO3','OClO','CH3SO','CH3SO2',
     *'DMOO','DMS','HCHO','I','O3P',
     *'NO2','BrO','NO','O3','NO3',
     *'ClO','Br','OH','Cl','MO2' /

      DATA( SPC_NAMES(i), i = 101, 105 ) /
     *'IO','HO2','O2','H2O','N2' /





      DATA( EQN_NAMES(i), i = 1, 20 ) /
     *'     O1D + O2 --> O3P          ',
     *'     O1D + O3 --> O3P          ',
     *'     O1D + N2 --> O3P          ',
     *'    O1D + H2O --> 2 OH         ',
     *'     O1D + H2 --> OH + HO2     ',
     *'   H2O2 + O3P --> OH + HO2     ',
     *'   O3P + 2 O2 --> O3           ',
     *'     O3P + O3 --> 2 O2         ',
     *'O3P + O2 + N2 --> O3           ',
     *'      O3 + OH --> HO2 + O2     ',
     *'     OH + HO2 --> O2 + H2O     ',
     *'      H2 + OH --> HO2 + H2O    ',
     *'    H2O2 + OH --> HO2 + H2O    ',
     *'         2 OH --> O3P + H2O    ',
     *'         2 OH --> H2O2         ',
     *'     O3 + HO2 --> OH + 2 O2    ',
     *'        2 HO2 --> H2O2 + O2    ',
     *'           O3 --> O1D + O2     ',
     *'           O3 --> O3P + O2     ',
     *'         H2O2 --> 2 OH         ' /

      DATA( EQN_NAMES(i), i = 21, 40 ) /
     *'     O3P + NO --> NO2          ',
     *'      NO + OH --> HONO         ',
     *'     NO + HO2 --> NO2 + OH     ',
     *'      NO + O3 --> NO2 + O2     ',
     *'     NO + NO3 --> 2 NO2        ',
     *'    O3P + NO2 --> NO + O2      ',
     *'    O3P + NO2 --> NO3          ',
     *'     NO2 + OH --> HNO3         ',
     *'    NO2 + HO2 --> HNO4         ',
     *'     NO2 + O3 --> NO3 + O2     ',
     *'    NO2 + NO3 --> N2O5         ',
     *'          NO2 --> O3P + NO     ',
     *'    O3P + NO3 --> NO2 + O2     ',
     *'     NO3 + OH --> NO2 + HO2    ',
     *'    NO3 + HO2 --> NO2 + OH     ',
     *'        2 NO3 --> 2 NO2 + O2   ',
     *'          NO3 --> NO + O2      ',
     *'          NO3 --> O3P + NO2    ',
     *'         N2O5 --> NO2 + NO3    ',
     *'         N2O5 --> NO2 + NO3    ' /

      DATA( EQN_NAMES(i), i = 41, 60 ) /
     *'    HONO + OH --> NO2          ',
     *'         HONO --> NO + OH      ',
     *'    HNO3 + OH --> NO3 + H2O    ',
     *'         HNO3 --> NO2 + OH     ',
     *'         HNO4 --> NO2 + HO2    ',
     *'    HNO4 + OH --> NO2 + O2 + H2O',
     *'         HNO4 --> NO2 + HO2    ',
     *'         HNO4 --> NO3 + OH     ',
     *'     NH3 + OH --> NHS + H2O    ',
     *'      CO + OH --> CO2 + HO2    ',
     *'     CH4 + OH --> MO2 + H2O    ',
     *'    C2H6 + OH --> ETO2 + H2O   ',
     *'    ETHE + OH --> EO2          ',
     *'    ETHE + O3 --> 0.37 CHO2 + 0.63 CO + HCHO + 0.13 OH + 0.13 ',
     *'   ETHE + NO3 --> EO2          ',
     *'   CHO2 + H2O --> ACO2         ',
     *'     NO + MO2 --> HCHO + NO2 + HO2',
     *'    MO2 + HO2 --> ROOH + O2    ',
     *'        2 MO2 --> CH3OH + HCHO ',
     *'        2 MO2 --> 2 HCHO + 2 HO2' /

      DATA( EQN_NAMES(i), i = 61, 80 ) /
     *'    ETO2 + NO --> ALD2 + NO2 + HO2',
     *'   ETO2 + HO2 --> ROOH + O2    ',
     *'       2 ETO2 --> C2H5OH + ALD2',
     *'       2 ETO2 --> 2 ALD2 + 2 HO2',
     *'   ETO2 + MO2 --> CH3OH + ALD2 ',
     *'   ETO2 + MO2 --> C2H5OH + HCHO',
     *'   ETO2 + MO2 --> ALD2 + HCHO + 2 HO2',
     *'     EO2 + NO --> ALD2 + NO2 + HO2',
     *'     EO2 + NO --> 2 HCHO + NO2 + HO2',
     *'    EO2 + HO2 --> ROOH + O2    ',
     *'        2 EO2 --> C2H5OH + ALD2',
     *'        2 EO2 --> ALD2 + 2 HCHO + 2 HO2',
     *'    EO2 + MO2 --> C2H5OH + HCHO',
     *'    EO2 + MO2 --> CH3OH + ALD2 ',
     *'    EO2 + MO2 --> 0.5 ALD2 + 2 HCHO + 2 HO2',
     *'    MCO3 + NO --> NO2 + MO2    ',
     *'   MCO3 + HO2 --> ROOH + O2    ',
     *'       2 MCO3 --> 2 MO2        ',
     *'   MCO3 + MO2 --> HCHO + MO2 + HO2',
     *'   MCO3 + MO2 --> ACTA + HCHO  ' /

      DATA( EQN_NAMES(i), i = 81, 100 ) /
     *'   MCO3 + NO2 --> PAN          ',
     *'          PAN --> MCO3 + NO2   ',
     *'     PAN + OH --> CO + HCHO + NO2',
     *'    HCHO + OH --> CO + HO2 + H2O',
     *'   HCHO + NO3 --> CO + HNO3 + HO2',
     *'         HCHO --> CO + 2 HO2   ',
     *'         HCHO --> CO + H2      ',
     *'    ALD2 + OH --> MCO3 + H2O   ',
     *'   ALD2 + NO3 --> HNO3 + MCO3  ',
     *'         ALD2 --> CO + MO2 + HO2',
     *'   CH3OH + OH --> HCHO + HO2   ',
     *'  C2H5OH + OH --> EO2          ',
     *'  C2H5OH + OH --> ALD2 + HO2   ',
     *'    ACO2 + OH --> CO2 + HO2 + H2O',
     *'    ACTA + OH --> CO2 + MO2 + H2O',
     *'    ROOH + OH --> MO2 + H2O    ',
     *'    ROOH + OH --> HCHO + OH    ',
     *'         ROOH --> HCHO + OH + HO2',
     *'    SO2 + O3P --> SO3          ',
     *'     SO2 + OH --> HOSO2        ' /

      DATA( EQN_NAMES(i), i = 101, 120 ) /
     *'     SO2 + O3 --> SO3 + O2     ',
     *'   HOSO2 + O2 --> SO3 + HO2    ',
     *'          SO3 --> H2SO4        ',
     *'    NH3 + SO3 --> NHS          ',
     *'     DMS + OH --> DMOO + H2O   ',
     *'     DMS + OH --> DMSO + HO2   ',
     *'    DMS + NO3 --> HNO3 + DMOO  ',
     *'     DMS + Cl --> 0.45 HCl + 0.55 DMSO + 0.45 DMOO + 0.55 ClO',
     *'     DMS + Br --> RBr + MO2    ',
     *'    DMS + ClO --> DMSO + Cl    ',
     *'    DMS + BrO --> DMSO + Br    ',
     *'     DMS + IO --> DMSO + I     ',
     *'    DMOO + NO --> CH3S + HCHO + NO2',
     *'   DMOO + HO2 --> SOR          ',
     *'       2 DMOO --> 2 CH3S + 2 HCHO',
     *'   DMOO + MO2 --> CH3S + 2 HCHO + HO2',
     *'   DMOO + NO2 --> SPAN         ',
     *'    CH3S + O3 --> CH3SO        ',
     *'   CH3S + NO2 --> CH3SO + NO   ',
     *'   CH3S + NO2 --> SPAN         ' /

      DATA( EQN_NAMES(i), i = 121, 140 ) /
     *'    CH3S + NO --> CH3SO + NO2  ',
     *'    CH3S + NO --> NHS          ',
     *'   CH3SO + O3 --> CH3SO2       ',
     *'  CH3SO + NO2 --> CH3SO2 + NO  ',
     *'  CH3SO + NO2 --> SO2 + NO + MO2',
     *'       CH3SO2 --> SO2 + MO2    ',
     *'  CH3SO2 + O3 --> CH3SO3       ',
     *' CH3SO2 + NO2 --> CH3SO3 + NO  ',
     *' CH3SO2 + NO2 --> SPAN         ',
     *'  CH3SO2 + NO --> CH3SO3 + NO  ',
     *' CH3SO3 + HO2 --> CH3SO3H      ',
     *'     SOR + OH --> DMOO + H2O   ',
     *'          SOR --> CH3S + HCHO + OH',
     *'         SPAN --> CH3SO2 + NO2 ',
     *'    DMSO + OH --> 0.05 DMSO2 + 0.95 CH3SO2H + 0.95 MO2',
     *'    DMSO + Cl --> 0.9 HCl + 0.1 CH3SO + 0.9 DMOO + 0.1 MO2',
     *'   DMSO + BrO --> DMSO2 + Br   ',
     *' CH3SO2H + OH --> 0.05 CH3SO3H + 0.95 CH3SO2 + 0.05 HO2',
     *'CH3SO2H + NO3 --> HNO3 + CH3SO2',
     *'      O3 + Cl --> ClO + O2     ' /

      DATA( EQN_NAMES(i), i = 141, 160 ) /
     *'     Cl + HO2 --> HCl + O2     ',
     *'     Cl + HO2 --> ClO + OH     ',
     *'    H2O2 + Cl --> HCl + HO2    ',
     *'      H2 + Cl --> HCl + HO2    ',
     *'    HNO3 + Cl --> HCl + NO3    ',
     *'     NO2 + Cl --> ClONO        ',
     *'     NO2 + Cl --> ClNO2        ',
     *'     NO3 + Cl --> NO2 + ClO    ',
     *'     Cl2 + OH --> HOCl + Cl    ',
     *'          Cl2 --> 2 Cl         ',
     *'    O3P + ClO --> Cl + O2      ',
     *'     ClO + OH --> Cl + HO2     ',
     *'     ClO + OH --> HCl + O2     ',
     *'    ClO + HO2 --> HOCl + O2    ',
     *'     O3 + ClO --> Cl + 2 O2    ',
     *'     O3 + ClO --> OClO + O2    ',
     *'     NO + ClO --> NO2 + Cl     ',
     *'    NO2 + ClO --> ClNO3        ',
     *'    NO3 + ClO --> NO2 + Cl + O2',
     *'    NO3 + ClO --> OClO + NO2   ' /

      DATA( EQN_NAMES(i), i = 161, 180 ) /
     *'        2 ClO --> Cl2 + O2     ',
     *'        2 ClO --> 2 Cl + O2    ',
     *'        2 ClO --> OClO + Cl    ',
     *'        2 ClO --> Cl2O2        ',
     *'   OClO + ClO --> Cl2O3        ',
     *'    OClO + Cl --> 2 ClO        ',
     *'   OClO + O3P --> ClO + O2     ',
     *'   OClO + O3P --> ClO3         ',
     *'    OClO + OH --> HOCl + O2    ',
     *'    OClO + O3 --> ClO3 + O2    ',
     *'    OClO + NO --> NO2 + ClO    ',
     *'         OClO --> O3 + ClO     ',
     *'   Cl2O2 + Cl --> Cl2 + Cl     ',
     *'   Cl2O2 + O3 --> ClO + Cl     ',
     *'        Cl2O2 --> 2 ClO        ',
     *'        Cl2O2 --> 2 Cl + O2    ',
     *'        Cl2O3 --> OClO + ClO   ',
     *'     HCl + OH --> Cl + H2O     ',
     *'   HOCl + O3P --> ClO + OH     ',
     *'    HOCl + OH --> ClO + H2O    ' /

      DATA( EQN_NAMES(i), i = 181, 200 ) /
     *'         HOCl --> OH + Cl      ',
     *'   ClNO2 + OH --> HOCl + NO2   ',
     *'        ClNO2 --> NO2 + Cl     ',
     *'   ClNO3 + Cl --> Cl2 + NO3    ',
     *'  ClNO3 + O3P --> NO3 + ClO    ',
     *'   ClNO3 + OH --> 0.5 HOCl + 0.5 HNO3 + 0.5 NO3 + 0.5 ClO',
     *'        ClNO3 --> NO2 + ClO    ',
     *'        ClNO3 --> NO3 + Cl     ',
     *'     CH4 + Cl --> HCl + MO2    ',
     *'    C2H6 + Cl --> HCl + ETO2   ',
     *'    ETHE + Cl --> ClRO2        ',
     *'    HCHO + Cl --> CO + HCl + HO2',
     *'    ALD2 + Cl --> HCl + MCO3   ',
     *'   CH3OH + Cl --> HCl + HCHO + HO2',
     *'  C2H5OH + Cl --> HCl + 0.08 EO2 + 0.92 ALD2 + 0.92 HO2',
     *'    ROOH + Cl --> HCl + HCHO + OH',
     *'    ACO2 + Cl --> HCl + HO2    ',
     *'    ACTA + Cl --> HCl + MO2    ',
     *'     PAN + Cl --> CO + HCl + HCHO + NO2',
     *'     Cl + MO2 --> 0.5 CO + 0.5 HCl + 0.5 HCHO + 0.5 ClO + 0.5 ' /

      DATA( EQN_NAMES(i), i = 201, 220 ) /
     *'    ClO + MO2 --> HCHO + Cl + HO2',
     *'     RCl + OH --> ClRO2 + H2O  ',
     *'   ClRO2 + NO --> HCl + MCO3 + NO2',
     *'  ClRO2 + HO2 --> XOR + H2O    ',
     *'      2 ClRO2 --> 2 HCl + 2 MCO3',
     *'  ClRO2 + MO2 --> HCl + MCO3 + HCHO + HO2',
     *'      O3 + Br --> BrO + O2     ',
     *'     Br + HO2 --> HBr + O2     ',
     *'    H2O2 + Br --> 0.5 HBr + 0.5 HOBr + 0.5 OH + 0.5 HO2',
     *'     NO2 + Br --> BrNO2        ',
     *'     NO3 + Br --> NO2 + BrO    ',
     *'     Br2 + OH --> HOBr + Br    ',
     *'    Br2 + O3P --> BrO + Br     ',
     *'          Br2 --> 2 Br         ',
     *'     BrO + Br --> Br2O         ',
     *'    O3P + BrO --> Br + O2      ',
     *'     BrO + OH --> Br + HO2     ',
     *'    BrO + HO2 --> HOBr + O2    ',
     *'     BrO + NO --> NO2 + Br     ',
     *'    NO2 + BrO --> BrNO3        ' /

      DATA( EQN_NAMES(i), i = 221, 240 ) /
     *'    BrO + NO3 --> NO2 + Br     ',
     *'     BrO + O3 --> Br + 2 O2    ',
     *'        2 BrO --> 2 Br + O2    ',
     *'        2 BrO --> Br2 + O2     ',
     *'          BrO --> O3 + Br      ',
     *'    Br2O + Br --> Br2 + BrO    ',
     *'     HBr + OH --> Br + H2O     ',
     *'    HBr + NO3 --> HNO3 + Br    ',
     *'   HOBr + O3P --> BrO + OH     ',
     *'         HOBr --> Br + OH      ',
     *'        BrNO2 --> NO2 + Br     ',
     *'  BrNO3 + O3P --> NO3 + Br     ',
     *'   BrNO3 + Br --> Br2 + NO3    ',
     *'        BrNO3 --> NO2 + BrO    ',
     *'        BrNO3 --> NO3 + Br     ',
     *'    ETHE + Br --> HBr + BrRO2  ',
     *'    HCHO + Br --> CO + HBr + HO2',
     *'    ALD2 + Br --> HBr + MCO3   ',
     *'    ROOH + Br --> HBr + MO2    ',
     *'     Br + MO2 --> CHO2 + HBr   ' /

      DATA( EQN_NAMES(i), i = 241, 260 ) /
     *'   HCHO + BrO --> CO + HOBr + HO2',
     *'    BrO + MO2 --> HCHO + Br + HO2',
     *'    BrO + MO2 --> HOBr + HCHO  ',
     *'     RBr + OH --> BrRO2 + H2O  ',
     *'   BrRO2 + NO --> ALD2 + NO2 + Br',
     *'  BrRO2 + HO2 --> XOR + H2O    ',
     *'      2 BrRO2 --> 2 ALD2 + 2 Br',
     *'  BrRO2 + MO2 --> ALD2 + HCHO + Br + HO2',
     *'       I + O3 --> IO + O2      ',
     *'      I + HO2 --> HI + O2      ',
     *'      I + NO2 --> INO2         ',
     *'      I + NO3 --> NO2 + IO     ',
     *'          2 I --> I2           ',
     *'     I2 + O3P --> I + IO       ',
     *'      I2 + OH --> HOI + I      ',
     *'     I2 + NO3 --> INO3 + I     ',
     *'           I2 --> 2 I          ',
     *'     O3P + IO --> I + O2       ',
     *'     IO + HO2 --> HOI + O2     ',
     *'      NO + IO --> I + NO2      ' /

      DATA( EQN_NAMES(i), i = 261, 280 ) /
     *'     NO2 + IO --> INO3         ',
     *'         2 IO --> 0.51 I2O2 + 0.38 OIO + 0.05 I2 + 0.5 I',
     *'           IO --> I + O3       ',
     *'     OIO + OH --> HIO3         ',
     *'     OIO + NO --> NO2 + IO     ',
     *'        2 OIO --> I2O2         ',
     *'          OIO --> I + O2       ',
     *'         I2O2 --> 2 I + O2     ',
     *'      HI + OH --> I + H2O      ',
     *'     HI + NO3 --> HNO3 + I     ',
     *'          HOI --> I + OH       ',
     *'       2 INO2 --> I2 + 2 NO2   ',
     *'         INO2 --> I + NO2      ',
     *'         INO3 --> NO2 + IO     ',
     *'         INO3 --> I + NO3      ',
     *'        CH2I2 --> HCHO + I + IO',
     *'    CH3I + OH --> 0.3 CH3OH + 0.7 IRO2 + 0.3 I + 0.7 H2O',
     *'         CH3I --> I + MO2      ',
     *'   C2H5I + OH --> 0.5 IRO2 + 0.5 C2H5OH + 0.5 I + 0.5 H2O',
     *'        C2H5I --> ETO2 + I     ' /

      DATA( EQN_NAMES(i), i = 281, 300 ) /
     *'   C3H7I + OH --> 0.7 IRO2 + 0.3 C2H5OH + 0.3 I + 0.7 H2O',
     *'        C3H7I --> ETO2 + I     ',
     *'     MO2 + IO --> 0.5 OIO + HCHO + 0.5 I + HO2 + 0.5 O2',
     *'    IRO2 + NO --> HCHO + I + NO2',
     *'   IRO2 + HO2 --> XOR + H2O    ',
     *'       2 IRO2 --> 2 HCHO + 2 I ',
     *'   IRO2 + MO2 --> 2 HCHO + I + HO2',
     *'    BrCl + Cl --> Cl2 + Br     ',
     *'     Br2 + Cl --> BrCl + Br    ',
     *'      I2 + Cl --> ICl + I      ',
     *'      Cl + IO --> I + ClO      ',
     *'    OClO + Br --> BrO + ClO    ',
     *'     Cl2 + Br --> BrCl + Cl    ',
     *'   Cl2O2 + Br --> BrCl + Cl + O2',
     *'    BrCl + Br --> Br2 + Cl     ',
     *'      I2 + Br --> IBr + I      ',
     *'      Br + IO --> I + BrO      ',
     *'     IBr + Br --> Br2 + I      ',
     *'      Br2 + I --> IBr + Br     ',
     *'      I + BrO --> Br + IO      ' /

      DATA( EQN_NAMES(i), i = 301, 320 ) /
     *'     I2 + BrO --> IBr + Br     ',
     *'    BrO + ClO --> OClO + Br    ',
     *'    BrO + ClO --> Br + Cl + O2 ',
     *'    BrO + ClO --> BrCl + O2    ',
     *'     ClO + IO --> ICl + O2     ',
     *'     ClO + IO --> I + Cl + O2  ',
     *'     ClO + IO --> OClO + I     ',
     *'     BrO + IO --> I + Br + O2  ',
     *'     BrO + IO --> OIO + Br     ',
     *'     IBr + OH --> 0.84 HOI + 0.14 HOBr + 0.14 I + 0.84 Br',
     *'          IBr --> I + Br       ',
     *'     ICl + Br --> BrCl + I     ',
     *'     ICl + Cl --> Cl2 + I      ',
     *'     ICl + OH --> HOCl + I     ',
     *'          ICl --> I + Cl       ',
     *'   BrCl + O3P --> BrO + Cl     ',
     *'    BrCl + OH --> HOBr + Cl    ',
     *'         BrCl --> Br + Cl      ',
     *'    CH3I + Cl --> 0.3 RCl + 0.7 IRO2 + 0.7 HCl + 0.3 I',
     *'   C2H5I + Cl --> 0.5 RCl + 0.5 IRO2 + 0.5 HCl + 0.5 I' /

      DATA( EQN_NAMES(i), i = 321, 331 ) /
     *'   C3H7I + Cl --> 0.3 RCl + 0.7 IRO2 + 0.7 HCl + 0.3 I',
     *'       CH2BrI --> CO + I + Br + 2 HO2',
     *'       CH2ClI --> CO + I + Cl + 2 HO2',
     *'         HNO3 --> HNO3l1       ',
     *'         N2O5 --> DUMM1 + 2 HNO3',
     *'          NH3 --> NH3l1        ',
     *'        H2SO4 --> SO4l1        ',
     *'         HNO3 --> HNO3l2       ',
     *'         N2O5 --> 2 HNO3       ',
     *'          NH3 --> NH3l2        ',
     *'        H2SO4 --> SO4l2        ' /


C INLINED global variables                                         

C End INLINED global variables                                     

      END


